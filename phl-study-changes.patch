From d5e221b4f192e6a159ce1f812742fdda4d9a93d0 Mon Sep 17 00:00:00 2001
From: Tobias Polly <uzeca@student.kit.edu>
Date: Tue, 21 Aug 2018 19:13:45 +0200
Subject: [PATCH 1/5] Changes to start the game immediately and not stop on
 wall hit, instead output hits on stdout

---
 include/SSVOpenHexagon/Components/CWall.hpp | 10 ++++++++--
 include/SSVOpenHexagon/Core/MenuGame.hpp    |  2 ++
 src/SSVOpenHexagon/Components/CPlayer.cpp   | 10 +++++++---
 src/SSVOpenHexagon/Components/CWall.cpp     |  9 +++++++--
 src/SSVOpenHexagon/Core/HGGraphics.cpp      |  2 +-
 src/SSVOpenHexagon/Core/HGUpdate.cpp        | 14 +++++++-------
 src/SSVOpenHexagon/Core/HexagonGame.cpp     | 12 ++++++------
 src/SSVOpenHexagon/Core/MenuGame.cpp        | 23 ++++++++++++++++++++++-
 src/SSVOpenHexagon/Core/main.cpp            | 21 +++++++++++++--------
 9 files changed, 73 insertions(+), 30 deletions(-)

diff --git a/include/SSVOpenHexagon/Components/CWall.hpp b/include/SSVOpenHexagon/Components/CWall.hpp
index 129814b..9ebfdba 100644
--- a/include/SSVOpenHexagon/Components/CWall.hpp
+++ b/include/SSVOpenHexagon/Components/CWall.hpp
@@ -52,6 +52,7 @@ namespace hg
         SpeedData speed, curve;
         float distance{0}, thickness{0}, hueMod{0};
         int side{0};
+        bool removed;
 
     public:
         bool killed{false};
@@ -62,12 +63,15 @@ namespace hg
 
         void update(FT mFT);
         void draw();
-
+        
+        inline void remove() noexcept
+        {
+            removed = true;
+        }
         inline void setHueMod(float mHueMod) noexcept
         {
             hueMod = mHueMod;
         }
-
         inline SpeedData& getSpeed() noexcept
         {
             return speed;
@@ -78,6 +82,8 @@ namespace hg
         }
         inline bool isOverlapping(const Vec2f& mPoint) const noexcept
         {
+        		if (removed)
+        			return false;
             return ssvs::isPointInPolygon(vertexPositions, mPoint);
         }
     };
diff --git a/include/SSVOpenHexagon/Core/MenuGame.hpp b/include/SSVOpenHexagon/Core/MenuGame.hpp
index 9e2d167..6849d90 100644
--- a/include/SSVOpenHexagon/Core/MenuGame.hpp
+++ b/include/SSVOpenHexagon/Core/MenuGame.hpp
@@ -91,6 +91,7 @@ namespace hg
         float touchDelay{0.f};
 
         void refreshCamera();
+
         void initAssets();
         void initMenus();
         void initInput();
@@ -186,6 +187,7 @@ namespace hg
         MenuGame(HGAssets& mAssets, HexagonGame& mHexagonGame,
             ssvs::GameWindow& mGameWindow);
         void init();
+        void startGame();
         inline ssvs::GameState& getGame() noexcept
         {
             return game;
diff --git a/src/SSVOpenHexagon/Components/CPlayer.cpp b/src/SSVOpenHexagon/Components/CPlayer.cpp
index ce28d48..c21e459 100644
--- a/src/SSVOpenHexagon/Components/CPlayer.cpp
+++ b/src/SSVOpenHexagon/Components/CPlayer.cpp
@@ -17,7 +17,7 @@ using namespace hg::Utils;
 namespace hg
 {
     constexpr float baseThickness{5.f};
-
+    
     CPlayer::CPlayer(HexagonGame& mHexagonGame, const Vec2f& mStartPos)
         : hexagonGame(&mHexagonGame), startPos{mStartPos},
           pos{startPos}
@@ -129,15 +129,19 @@ namespace hg
         Vec2f pLeftCheck{getOrbitRad(tempPos, angle - ssvu::piHalf, 0.01f)};
         Vec2f pRightCheck{getOrbitRad(tempPos, angle + ssvu::piHalf, 0.01f)};
 
-        for(const auto& wall : hexagonGame->walls)
+        for(auto& wall : hexagonGame->walls)
         {
             if((movement == -1 && wall.isOverlapping(pLeftCheck)) ||
                 (movement == 1 && wall.isOverlapping(pRightCheck)))
                 angle = lastAngle;
             if(wall.isOverlapping(pos))
             {
+        		    printf("#wall crushed#\n");
+        		    fflush(stdout);
+            		wall.remove();
                 deadEffectTimer.restart();
-                if(!Config::getInvincible()) dead = true;
+                //if(!Config::getInvincible()) dead = true;
+                //dead = true;
                 moveTowards(
                     lastPos, ssvs::zeroVec2f, 5 * hexagonGame->getSpeedMultDM());
                 pos = lastPos;
diff --git a/src/SSVOpenHexagon/Components/CWall.cpp b/src/SSVOpenHexagon/Components/CWall.cpp
index a1bb361..4803487 100644
--- a/src/SSVOpenHexagon/Components/CWall.cpp
+++ b/src/SSVOpenHexagon/Components/CWall.cpp
@@ -34,13 +34,14 @@ namespace hg
 
     void CWall::draw()
     {
+    		if (removed) return;
         auto colorMain(hexagonGame->getColorMain());
         if(hueMod != 0) colorMain = Utils::transformHue(colorMain, hueMod);
 
         for(auto i(0u); i < 4; ++i)
             hexagonGame->wallQuads.emplace_back(vertexPositions[i], colorMain);
     }
-
+    
     void CWall::update(FT mFT)
     {
         speed.update(mFT);
@@ -61,6 +62,10 @@ namespace hg
             }
         }
 
-        if(pointsOnCenter > 3) killed=true;
+        if(pointsOnCenter > 3) 
+        { 
+            killed=true;
+            removed=false;
+        }
     }
 }
diff --git a/src/SSVOpenHexagon/Core/HGGraphics.cpp b/src/SSVOpenHexagon/Core/HGGraphics.cpp
index 4ec0af9..e80d255 100644
--- a/src/SSVOpenHexagon/Core/HGGraphics.cpp
+++ b/src/SSVOpenHexagon/Core/HGGraphics.cpp
@@ -158,7 +158,7 @@ namespace hg
         if(status.started)
         {
             if(levelStatus.swapEnabled) os << "swap enabled\n";
-            if(Config::getInvincible()) os << "invincibility on\n";
+            //if(Config::getInvincible()) os << "invincibility on\n";
             if(status.scoreInvalid)
                 os << "score invalidated (performance issues)\n";
             if(status.hasDied) os << "press r to restart\n";
diff --git a/src/SSVOpenHexagon/Core/HGUpdate.cpp b/src/SSVOpenHexagon/Core/HGUpdate.cpp
index c8f0d03..4c24a6c 100644
--- a/src/SSVOpenHexagon/Core/HGUpdate.cpp
+++ b/src/SSVOpenHexagon/Core/HGUpdate.cpp
@@ -26,7 +26,7 @@ namespace hg
         {
             status.started = true;
             messageText.setString("");
-            assets.playSound("go.ogg");
+            //assets.playSound("go.ogg");
             assets.musicPlayer.resume();
             if(Config::getOfficial()) fpsWatcher.enable();
         }
@@ -105,12 +105,12 @@ namespace hg
         {
             if(status.mustRestart)
             {
-                fpsWatcher.disable();
-                changeLevel(restartId, restartFirstTime);
-                if(!assets.pIsLocal() && Config::isEligibleForScore())
-                {
-                    Online::trySendRestart();
-                }
+                //fpsWatcher.disable();
+                //changeLevel(restartId, restartFirstTime);
+                //if(!assets.pIsLocal() && Config::isEligibleForScore())
+                //{
+                //    Online::trySendRestart();
+                //}
             }
             if(!status.scoreInvalid && Config::getOfficial() &&
                 fpsWatcher.isLimitReached())
diff --git a/src/SSVOpenHexagon/Core/HexagonGame.cpp b/src/SSVOpenHexagon/Core/HexagonGame.cpp
index 18f4670..8216355 100644
--- a/src/SSVOpenHexagon/Core/HexagonGame.cpp
+++ b/src/SSVOpenHexagon/Core/HexagonGame.cpp
@@ -152,7 +152,7 @@ namespace hg
 
         if(!mForce && (Config::getInvincible() || levelStatus.tutorialMode))
             return;
-        assets.playSound("gameOver.ogg", SoundPlayer::Mode::Abort);
+        //assets.playSound("gameOver.ogg", SoundPlayer::Mode::Abort);
 
         if(!assets.pIsLocal() && Config::isEligibleForScore())
         {
@@ -167,16 +167,16 @@ namespace hg
         shakeCamera(effectTimelineManager, overlayCamera);
         shakeCamera(effectTimelineManager, backgroundCamera);
 
-        status.hasDied = true;
-        stopLevelMusic();
-        checkAndSaveScore();
+        //status.hasDied = true;
+        //stopLevelMusic();
+        //checkAndSaveScore();
 
         if(Config::getAutoRestart()) status.mustRestart = true;
     }
 
     void HexagonGame::incrementDifficulty()
     {
-        assets.playSound("levelUp.ogg");
+        //assets.playSound("levelUp.ogg");
 
         if(levelStatus.shouldIncrement())
         {
@@ -312,7 +312,7 @@ namespace hg
     }
     void HexagonGame::setSides(unsigned int mSides)
     {
-        assets.playSound("beep.ogg");
+        //assets.playSound("beep.ogg");
         if(mSides < 3) mSides = 3;
         levelStatus.sides = mSides;
     }
diff --git a/src/SSVOpenHexagon/Core/MenuGame.cpp b/src/SSVOpenHexagon/Core/MenuGame.cpp
index 27b285f..01d00e7 100644
--- a/src/SSVOpenHexagon/Core/MenuGame.cpp
+++ b/src/SSVOpenHexagon/Core/MenuGame.cpp
@@ -67,13 +67,33 @@ namespace hg
         setIndex(0);
         initMenus();
         initInput();
+        
+// <-- added to start game immediately
+				assets.pSaveCurrent();
+				assets.pSetPlayingLocally(true);
+				enteredStr = "new_participant";
+				assets.pCreate(enteredStr);
+        assets.pSetCurrent(enteredStr);
+        enteredStr = "";
+        state = s::SMain;
+// -->
     }
 
+// <-- added to start game immediately
+		void MenuGame::startGame()
+		{
+        window.setGameState(hexagonGame.getGame());
+//        hexagonGame.newGame(levelDataIds[currentIndex], true, ssvu::getByModIdx(diffMults, diffMultIdx));
+//        printf("%9.6f", ssvu::getByModIdx(diffMults, diffMultIdx));
+				hexagonGame.newGame(levelDataIds[currentIndex], true, 1);
+		}
+// -->
+
     void MenuGame::init()
     {
         assets.stopMusics();
         assets.stopSounds();
-        assets.playSound("openHexagon.ogg");
+        //assets.playSound("openHexagon.ogg");
         Online::setForceLeaderboardRefresh(true);
     }
     void MenuGame::initAssets()
@@ -86,6 +106,7 @@ namespace hg
 
     void MenuGame::initMenus()
     {
+    		
         namespace i = ssvms::Items;
 
         auto whenLocal = [this]
diff --git a/src/SSVOpenHexagon/Core/main.cpp b/src/SSVOpenHexagon/Core/main.cpp
index c51975b..0769a37 100644
--- a/src/SSVOpenHexagon/Core/main.cpp
+++ b/src/SSVOpenHexagon/Core/main.cpp
@@ -46,7 +46,7 @@ int main(int argc, char* argv[])
     {
         Config::loadConfig(overrideIds);
         auto levelOnlyAssets(mkUPtr<HGAssets>(true));
-        Online::initializeValidators(*levelOnlyAssets);
+        //Online::initializeValidators(*levelOnlyAssets);
         auto ohServer(mkUPtr<Online::OHServer>());
         ohServer->start();
         return 0;
@@ -54,13 +54,12 @@ int main(int argc, char* argv[])
 
     createProfilesFolder();
 
-    Online::initializeClient();
-    Online::tryConnectToServer();
+    //Online::initializeClient();
+    //Online::tryConnectToServer();
 
     Config::loadConfig(overrideIds);
 
-    if(Config::getServerLocal())
-        ssvu::lo("Server") << "LOCAL MODE ON" << std::endl;
+    ssvu::lo("Server") << "LOCAL MODE ON" << std::endl;
 
     GameWindow window;
     window.setTitle("Open Hexagon " + toStr(Config::getVersion()) +
@@ -76,7 +75,7 @@ int main(int argc, char* argv[])
     Config::setTimerStatic(window, Config::getTimerStatic());
 
     auto assets(mkUPtr<HGAssets>());
-    Online::initializeValidators(*assets);
+    //Online::initializeValidators(*assets);
     auto hg(mkUPtr<HexagonGame>(*assets, window));
     auto mg(mkUPtr<MenuGame>(*assets, *hg, window));
     hg->mgPtr = mg.get();
@@ -84,16 +83,22 @@ int main(int argc, char* argv[])
     assets->refreshVolumes();
     window.setGameState(mg->getGame());
     mg->init();
+
+// <-- start game immediately
+		mg->startGame();
+// -->
     window.run();
 
-    if(Online::getLoginStatus() != Online::LoginStat::Logged) Online::logout();
+    //if(Online::getLoginStatus() != Online::LoginStat::Logged) Online::logout();
 
     ssvu::lo().flush();
 
     Config::saveConfig();
     assets->pSaveCurrent();
     saveLogToFile("log.txt");
-    Online::cleanup();
+    //Online::cleanup();
+    
+
 
     return 0;
 }
-- 
2.11.0


From 6a8e7d960e28972f2c608bc0dc756677789afff7 Mon Sep 17 00:00:00 2001
From: Tobias Polly <uzeca@student.kit.edu>
Date: Thu, 23 Aug 2018 19:51:24 +0200
Subject: [PATCH 2/5] commit level changes to be able to step back

---
 _RELEASE/Packs/cube/Levels/apeirogon.json          |  12 -
 _RELEASE/Packs/cube/Levels/babysteps.json          |  11 -
 _RELEASE/Packs/cube/Levels/commando.json           |  12 -
 _RELEASE/Packs/cube/Levels/euclideanpc.json        |  12 -
 _RELEASE/Packs/cube/Levels/flatteringshape.json    |  12 -
 _RELEASE/Packs/cube/Levels/goldenratio.json        |  12 -
 _RELEASE/Packs/cube/Levels/labyrinth.json          |  12 -
 _RELEASE/Packs/cube/Levels/pi.json                 |  12 -
 _RELEASE/Packs/cube/Levels/pointless.json          |  12 -
 _RELEASE/Packs/cube/Levels/seconddimension.json    |  12 -
 _RELEASE/Packs/cube/Music/callMeKatla.json         |  20 --
 _RELEASE/Packs/cube/Music/captainCool.json         |  20 --
 _RELEASE/Packs/cube/Music/commandoSteve.json       |  19 --
 _RELEASE/Packs/cube/Music/drFinkelfracken.json     |  21 --
 _RELEASE/Packs/cube/Music/jackRussel.json          |  21 --
 _RELEASE/Packs/cube/Music/mazeOfMayonnaise.json    |  20 --
 _RELEASE/Packs/cube/Music/milkyWays.json           |  20 --
 _RELEASE/Packs/cube/Music/starshipShowdown.json    |  19 --
 _RELEASE/Packs/cube/Music/steampunkWarlord.json    |  20 --
 _RELEASE/Packs/cube/Scripts/Levels/apeirogon.lua   |  92 -------
 _RELEASE/Packs/cube/Scripts/Levels/babysteps.lua   |  78 ------
 _RELEASE/Packs/cube/Scripts/Levels/commando.lua    |  71 -----
 _RELEASE/Packs/cube/Scripts/Levels/euclideanpc.lua |  87 ------
 .../Packs/cube/Scripts/Levels/flatteringshape.lua  |  79 ------
 _RELEASE/Packs/cube/Scripts/Levels/goldenratio.lua |  73 -----
 _RELEASE/Packs/cube/Scripts/Levels/labyrinth.lua   |  74 -----
 _RELEASE/Packs/cube/Scripts/Levels/pi.lua          |  88 ------
 _RELEASE/Packs/cube/Scripts/Levels/pointless.lua   |  78 ------
 .../Packs/cube/Scripts/Levels/seconddimension.lua  |  87 ------
 .../Packs/cube/Scripts/alternativepatterns.lua     | 119 --------
 _RELEASE/Packs/cube/Scripts/common.lua             | 114 --------
 _RELEASE/Packs/cube/Scripts/commonpatterns.lua     | 196 --------------
 _RELEASE/Packs/cube/Scripts/utils.lua              |  28 --
 _RELEASE/Packs/cube/Styles/apeirogon.json          |  30 --
 _RELEASE/Packs/cube/Styles/babysteps.json          |  34 ---
 _RELEASE/Packs/cube/Styles/commando.json           |  36 ---
 _RELEASE/Packs/cube/Styles/dangertest.json         |  34 ---
 _RELEASE/Packs/cube/Styles/euclideanpc.json        |  34 ---
 _RELEASE/Packs/cube/Styles/flatteringshape.json    |  30 --
 _RELEASE/Packs/cube/Styles/goldenratio.json        |  34 ---
 _RELEASE/Packs/cube/Styles/labyrinth.json          |  33 ---
 _RELEASE/Packs/cube/Styles/pi.json                 |  34 ---
 _RELEASE/Packs/cube/Styles/pointless.json          |  30 --
 _RELEASE/Packs/cube/Styles/seconddimension.json    |  34 ---
 _RELEASE/Packs/cube/pack.json                      |   4 -
 _RELEASE/Packs/hypercube/Levels/acceleradiant.json |  12 -
 _RELEASE/Packs/hypercube/Levels/centrifugal.json   |  12 -
 _RELEASE/Packs/hypercube/Levels/disc-o.json        |  12 -
 _RELEASE/Packs/hypercube/Levels/evotutorial.json   |  11 -
 _RELEASE/Packs/hypercube/Levels/g-force.json       |  12 -
 _RELEASE/Packs/hypercube/Levels/incongruence.json  |  12 -
 _RELEASE/Packs/hypercube/Levels/massacre.json      |  12 -
 _RELEASE/Packs/hypercube/Levels/polyhedrug.json    |  12 -
 _RELEASE/Packs/hypercube/Levels/reppaws.json       |  12 -
 _RELEASE/Packs/hypercube/Levels/slither.json       |  12 -
 _RELEASE/Packs/hypercube/Music/cpumood.json        |  20 --
 _RELEASE/Packs/hypercube/Music/dischipo.json       |  20 --
 _RELEASE/Packs/hypercube/Music/flirtFlirt.json     |  21 --
 _RELEASE/Packs/hypercube/Music/gmoomh.json         |  20 --
 _RELEASE/Packs/hypercube/Music/johnnyDerp.json     |  20 --
 _RELEASE/Packs/hypercube/Music/massacrev2.json     |  20 --
 _RELEASE/Packs/hypercube/Music/minimal.json        |  20 --
 _RELEASE/Packs/hypercube/Music/mrGawne.json        |  20 --
 _RELEASE/Packs/hypercube/Music/pep.json            |  20 --
 _RELEASE/Packs/hypercube/Music/tengil.json         |  19 --
 .../hypercube/Scripts/Levels/acceleradiant.lua     |  92 -------
 .../Packs/hypercube/Scripts/Levels/centrifugal.lua |  66 -----
 _RELEASE/Packs/hypercube/Scripts/Levels/disc-o.lua | 105 -------
 .../Packs/hypercube/Scripts/Levels/evotutorial.lua | 178 ------------
 .../Packs/hypercube/Scripts/Levels/g-force.lua     | 122 ---------
 .../hypercube/Scripts/Levels/incongruence.lua      | 103 -------
 .../Packs/hypercube/Scripts/Levels/massacre.lua    | 129 ---------
 .../Packs/hypercube/Scripts/Levels/polyhedrug.lua  | 109 --------
 .../Packs/hypercube/Scripts/Levels/reppaws.lua     |  86 ------
 .../Packs/hypercube/Scripts/Levels/slither.lua     | 110 --------
 .../hypercube/Scripts/alternativepatterns.lua      | 119 --------
 _RELEASE/Packs/hypercube/Scripts/common.lua        | 114 --------
 .../Packs/hypercube/Scripts/commonpatterns.lua     | 196 --------------
 .../Packs/hypercube/Scripts/evolutionpatterns.lua  | 301 ---------------------
 _RELEASE/Packs/hypercube/Scripts/nextpatterns.lua  | 158 -----------
 _RELEASE/Packs/hypercube/Scripts/utils.lua         |  28 --
 _RELEASE/Packs/hypercube/Styles/acceleradiant.json |  33 ---
 _RELEASE/Packs/hypercube/Styles/centrifugal.json   |  33 ---
 _RELEASE/Packs/hypercube/Styles/disc-o.json        |  33 ---
 _RELEASE/Packs/hypercube/Styles/evotutorial.json   |  33 ---
 _RELEASE/Packs/hypercube/Styles/g-force.json       |  33 ---
 _RELEASE/Packs/hypercube/Styles/incongruence.json  |  32 ---
 _RELEASE/Packs/hypercube/Styles/massacre.json      |  34 ---
 _RELEASE/Packs/hypercube/Styles/polyhedrug.json    |  33 ---
 _RELEASE/Packs/hypercube/Styles/reppaws.json       |  31 ---
 _RELEASE/Packs/hypercube/Styles/slither.json       |  33 ---
 _RELEASE/Packs/hypercube/pack.json                 |   4 -
 _RELEASE/config.json                               |  18 +-
 extlibs/mingw-std-threads                          |   2 +-
 extlibs/vrm_pp                                     |   2 +-
 src/SSVOpenHexagon/Components/CPlayer.cpp          |   8 +-
 96 files changed, 15 insertions(+), 4612 deletions(-)
 delete mode 100644 _RELEASE/Packs/cube/Levels/apeirogon.json
 delete mode 100644 _RELEASE/Packs/cube/Levels/babysteps.json
 delete mode 100644 _RELEASE/Packs/cube/Levels/commando.json
 delete mode 100644 _RELEASE/Packs/cube/Levels/euclideanpc.json
 delete mode 100644 _RELEASE/Packs/cube/Levels/flatteringshape.json
 delete mode 100644 _RELEASE/Packs/cube/Levels/goldenratio.json
 delete mode 100644 _RELEASE/Packs/cube/Levels/labyrinth.json
 delete mode 100644 _RELEASE/Packs/cube/Levels/pi.json
 delete mode 100644 _RELEASE/Packs/cube/Levels/pointless.json
 delete mode 100644 _RELEASE/Packs/cube/Levels/seconddimension.json
 delete mode 100644 _RELEASE/Packs/cube/Music/callMeKatla.json
 delete mode 100644 _RELEASE/Packs/cube/Music/captainCool.json
 delete mode 100644 _RELEASE/Packs/cube/Music/commandoSteve.json
 delete mode 100644 _RELEASE/Packs/cube/Music/drFinkelfracken.json
 delete mode 100644 _RELEASE/Packs/cube/Music/jackRussel.json
 delete mode 100644 _RELEASE/Packs/cube/Music/mazeOfMayonnaise.json
 delete mode 100644 _RELEASE/Packs/cube/Music/milkyWays.json
 delete mode 100644 _RELEASE/Packs/cube/Music/starshipShowdown.json
 delete mode 100644 _RELEASE/Packs/cube/Music/steampunkWarlord.json
 delete mode 100644 _RELEASE/Packs/cube/Scripts/Levels/apeirogon.lua
 delete mode 100644 _RELEASE/Packs/cube/Scripts/Levels/babysteps.lua
 delete mode 100644 _RELEASE/Packs/cube/Scripts/Levels/commando.lua
 delete mode 100644 _RELEASE/Packs/cube/Scripts/Levels/euclideanpc.lua
 delete mode 100644 _RELEASE/Packs/cube/Scripts/Levels/flatteringshape.lua
 delete mode 100644 _RELEASE/Packs/cube/Scripts/Levels/goldenratio.lua
 delete mode 100644 _RELEASE/Packs/cube/Scripts/Levels/labyrinth.lua
 delete mode 100644 _RELEASE/Packs/cube/Scripts/Levels/pi.lua
 delete mode 100644 _RELEASE/Packs/cube/Scripts/Levels/pointless.lua
 delete mode 100644 _RELEASE/Packs/cube/Scripts/Levels/seconddimension.lua
 delete mode 100644 _RELEASE/Packs/cube/Scripts/alternativepatterns.lua
 delete mode 100644 _RELEASE/Packs/cube/Scripts/common.lua
 delete mode 100644 _RELEASE/Packs/cube/Scripts/commonpatterns.lua
 delete mode 100644 _RELEASE/Packs/cube/Scripts/utils.lua
 delete mode 100644 _RELEASE/Packs/cube/Styles/apeirogon.json
 delete mode 100644 _RELEASE/Packs/cube/Styles/babysteps.json
 delete mode 100644 _RELEASE/Packs/cube/Styles/commando.json
 delete mode 100644 _RELEASE/Packs/cube/Styles/dangertest.json
 delete mode 100644 _RELEASE/Packs/cube/Styles/euclideanpc.json
 delete mode 100644 _RELEASE/Packs/cube/Styles/flatteringshape.json
 delete mode 100644 _RELEASE/Packs/cube/Styles/goldenratio.json
 delete mode 100644 _RELEASE/Packs/cube/Styles/labyrinth.json
 delete mode 100644 _RELEASE/Packs/cube/Styles/pi.json
 delete mode 100644 _RELEASE/Packs/cube/Styles/pointless.json
 delete mode 100644 _RELEASE/Packs/cube/Styles/seconddimension.json
 delete mode 100644 _RELEASE/Packs/cube/pack.json
 delete mode 100644 _RELEASE/Packs/hypercube/Levels/acceleradiant.json
 delete mode 100644 _RELEASE/Packs/hypercube/Levels/centrifugal.json
 delete mode 100644 _RELEASE/Packs/hypercube/Levels/disc-o.json
 delete mode 100644 _RELEASE/Packs/hypercube/Levels/evotutorial.json
 delete mode 100644 _RELEASE/Packs/hypercube/Levels/g-force.json
 delete mode 100644 _RELEASE/Packs/hypercube/Levels/incongruence.json
 delete mode 100644 _RELEASE/Packs/hypercube/Levels/massacre.json
 delete mode 100644 _RELEASE/Packs/hypercube/Levels/polyhedrug.json
 delete mode 100644 _RELEASE/Packs/hypercube/Levels/reppaws.json
 delete mode 100644 _RELEASE/Packs/hypercube/Levels/slither.json
 delete mode 100644 _RELEASE/Packs/hypercube/Music/cpumood.json
 delete mode 100644 _RELEASE/Packs/hypercube/Music/dischipo.json
 delete mode 100644 _RELEASE/Packs/hypercube/Music/flirtFlirt.json
 delete mode 100644 _RELEASE/Packs/hypercube/Music/gmoomh.json
 delete mode 100644 _RELEASE/Packs/hypercube/Music/johnnyDerp.json
 delete mode 100644 _RELEASE/Packs/hypercube/Music/massacrev2.json
 delete mode 100644 _RELEASE/Packs/hypercube/Music/minimal.json
 delete mode 100644 _RELEASE/Packs/hypercube/Music/mrGawne.json
 delete mode 100644 _RELEASE/Packs/hypercube/Music/pep.json
 delete mode 100644 _RELEASE/Packs/hypercube/Music/tengil.json
 delete mode 100644 _RELEASE/Packs/hypercube/Scripts/Levels/acceleradiant.lua
 delete mode 100644 _RELEASE/Packs/hypercube/Scripts/Levels/centrifugal.lua
 delete mode 100644 _RELEASE/Packs/hypercube/Scripts/Levels/disc-o.lua
 delete mode 100644 _RELEASE/Packs/hypercube/Scripts/Levels/evotutorial.lua
 delete mode 100644 _RELEASE/Packs/hypercube/Scripts/Levels/g-force.lua
 delete mode 100644 _RELEASE/Packs/hypercube/Scripts/Levels/incongruence.lua
 delete mode 100644 _RELEASE/Packs/hypercube/Scripts/Levels/massacre.lua
 delete mode 100644 _RELEASE/Packs/hypercube/Scripts/Levels/polyhedrug.lua
 delete mode 100644 _RELEASE/Packs/hypercube/Scripts/Levels/reppaws.lua
 delete mode 100644 _RELEASE/Packs/hypercube/Scripts/Levels/slither.lua
 delete mode 100644 _RELEASE/Packs/hypercube/Scripts/alternativepatterns.lua
 delete mode 100644 _RELEASE/Packs/hypercube/Scripts/common.lua
 delete mode 100644 _RELEASE/Packs/hypercube/Scripts/commonpatterns.lua
 delete mode 100644 _RELEASE/Packs/hypercube/Scripts/evolutionpatterns.lua
 delete mode 100644 _RELEASE/Packs/hypercube/Scripts/nextpatterns.lua
 delete mode 100644 _RELEASE/Packs/hypercube/Scripts/utils.lua
 delete mode 100644 _RELEASE/Packs/hypercube/Styles/acceleradiant.json
 delete mode 100644 _RELEASE/Packs/hypercube/Styles/centrifugal.json
 delete mode 100644 _RELEASE/Packs/hypercube/Styles/disc-o.json
 delete mode 100644 _RELEASE/Packs/hypercube/Styles/evotutorial.json
 delete mode 100644 _RELEASE/Packs/hypercube/Styles/g-force.json
 delete mode 100644 _RELEASE/Packs/hypercube/Styles/incongruence.json
 delete mode 100644 _RELEASE/Packs/hypercube/Styles/massacre.json
 delete mode 100644 _RELEASE/Packs/hypercube/Styles/polyhedrug.json
 delete mode 100644 _RELEASE/Packs/hypercube/Styles/reppaws.json
 delete mode 100644 _RELEASE/Packs/hypercube/Styles/slither.json
 delete mode 100644 _RELEASE/Packs/hypercube/pack.json

diff --git a/_RELEASE/Packs/cube/Levels/apeirogon.json b/_RELEASE/Packs/cube/Levels/apeirogon.json
deleted file mode 100644
index 1baeb47..0000000
--- a/_RELEASE/Packs/cube/Levels/apeirogon.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "apeirogon",
-	"name": "apeirogon",
-	"description": "hardest level of difficulty",
-	"author": "vittorio romeo",	
-	"menuPriority": 40,
-	"selectable": true,
-	"styleId": "apeirogon",
-	"musicId": "milkyWays",
-	"luaFile": "Scripts/Levels/apeirogon.lua",
-	"difficultyMults": [1.25, 1.40, 0.75, 0.5, 0.35]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Levels/babysteps.json b/_RELEASE/Packs/cube/Levels/babysteps.json
deleted file mode 100644
index 0abe143..0000000
--- a/_RELEASE/Packs/cube/Levels/babysteps.json
+++ /dev/null
@@ -1,11 +0,0 @@
-{
-	"id": "babysteps",
-	"name": "baby steps",
-	"description": "learn to play openhexagon",
-	"author": "vittorio romeo",
-	"menuPriority": 0,
-	"selectable": true,
-	"styleId": "babysteps",
-	"musicId": "drFinkelfracken",
-	"luaFile": "Scripts/Levels/babysteps.lua"
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Levels/commando.json b/_RELEASE/Packs/cube/Levels/commando.json
deleted file mode 100644
index d6a849b..0000000
--- a/_RELEASE/Packs/cube/Levels/commando.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "commando",
-	"name": "commando",
-	"description": "exponential difficulty \nfor exponential entertainment",
-	"author": "vittorio romeo",	
-	"menuPriority": 50,
-	"selectable": true,
-	"styleId": "commando",
-	"musicId": "commandoSteve",
-	"luaFile": "Scripts/Levels/commando.lua",
-	"difficultyMults": [1.25, 1.50, 0.75, 0.5, 0.25]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Levels/euclideanpc.json b/_RELEASE/Packs/cube/Levels/euclideanpc.json
deleted file mode 100644
index 9fc846c..0000000
--- a/_RELEASE/Packs/cube/Levels/euclideanpc.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "euclideanpc",
-	"name": "euclidean plane crash",
-	"description": "special level of difficulty",
-	"author": "vittorio romeo",	
-	"menuPriority": 60,
-	"selectable": true,
-	"styleId": "euclideanpc",
-	"musicId": "steampunkWarlord",
-	"luaFile": "Scripts/Levels/euclideanpc.lua",
-	"difficultyMults": [1.25, 1.50, 0.75, 0.5, 0.25]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Levels/flatteringshape.json b/_RELEASE/Packs/cube/Levels/flatteringshape.json
deleted file mode 100644
index e5f8922..0000000
--- a/_RELEASE/Packs/cube/Levels/flatteringshape.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "flatteringshape",
-	"name": "flattering shape",
-	"description": "normal level of difficulty",
-	"author": "vittorio romeo",	
-	"menuPriority": 20,
-	"selectable": true,
-	"styleId": "flatteringshape",
-	"musicId": "starshipShowdown",
-	"luaFile": "Scripts/Levels/flatteringshape.lua",
-	"difficultyMults": [1.5, 2, 2.5, 0.5, 3]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Levels/goldenratio.json b/_RELEASE/Packs/cube/Levels/goldenratio.json
deleted file mode 100644
index 654c59c..0000000
--- a/_RELEASE/Packs/cube/Levels/goldenratio.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "goldenratio",
-	"name": "golden ratio",
-	"description": "relax with the spirals",
-	"author": "vittorio romeo",	
-	"menuPriority": 90,
-	"selectable": true,
-	"styleId": "goldenratio",
-	"musicId": "captainCool",
-	"luaFile": "Scripts/Levels/goldenratio.lua",
-	"difficultyMults": [1.25, 1.50, 0.75, 0.5, 0.25]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Levels/labyrinth.json b/_RELEASE/Packs/cube/Levels/labyrinth.json
deleted file mode 100644
index 998864b..0000000
--- a/_RELEASE/Packs/cube/Levels/labyrinth.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "labyrinth",
-	"name": "labyrinth",
-	"description": "forever trapped",
-	"author": "vittorio romeo",	
-	"menuPriority": 80,
-	"selectable": true,
-	"styleId": "labyrinth",
-	"musicId": "commandoSteve",
-	"luaFile": "Scripts/Levels/labyrinth.lua",
-	"difficultyMults": [1.25, 1.50, 0.75, 0.5, 0.25, 1.8]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Levels/pi.json b/_RELEASE/Packs/cube/Levels/pi.json
deleted file mode 100644
index 9533009..0000000
--- a/_RELEASE/Packs/cube/Levels/pi.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "pi",
-	"name": "3.141592653589793238462643383279502884197169399375105820974944592307816406286",
-	"description": "do you like pi?",
-	"author": "vittorio romeo",	
-	"menuPriority": 70,
-	"selectable": true,
-	"styleId": "pi",
-	"musicId": "callMeKatla",
-	"luaFile": "Scripts/Levels/pi.lua",
-	"difficultyMults": [1.25, 1.50, 0.75, 0.5, 0.25, 1.8]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Levels/pointless.json b/_RELEASE/Packs/cube/Levels/pointless.json
deleted file mode 100644
index b3c4519..0000000
--- a/_RELEASE/Packs/cube/Levels/pointless.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "pointless",
-	"name": "pointless",
-	"description": "easiest level of difficulty",
-	"author": "vittorio romeo",
-	"menuPriority": 10,
-	"selectable": true,
-	"styleId": "pointless",
-	"musicId": "jackRussel",
-	"luaFile": "Scripts/Levels/pointless.lua",
-	"difficultyMults": [1.5, 2, 2.5, 3, 0.5, 4]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Levels/seconddimension.json b/_RELEASE/Packs/cube/Levels/seconddimension.json
deleted file mode 100644
index 24f84aa..0000000
--- a/_RELEASE/Packs/cube/Levels/seconddimension.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "seconddimension",
-	"name": "second dimension",
-	"description": "hard level of difficulty",
-	"author": "vittorio romeo",	
-	"menuPriority": 30,
-	"selectable": true,
-	"styleId": "seconddimension",
-	"musicId": "mazeOfMayonnaise",
-	"luaFile": "Scripts/Levels/seconddimension.lua",
-	"difficultyMults": [1.4, 0.75, 0.6, 1.8]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Music/callMeKatla.json b/_RELEASE/Packs/cube/Music/callMeKatla.json
deleted file mode 100644
index 2e6b128..0000000
--- a/_RELEASE/Packs/cube/Music/callMeKatla.json
+++ /dev/null
@@ -1,20 +0,0 @@
-{
-	// Music data id
-	"id": "callMeKatla",
-
-	// Music file
-	"file_name": "callMeKatla.ogg",
-
-	// Music information
-	"name": "Call me Katla, baby",
-	"album": "",
-	"author": "Dunderpatrullen VS. BOSSFIGHT",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 24 },
-		{ "time": 73 },
-		{ "time": 140 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Music/captainCool.json b/_RELEASE/Packs/cube/Music/captainCool.json
deleted file mode 100644
index bfc1627..0000000
--- a/_RELEASE/Packs/cube/Music/captainCool.json
+++ /dev/null
@@ -1,20 +0,0 @@
-{
-
-	// Music data id
-	"id": "captainCool",
-	// Music file
-	"file_name": "captainCool.ogg",
-
-	// Music information
-	"name": "Captain Cool",
-	"album": "Bossfight",
-	"author": "BOSSFIGHT",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 0 },
-		{ "time": 43 },
-		{ "time": 111 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Music/commandoSteve.json b/_RELEASE/Packs/cube/Music/commandoSteve.json
deleted file mode 100644
index 93f5c77..0000000
--- a/_RELEASE/Packs/cube/Music/commandoSteve.json
+++ /dev/null
@@ -1,19 +0,0 @@
-{
-	// Music data id
-	"id": "commandoSteve",
-
-	// Music file
-	"file_name": "commandoSteve.ogg",
-
-	// Music information
-	"name": "Commando Steve",
-	"album": "Caps On, Hats Off",
-	"author": "BOSSFIGHT",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 61 },
-		{ "time": 88 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Music/drFinkelfracken.json b/_RELEASE/Packs/cube/Music/drFinkelfracken.json
deleted file mode 100644
index be0568f..0000000
--- a/_RELEASE/Packs/cube/Music/drFinkelfracken.json
+++ /dev/null
@@ -1,21 +0,0 @@
-{
-	// Music data id
-	"id": "drFinkelfracken",
-
-	// Music file
-	"file_name": "drFinkelfracken.ogg",
-
-	// Music information
-	"name": "Dr. Finkelfracken's Cure",
-	"album": "Nice Catch Biggy!",
-	"author": "BOSSFIGHT",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 0 },
-		{ "time": 18 },
-		{ "time": 68 },
-		{ "time": 91 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Music/jackRussel.json b/_RELEASE/Packs/cube/Music/jackRussel.json
deleted file mode 100644
index 4f3c394..0000000
--- a/_RELEASE/Packs/cube/Music/jackRussel.json
+++ /dev/null
@@ -1,21 +0,0 @@
-{
-	// Music data id
-	"id": "jackRussel",
-
-	// Music file
-	"file_name": "jackRussel.ogg",
-
-	// Music information
-	"name": "Jack Russel",
-	"album": "Caps On, Hats Off",
-	"author": "BOSSFIGHT",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 32 },
-		{ "time": 47 },
-		{ "time": 98 },
-		{ "time": 125 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Music/mazeOfMayonnaise.json b/_RELEASE/Packs/cube/Music/mazeOfMayonnaise.json
deleted file mode 100644
index be24fe6..0000000
--- a/_RELEASE/Packs/cube/Music/mazeOfMayonnaise.json
+++ /dev/null
@@ -1,20 +0,0 @@
-{
-	// Music data id
-	"id": "mazeOfMayonnaise",
-
-	// Music file
-	"file_name": "mazeOfMayonnaise.ogg",
-
-	// Music information
-	"name": "The Maze of Mayonnaise",
-	"album": "Caps On, Hats Off",
-	"author": "BOSSFIGHT",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 35 },
-		{ "time": 52 },
-		{ "time": 93 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Music/milkyWays.json b/_RELEASE/Packs/cube/Music/milkyWays.json
deleted file mode 100644
index 786c0e1..0000000
--- a/_RELEASE/Packs/cube/Music/milkyWays.json
+++ /dev/null
@@ -1,20 +0,0 @@
-{
-	// Music data id
-	"id": "milkyWays",
-
-	// Music file
-	"file_name": "milkyWays.ogg",
-
-	// Music information
-	"name": "Milky Ways",
-	"album": "Caps On, Hats Off",
-	"author": "BOSSFIGHT",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 16 },
-		{ "time": 37 },
-		{ "time": 81 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Music/starshipShowdown.json b/_RELEASE/Packs/cube/Music/starshipShowdown.json
deleted file mode 100644
index d1773a8..0000000
--- a/_RELEASE/Packs/cube/Music/starshipShowdown.json
+++ /dev/null
@@ -1,19 +0,0 @@
-{
-	// Music data id
-	"id": "starshipShowdown",
-
-	// Music file
-	"file_name": "starshipShowdown.ogg",
-
-	// Music information
-	"name": "Starship Showdown",
-	"album": "Caps On, Hats Off",
-	"author": "BOSSFIGHT",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 26 },
-		{ "time": 66 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Music/steampunkWarlord.json b/_RELEASE/Packs/cube/Music/steampunkWarlord.json
deleted file mode 100644
index df69542..0000000
--- a/_RELEASE/Packs/cube/Music/steampunkWarlord.json
+++ /dev/null
@@ -1,20 +0,0 @@
-{
-	// Music data id
-	"id": "steampunkWarlord",
-
-	// Music file
-	"file_name": "steampunkWarlord.ogg",
-
-	// Music information
-	"name": "Steampunk Warlord",
-	"album": "Caps On, Hats Off",
-	"author": "BOSSFIGHT",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 74 },
-		{ "time": 98 },		
-		{ "time": 174 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Scripts/Levels/apeirogon.lua b/_RELEASE/Packs/cube/Scripts/Levels/apeirogon.lua
deleted file mode 100644
index 95bcd8e..0000000
--- a/_RELEASE/Packs/cube/Scripts/Levels/apeirogon.lua
+++ /dev/null
@@ -1,92 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-
--- this function adds a pattern to the timeline based on a key
-function addPattern(mKey)
-		if mKey == 0 then pAltBarrage(math.random(2, 3), 2) 
-	elseif mKey == 1 then pBarrageSpiral(3, 0.6, 1)
-	elseif mKey == 2 then pInverseBarrage(0)
-	elseif mKey == 3 then pTunnel(math.random(1, 3))
-	elseif mKey == 4 then pMirrorWallStrip(1, 0)
-	elseif mKey == 5 then pWallExVortex(0, math.random(1, 2), 1)
-	elseif mKey == 6 then pDMBarrageSpiral(math.random(4, 7), 0.4, 1)
-	elseif mKey == 7 then pRandomBarrage(math.random(2, 5), 2.25)
-	elseif mKey == 8 then pMirrorSpiralDouble(math.random(4, 6), 0)
-	elseif mKey == 9 then pMirrorSpiral(math.random(2, 4), 0)
-	end
-end
-
--- shuffle the keys, and then call them to add all the patterns
--- shuffling is better than randomizing - it guarantees all the patterns will be called
-keys = { 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 7, 8, 9, 9 }
-keys = shuffle(keys)
-index = 0
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(3.05)
-	l_setSpeedInc(0.7)
-	l_setRotationSpeed(0.3)
-	l_setRotationSpeedMax(0.4)
-	l_setRotationSpeedInc(0.04)
-	l_setDelayMult(1.07)
-	l_setDelayInc(0.0)
-	l_setFastSpin(71.0)
-	l_setSides(6)
-	l_setSidesMin(5)
-	l_setSidesMax(7)
-	l_setIncTime(15)
-	l_setMaxInc(2)
-
-	l_setPulseMin(64)
-	l_setPulseMax(84)
-	l_setPulseSpeed(2.0)
-	l_setPulseSpeedR(1.5)
-	l_setPulseDelayMax(9)
-
-	l_setBeatPulseMax(15)
-	l_setBeatPulseDelayMax(21.8)
-
-	enableSwapIfDMGreaterThan(1)
-	disableIncIfDMGreaterThan(1)
-end
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-	addPattern(keys[index])
-	index = index + 1
-	
-	if index - 1 == #keys then
-		index = 1
-	end
-end
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- continuous direction change (even if not on level increment)
-dirChangeTime = 100
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-	dirChangeTime = dirChangeTime - mFrameTime;
-	if dirChangeTime < 0 then
-		-- do not change direction while fast spinning
-		if u_isFastSpinning() == false then
-			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
-			dirChangeTime = 300
-		end
-	end 
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Scripts/Levels/babysteps.lua b/_RELEASE/Packs/cube/Scripts/Levels/babysteps.lua
deleted file mode 100644
index 2ecaf3f..0000000
--- a/_RELEASE/Packs/cube/Scripts/Levels/babysteps.lua
+++ /dev/null
@@ -1,78 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-
--- this function adds a pattern to the timeline based on a key
-function addPattern(mKey)
-	if mKey == 0 then pBarrageSpiral(math.random(1, 2), 1, 1) 
-	elseif mKey == 1 then pInverseBarrage(0)
-	elseif mKey == 2 then pAltBarrage(math.random(1, 3), 2)
-	end
-end
-
--- shuffle the keys, and then call them to add all the patterns
--- shuffling is better than randomizing - it guarantees all the patterns will be called
-keys = { 0, 1, 2 }
-keys = shuffle(keys)
-index = 0
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(1.85)
-	l_setSpeedInc(0.05)
-	l_setRotationSpeed(0.04)
-	l_setRotationSpeedMax(0.4)
-	l_setRotationSpeedInc(0.04)
-	l_setDelayMult(1.0)
-	l_setDelayInc(0.0)
-	l_setFastSpin(0.0)
-	l_setSides(6)
-	l_setSidesMin(6)
-	l_setSidesMax(6)
-	l_setIncTime(15)
-	l_setTutorialMode(true)
-end
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-	m_messageAddImportant("welcome to open hexagon 2", 130)
-	m_messageAddImportant("use left/right to rotate", 130)
-	m_messageAddImportant("avoid the walls!", 130)
-	e_eventStopTimeS(6) e_eventWaitS(6)
-	
-	e_eventStopTimeS(3) e_eventWaitUntilS(12)
-	m_messageAddImportant("great job!", 130)
-	m_messageAddImportant("after a while, things get harder", 130)
-	m_messageAddImportant("get to 45 seconds to win!", 130)
-
-	e_eventWaitUntilS(42)
-	m_messageAddImportant("well done!", 130)
-	m_messageAddImportant("now play some real levels!", 138)
-
-	e_eventWaitUntilS(45)
-	u_eventKill()
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-	addPattern(keys[index])
-	index = index + 1
-	
-	if index - 1 == #keys then
-		index = 1
-	end
-end
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-end	
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Scripts/Levels/commando.lua b/_RELEASE/Packs/cube/Scripts/Levels/commando.lua
deleted file mode 100644
index 33db56a..0000000
--- a/_RELEASE/Packs/cube/Scripts/Levels/commando.lua
+++ /dev/null
@@ -1,71 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-            
-extra = 0
-level = 1
-incrementTime = 5
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()	
-	m_messageAddImportant("level: "..(extra + 1).." / time: "..incrementTime, 170)
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-	rWallEx(getRandomSide(), extra)
-	t_wait(getPerfectDelayDM(THICKNESS) * 6)
-end
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(2.25)
-	l_setSpeedInc(0.0)
-	l_setRotationSpeed(0.0)
-	l_setRotationSpeedMax(0.0)
-	l_setRotationSpeedInc(0.0)
-	l_setDelayMult(1.0)
-	l_setDelayInc(0.0)
-	l_setFastSpin(0.0)
-	l_setSides(4)
-	l_setSidesMin(0)
-	l_setSidesMax(0)
-	l_setIncTime(5)
-
-	l_setPulseMin(75)
-	l_setPulseMax(91)
-	l_setPulseSpeed(2)
-	l_setPulseSpeedR(1)
-	l_setPulseDelayMax(0.7)
-
-	l_setBeatPulseMax(17)
-	l_setBeatPulseDelayMax(23.8)
-	
-	l_addTracked("level", "level")
-	l_enableRndSideChanges(false)
-end
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()	
-	u_playSound("beep.ogg")
-	u_playSound("VeeEndurance_test.ogg")
-	
-	extra = extra + 1
-	level = extra + 1
-	incrementTime = incrementTime + 2
-	
-	l_setSides(l_getSides() + 2)
-	l_setIncTime(incrementTime)
-		
-	m_messageAddImportant("level: "..(extra + 1).." / time: "..incrementTime, 170)
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Scripts/Levels/euclideanpc.lua b/_RELEASE/Packs/cube/Scripts/Levels/euclideanpc.lua
deleted file mode 100644
index 8584081..0000000
--- a/_RELEASE/Packs/cube/Scripts/Levels/euclideanpc.lua
+++ /dev/null
@@ -1,87 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-
--- this function adds a pattern to the timeline based on a key
-function addPattern(mKey)
-		if mKey ==  0 then pAltBarrage(math.random(2, 4), 2) 
-	elseif mKey ==  1 then pMirrorSpiral(math.random(3, 6), 0)
-	elseif mKey ==  2 then pBarrageSpiral(math.random(0, 3), 1, 1)
-	elseif mKey ==  3 then pBarrageSpiral(math.random(0, 2), 1.2, 2)
-	elseif mKey ==  4 then pBarrageSpiral(2, 0.7, 1)
-	elseif mKey ==  5 then pInverseBarrage(0)
-	elseif mKey ==  6 then pTunnel(math.random(1, 3))
-	elseif mKey ==  7 then pMirrorWallStrip(1, 0)
-	elseif mKey ==  8 then pWallExVortex(0, 1, 1)
-	elseif mKey ==  9 then pDMBarrageSpiral(math.random(4, 7), 0.4, 1)
-	elseif mKey == 10 then pRandomBarrage(math.random(2, 4), 2.25)
-	end
-end
-
--- shuffle the keys, and then call them to add all the patterns
--- shuffling is better than randomizing - it guarantees all the patterns will be called
-keys = { 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7, 8, 9, 10, 10, 10 }
-keys = shuffle(keys)
-index = 0
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(2.7)
-	l_setSpeedInc(0.0)
-	l_setRotationSpeed(0.25)
-	l_setRotationSpeedMax(0.4)
-	l_setRotationSpeedInc(0.04)
-	l_setDelayMult(1.0)
-	l_setDelayInc(0.0)
-	l_setFastSpin(85.0)
-	l_setSides(8)
-	l_setSidesMin(8)
-	l_setSidesMax(8)
-	l_setIncTime(15)
-	l_setMaxInc(6)
-
-	l_setPulseMin(60)
-	l_setPulseMax(87)
-	l_setPulseSpeed(1.2)
-	l_setPulseSpeedR(1)
-	l_setPulseDelayMax(12.9)
-
-	l_setBeatPulseMax(17)
-	l_setBeatPulseDelayMax(24.8)
-
-	enableSwapIfDMGreaterThan(1)
-	disableIncIfDMGreaterThan(1)
-end
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-	e_eventWaitS(15)
-	m_messageAdd("whoa!", 120)
-	e_eventWaitS(45)
-	m_messageAddImportant("may the mayhem begin!", 130)
-	s_setPulseInc(0.15)
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-	addPattern(keys[index])
-	index = index + 1
-	
-	if index - 1 == #keys then
-		index = 1
-	end
-end
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-end	
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Scripts/Levels/flatteringshape.lua b/_RELEASE/Packs/cube/Scripts/Levels/flatteringshape.lua
deleted file mode 100644
index 3be03d6..0000000
--- a/_RELEASE/Packs/cube/Scripts/Levels/flatteringshape.lua
+++ /dev/null
@@ -1,79 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-
--- this function adds a pattern to the timeline based on a key
-function addPattern(mKey)
-		if mKey == 0 then pAltBarrage(math.random(2, 4), 2) 
-	elseif mKey == 1 then pMirrorSpiral(math.random(3, 6), 0)
-	elseif mKey == 2 then pBarrageSpiral(math.random(0, 3), 1, 1)
-	elseif mKey == 3 then pBarrageSpiral(math.random(0, 2), 1.2, 2)
-	elseif mKey == 4 then pBarrageSpiral(2, 0.7, 1)
-	elseif mKey == 5 then pInverseBarrage(0)
-	elseif mKey == 6 then pTunnel(math.random(1, 3))
-	elseif mKey == 7 then pMirrorWallStrip(1, 0)
-	end
-end
-
--- shuffle the keys, and then call them to add all the patterns
--- shuffling is better than randomizing - it guarantees all the patterns will be called
-keys = { 0, 0, 1, 1, 2, 2, 3, 4, 5, 5, 6, 7, 7 }
-keys = shuffle(keys)
-index = 0
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(1.74)
-	l_setSpeedInc(0.18)
-	l_setRotationSpeed(0.13)
-	l_setRotationSpeedMax(0.4)
-	l_setRotationSpeedInc(0.04)
-	l_setDelayMult(1.0)
-	l_setDelayInc(-0.03)
-	l_setFastSpin(0.0)
-	l_setSides(6)
-	l_setSidesMin(5)
-	l_setSidesMax(6)
-	l_setIncTime(15)
-	l_setMaxInc(8)
-
-	l_setPulseMin(75)
-	l_setPulseMax(91)
-	l_setPulseSpeed(1.5)
-	l_setPulseSpeedR(0.6)
-	l_setPulseDelayMax(9)
-
-	l_setBeatPulseMax(17)
-	l_setBeatPulseDelayMax(23.8)
-
-	enableSwapIfDMGreaterThan(2)
-	disableIncIfDMGreaterThan(2.5)
-end
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-	addPattern(keys[index])
-	index = index + 1
- 	
-	if index - 1 == #keys then
-		index = 1
-	end
-end
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Scripts/Levels/goldenratio.lua b/_RELEASE/Packs/cube/Scripts/Levels/goldenratio.lua
deleted file mode 100644
index eeb0872..0000000
--- a/_RELEASE/Packs/cube/Scripts/Levels/goldenratio.lua
+++ /dev/null
@@ -1,73 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-
--- this function adds a pattern to the timeline based on a key
-function addPattern(mKey)
-	if mKey == 0 then pBarrageSpiral(math.random(5, 9), 0.41, 1)
-	elseif mKey == 1 then pMirrorSpiralDouble(math.random(8, 10), 0)
-	elseif mKey == 2 then pMirrorSpiral(math.random(2, 5), 0)
-	end
-end
-
--- shuffle the keys, and then call them to add all the patterns
--- shuffling is better than randomizing - it guarantees all the patterns will be called
-keys = { 0, 0, 1, 1, 2 }
-keys = shuffle(keys)
-index = 0
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(1.7)
-	l_setSpeedInc(0.1)
-	l_setRotationSpeed(0.0)
-	l_setRotationSpeedMax(0.4)
-	l_setRotationSpeedInc(0.1)
-	l_setDelayMult(1.0)
-	l_setDelayInc(0.0)
-	l_setFastSpin(50.0)
-	l_setSides(6)
-	l_setSidesMin(5)
-	l_setSidesMax(7)
-	l_setIncTime(10)
-	l_setMaxInc(6)
-
-	l_setPulseMin(60)
-	l_setPulseMax(87)
-	l_setPulseSpeed(1.2)
-	l_setPulseSpeedR(1)
-	l_setPulseDelayMax(12.9)
-
-	l_setBeatPulseMax(17)
-	l_setBeatPulseDelayMax(26.2)
-
-	l_setWallSkewRight(-20)
-end
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()
-	addPattern(keys[index])
-	index = index + 1
-
-	if index - 1 == #keys then
-		index = 1
-	end
-end
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Scripts/Levels/labyrinth.lua b/_RELEASE/Packs/cube/Scripts/Levels/labyrinth.lua
deleted file mode 100644
index cda8f24..0000000
--- a/_RELEASE/Packs/cube/Scripts/Levels/labyrinth.lua
+++ /dev/null
@@ -1,74 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-
-level = 0
-levelTracked = 1
-incrementTime = 3
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()	
-	m_messageAddImportant("level: "..(level + 1).." / time: "..incrementTime, 170)
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()
-	cBarrage(getRandomSide())
-	t_wait(getPerfectDelayDM(THICKNESS) * 6.55)
-end
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(2.25)
-	l_setSpeedInc(0.0)
-	l_setRotationSpeed(0.0)
-	l_setRotationSpeedMax(0.0)
-	l_setRotationSpeedInc(0.0)
-	l_setDelayMult(1.0)
-	l_setDelayInc(0.0)
-	l_setFastSpin(0.0)
-	l_setSides(3)
-	l_setSidesMin(0)
-	l_setSidesMax(0)
-	l_setIncTime(5)
-
-	l_setPulseMin(58)
-	l_setPulseMax(90)
-	l_setPulseSpeed(2.2)
-	l_setPulseSpeedR(0.65)
-	l_setPulseDelayMax(1)
-
-	l_setBeatPulseMax(17)
-	l_setBeatPulseDelayMax(23.8)
-
-	l_setRadiusMin(40)
-	l_addTracked("levelTracked", "level")
-	l_enableRndSideChanges(false)
-
-	enableSwapIfDMGreaterThan(1.5)
-end
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()	
-	u_playSound("beep.ogg")
-	u_playSound("VeeEndurance_test.ogg")
-	
-	level = level + 1
-	levelTracked = level + 1
-	incrementTime = incrementTime + 2
-	
-	l_setSides(l_getSides() + 1)
-	l_setIncTime(incrementTime)
-		
-	m_messageAddImportant("level: "..(level + 1).." / time: "..incrementTime, 170)
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Scripts/Levels/pi.lua b/_RELEASE/Packs/cube/Scripts/Levels/pi.lua
deleted file mode 100644
index d2dc98b..0000000
--- a/_RELEASE/Packs/cube/Scripts/Levels/pi.lua
+++ /dev/null
@@ -1,88 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-
--- this function adds a pattern to the timeline based on a key
-function addPattern(mKey)
-		if mKey == 0 then cWallEx(math.random(0, l_getSides()), math.random(1, 2)) t_wait(getPerfectDelay(THICKNESS) * 2.5)
-	elseif mKey == 1 then pMirrorSpiralDouble(math.random(1, 2), 4)
-	elseif mKey == 2 then rWallEx(math.random(0, l_getSides()), math.random(1, 2)) t_wait(getPerfectDelay(THICKNESS) * 2.8)
-	elseif mKey == 3 then pMirrorWallStrip(1, 2)
-	elseif mKey == 4 then rWallEx(math.random(0, l_getSides()), 1) t_wait(getPerfectDelay(THICKNESS) * 2.3)
-	elseif mKey == 5 then cWallEx(math.random(0, l_getSides()), 7) t_wait(getPerfectDelay(THICKNESS) * 2.7)
-	end
-end
-
--- shuffle the keys, and then call them to add all the patterns
--- shuffling is better than randomizing - it guarantees all the patterns will be called
-keys = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5 }
-keys = shuffle(keys)
-index = 0
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-	addPattern(keys[index])
-	index = index + 1
-	
-	if index - 1 == #keys then
-		index = 1
-	end
-end
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(3.4)
-	l_setSpeedInc(0.10)
-	l_setRotationSpeed(0.25)
-	l_setRotationSpeedMax(0.4)
-	l_setRotationSpeedInc(0.04)
-	l_setDelayMult(1.0)
-	l_setDelayInc(-0.01)
-	l_setFastSpin(80.0)
-	l_setSides(24)
-	l_setSidesMin(20)
-	l_setSidesMax(28)
-	l_setIncTime(15)
-	l_setMaxInc(4)
-
-	l_setPulseMin(68)
-	l_setPulseMax(80)
-	l_setPulseSpeed(3.6)
-	l_setPulseSpeedR(1.4)
-	l_setPulseDelayMax(7)
-
-	l_setBeatPulseMax(15)
-	l_setBeatPulseDelayMax(21.8)
-
-	enableSwapIfDMGreaterThan(1)
-	disableIncIfDMGreaterThan(1.5)
-end
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- continuous direction change (even if not on level increment)
-dirChangeTime = 150
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-	dirChangeTime = dirChangeTime - mFrameTime;
-	if dirChangeTime < 0 then
-		-- do not change direction while fast spinning
-		if u_isFastSpinning() == false then
-			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
-			dirChangeTime = 100
-		end
-	end 
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Scripts/Levels/pointless.lua b/_RELEASE/Packs/cube/Scripts/Levels/pointless.lua
deleted file mode 100644
index d52e76e..0000000
--- a/_RELEASE/Packs/cube/Scripts/Levels/pointless.lua
+++ /dev/null
@@ -1,78 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-
--- this function adds a pattern to the timeline based on a key
-function addPattern(mKey)
-		if mKey == 0 then pAltBarrage(math.random(2, 4), 2) 
-	elseif mKey == 1 then pMirrorSpiral(math.random(2, 5), getHalfSides() - 3)
-	elseif mKey == 2 then pBarrageSpiral(math.random(0, 3), 1, 1)
-	elseif mKey == 3 then pInverseBarrage(0)
-	elseif mKey == 4 then pTunnel(math.random(1, 3))
-	end
-end
-
--- shuffle the keys, and then call them to add all the patterns
--- shuffling is better than randomizing - it guarantees all the patterns will be called
-keys = { 0, 0, 1, 1, 2, 2, 3, 3, 4 }
-keys = shuffle(keys)
-index = 0
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(1.55)
-	l_setSpeedInc(0.125)
-	l_setRotationSpeed(0.07)
-	l_setRotationSpeedMax(0.4)
-	l_setRotationSpeedInc(0.04)
-	l_setDelayMult(1.0)
-	l_setDelayInc(-0.01)
-	l_setFastSpin(0.0)
-	l_setSides(6)
-	l_setSidesMin(5)
-	l_setSidesMax(6)
-	l_setIncTime(15)
-	l_setMaxInc(8)
-
-	l_setPulseMin(75)
-	l_setPulseMax(91)
-	l_setPulseSpeed(1.2)
-	l_setPulseSpeedR(1)
-	l_setPulseDelayMax(23.9)
-
-	l_setBeatPulseMax(17)
-	l_setBeatPulseDelayMax(24.8)
-
-	enableSwapIfDMGreaterThan(2.5)
-	disableIncIfDMGreaterThan(3)
-end
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-	m_messageAdd("tutorials are over", 130)
-	m_messageAdd("good luck getting high scores!", 130)
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-	addPattern(keys[index])
-	index = index + 1
-	
-	if index - 1 == #keys then
-		index = 1
-	end
-end
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Scripts/Levels/seconddimension.lua b/_RELEASE/Packs/cube/Scripts/Levels/seconddimension.lua
deleted file mode 100644
index e6ecf5e..0000000
--- a/_RELEASE/Packs/cube/Scripts/Levels/seconddimension.lua
+++ /dev/null
@@ -1,87 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-
--- this function adds a pattern to the timeline based on a key
-function addPattern(mKey)
-		if mKey ==  0 then pAltBarrage(math.random(2, 4), 2) 
-	elseif mKey ==  1 then pMirrorSpiral(math.random(3, 6), 0)
-	elseif mKey ==  2 then pBarrageSpiral(math.random(0, 3), 1, 1)
-	elseif mKey ==  3 then pBarrageSpiral(math.random(0, 2), 1.2, 2)
-	elseif mKey ==  4 then pBarrageSpiral(2, 0.7, 1)
-	elseif mKey ==  5 then pInverseBarrage(0)
-	elseif mKey ==  6 then pTunnel(math.random(1, 3))
-	elseif mKey ==  7 then pMirrorWallStrip(1, 0)
-	elseif mKey ==  8 then pWallExVortex(0, 1, 1)
-	elseif mKey ==  9 then pDMBarrageSpiral(math.random(4, 7), 0.4, 1)
-	elseif mKey == 10 then pRandomBarrage(math.random(2, 4), 2.25)
-	end
-end
-
--- shuffle the keys, and then call them to add all the patterns
--- shuffling is better than randomizing - it guarantees all the patterns will be called
-keys = { 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7, 8, 9, 10, 10, 10 }
-keys = shuffle(keys)
-index = 0
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(2.65)
-	l_setSpeedInc(0.1)
-	l_setRotationSpeed(0.2)
-	l_setRotationSpeedMax(0.4)
-	l_setRotationSpeedInc(0.05)
-	l_setDelayMult(1.1)
-	l_setDelayInc(-0.01)
-	l_setFastSpin(70.0)
-	l_setSides(6)
-	l_setSidesMin(5)
-	l_setSidesMax(7)
-	l_setIncTime(15)
-	l_setMaxInc(4)
-
-	l_setPulseMin(70)
-	l_setPulseMax(90)
-	l_setPulseSpeed(1.0)
-	l_setPulseSpeedR(0.6)
-	l_setPulseDelayMax(0)
-
-	l_setBeatPulseMax(17)
-	l_setBeatPulseDelayMax(23.8)
-
-	enableSwapIfDMGreaterThan(1.4)
-	disableIncIfDMGreaterThan(1.4)
-end
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-	e_eventWaitS(16)
-	m_messageAdd("whoa!", 120)
-	e_eventWaitS(45)
-	m_messageAddImportant("may the mayhem begin!", 130)
-	s_setPulseInc(0.15)
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-	addPattern(keys[index])
-	index = index + 1
-	
-	if index - 1 == #keys then
-		index = 1
-	end
-end
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-end	
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Scripts/alternativepatterns.lua b/_RELEASE/Packs/cube/Scripts/alternativepatterns.lua
deleted file mode 100644
index 4cb9108..0000000
--- a/_RELEASE/Packs/cube/Scripts/alternativepatterns.lua
+++ /dev/null
@@ -1,119 +0,0 @@
-u_execScript("common.lua")
-
-function pAltMirrorSpiral(mTimes, mExtra)
-	oldThickness = THICKNESS
-	THICKNESS = getPerfectThickness(THICKNESS)
-	delay = getPerfectDelay(THICKNESS)
-	startSide = getRandomSide()
-	loopDir = getRandomDir()	
-	for k = 1, #mTimes do
-		for i = 1, mTimes[k] do
-			rWallEx(startSide, mExtra)
-			if (k % 2) == 0 then
-				startSide = startSide + loopDir
-			else
-				startSide = startSide - loopDir
-			end
-			t_wait(delay)
-		end 
-	end
-
-	THICKNESS = oldThickness
-	
-	t_wait(getPerfectDelay(THICKNESS) * 6.5)
-end
-
-function randomArray(mNumber,mLower,mUpper)
-	a = {}
-	for k = 1, mNumber do
-		a[k] = math.random(mLower,mUpper)
-	end
-	return a
-end
-
-function pAltTunnel(mTimes,mFree)
-	oldThickness = THICKNESS
-	myThickness = getPerfectThickness(THICKNESS)
-	delay = getPerfectDelay(myThickness) * 5
-	startSide = getRandomSide()
-	loopDir = getRandomDir()
-	
-	THICKNESS = myThickness
-	
-	for i = 0, mTimes do
-		if i < mTimes then
-			w_wall(startSide, myThickness + 5 * l_getSpeedMult() * delay)
-		end
-		
-		cBarrageN(startSide + loopDir,mFree)
-		t_wait(delay)
-		
-		loopDir = loopDir * -1
-	end
-	
-	THICKNESS = oldThickness
-end
-
-function cycle(mSides)
-	eArray = {}
-	j = getRandomSide()
-	for i = 1, mSides do 
-		eArray[i] = (i + j) % mSides + 1
-	end
-	return eArray
-end
-
-function pLadder(mTimes,mArray,myThickness)
-
-	delay = getPerfectDelay(myThickness)
-
-	local eArray = {}
-	l = 1
-	s = #mArray/l_getSides()
-	t = math.random(0,100)
-
-	for i = 1, mTimes do
-		q = (i+t) % s + 1
-		for k = 1, l_getSides() do
-			if(mArray[(q-1)*l_getSides() + k] ~= 0) then
-				eArray[l] = 1
-			else
-				eArray[l] = 0
-			end
-			l = l + 1
-		end
-		
-		if i ~= mTimes then
-			for j = 1, 3 do
-				for k = 1,l_getSides() do
-					if(mArray[(q-1)*l_getSides() + k] == 2) then
-						eArray[l] = 1
-					else
-						eArray[l] = 0
-					end
-					l = l + 1
-				end
-			end
-		end
-	end
-
-	patternizer(eArray,myThickness)
-	t_wait(delay*2)
-	
-end
-
-function patternizer(mArray,myThickness)
-	delay = getPerfectDelay(myThickness)
-	eArray = cycle(l_getSides())
-
-	j = math.floor((#mArray) / l_getSides())
-	
-	for i = 1, j do
-		for k = 1, l_getSides() do
-			if mArray[(i - 1)*l_getSides() + k] == 1 then
-				w_wall(eArray[k], myThickness)
-			end
-		end
-		t_wait(delay)
-	end
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Scripts/common.lua b/_RELEASE/Packs/cube/Scripts/common.lua
deleted file mode 100644
index 975a00d..0000000
--- a/_RELEASE/Packs/cube/Scripts/common.lua
+++ /dev/null
@@ -1,114 +0,0 @@
--- common variables
-THICKNESS = 40.0;
-
-function enableSwapIfDMGreaterThan(mDM)
-	if(u_getDifficultyMult() > mDM) then
-		m_messageAdd(" difficulty > " ..mDM.. "\nswap enabled!", 65)
-		l_setSwapEnabled(true)
-	end	
-end
-
-function disableIncIfDMGreaterThan(mDM)
-	if(u_getDifficultyMult() > mDM) then
-		m_messageAdd(" difficulty > " ..mDM.. "\nincrement disabled!", 65)
-		l_setIncEnabled(false)
-	end	
-end
-
--- getHalfSides: returns half the number of sides (integer)
-function getHalfSides() return math.ceil(l_getSides() / 2) end
-
--- getRandomSide: returns random mSide
-function getRandomSide() return math.random(0, l_getSides() - 1) end
-
--- getRandomDir: returns either 1 or -1
-function getRandomDir()
-	if math.random(0, 100) > 50 then return 1 end
-	return -1
-end
-
--- getPerfectDelay: returns time to wait for two walls to be next to each other
-function getPerfectDelay(mThickness) return mThickness / (5.02 * u_getSpeedMultDM()) * u_getDelayMultDM() end
-
--- getPerfectDelayDM: returns getPerfectDelay calculated with difficulty mutliplier
-function getPerfectDelayDM(mThickness) return mThickness / (5.02 * u_getSpeedMultDM()) * u_getDelayMultDM() end
-
--- getPerfectThickness: returns a good THICKNESS value in relation to human reflexes
-function getPerfectThickness(mThickness) return mThickness * u_getSpeedMultDM() end
-
--- getSideDistance: returns shortest distance from a side to another
-function getSideDistance(mSide1, mSide2)
-	start = mSide1	
-	rightSteps = 0
-	while start ~= mSide2 do
-		rightSteps = rightSteps + 1
-		start = start + 1
-		if start > l_getSides() - 1 then start = 0 end
-	end
-	
-	start = mSide1	
-	leftSteps = 0
-	while start ~= mSide2 do
-		leftSteps = leftSteps + 1
-		start = start - 1
-		if start < 0 then start = l_getSides() - 1 end
-	end
-	
-	if rightSteps < leftSteps then return rightSteps end
-	return leftSteps
-end
-
--- cWall: creates a wall with the common THICKNESS
-function cWall(mSide) w_wall(mSide, THICKNESS) end
-
--- oWall: creates a wall opposite to the mSide passed
-function oWall(mSide) cWall(mSide + getHalfSides()) end
-
--- rWall: union of cwall and owall (created 2 walls facing each other)
-function rWall(mSide)
-	cWall(mSide)
-	oWall(mSide)
-end
-
--- cWallEx: creates a wall with mExtra walls attached to it 
-function cWallEx(mSide, mExtra)
-	cWall(mSide);
-	loopDir = 1;
-	
-	if mExtra < 0 then loopDir = -1 end
-	for i = 0, mExtra, loopDir do cWall(mSide + i) end
-end
-
--- oWallEx: creates a wall with mExtra walls opposite to mSide
-function oWallEx(mSide, mExtra)
-	cWallEx(mSide + getHalfSides(), mExtra)
-end
-
--- rWallEx: union of cwallex and owallex
-function rWallEx(mSide, mExtra)
-	cWallEx(mSide, mExtra)
-	oWallEx(mSide, mExtra)
-end
-
--- cBarrageN: spawns a barrage of walls, with a free mSide plus mNeighbors
-function cBarrageN(mSide, mNeighbors)
-	for i = mNeighbors, l_getSides() - 2 - mNeighbors, 1 do
-		cWall(mSide + i + 1)
-	end
-end
-
--- cBarrage: spawns a barrage of walls, with a single free mSide
-function cBarrage(mSide) cBarrageN(mSide, 0) end
-
--- cBarrageOnlyN: spawns a barrage of wall, with only free mNeighbors
-function cBarrageOnlyN(mSide, mNeighbors)
-	cWall(mSide)
-	cBarrageN(mSide, mNeighbors)
-end
-
--- cAltBarrage: spawns a barrage of alternate walls
-function cAltBarrage(mSide, mStep)
-	for i = 0, l_getSides() / mStep, 1 do
-		cWall(mSide + i * mStep)
-	end
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Scripts/commonpatterns.lua b/_RELEASE/Packs/cube/Scripts/commonpatterns.lua
deleted file mode 100644
index 0041013..0000000
--- a/_RELEASE/Packs/cube/Scripts/commonpatterns.lua
+++ /dev/null
@@ -1,196 +0,0 @@
-u_execScript("common.lua")
-
--- pAltBarrage: spawns a series of cAltBarrage
-function pAltBarrage(mTimes, mStep)
-	delay = getPerfectDelayDM(THICKNESS) * 5.6
-	
-	for i = 0, mTimes do
-		cAltBarrage(i, mStep)
-		t_wait(delay)
-	end
-	
-	t_wait(delay)
-end
-
--- pMirrorSpiral: spawns a spiral of rWallEx
-function pMirrorSpiral(mTimes, mExtra)
-	oldThickness = THICKNESS
-	THICKNESS = getPerfectThickness(THICKNESS)
-	delay = getPerfectDelay(THICKNESS)
-	startSide = getRandomSide()
-	loopDir = getRandomDir()	
-	j = 0
-	
-	for i = 0, mTimes do
-		rWallEx(startSide + j, mExtra)
-		j = j + loopDir
-		t_wait(delay)
-	end
-	
-	THICKNESS = oldThickness
-	
-	t_wait(getPerfectDelayDM(THICKNESS) * 6.5)
-end
-
--- pMirrorSpiralDouble: spawns a spiral of rWallEx where you need to change direction
-function pMirrorSpiralDouble(mTimes, mExtra)
-	oldThickness = THICKNESS
-	THICKNESS = getPerfectThickness(THICKNESS)
-	delay = getPerfectDelayDM(THICKNESS)
-	startSide = getRandomSide()
-	currentSide = startSide
-	loopDir = getRandomDir()	
-	j = 0
-	
-	for i = 0, mTimes do
-		rWallEx(startSide + j, mExtra)
-		j = j + loopDir
-		t_wait(delay)
-	end
-	
-	rWallEx(startSide + j, mExtra)
-	t_wait(delay * 0.9)
-	
-	rWallEx(startSide + j, mExtra)
-	t_wait(delay * 0.9)
-	
-	loopDir = loopDir * -1
-	
-	for i = 0, mTimes + 1 do
-		currentSide = currentSide + loopDir;
-		rWallEx(currentSide + j - 1, mExtra)
-		j = j + loopDir
-		t_wait(delay)
-	end
-	
-	THICKNESS = oldThickness
-	t_wait(getPerfectDelayDM(THICKNESS) * 7.5)
-end
-
--- pBarrageSpiral: spawns a spiral of cBarrage
-function pBarrageSpiral(mTimes, mDelayMult, mStep)
-	delay = getPerfectDelayDM(THICKNESS) * 5.6 * mDelayMult
-	startSide = getRandomSide()
-	loopDir = mStep * getRandomDir()	
-	j = 0
-	
-	for i = 0, mTimes do
-		cBarrage(startSide + j)
-		j = j + loopDir
-		t_wait(delay)
-		if(l_getSides() < 6) then t_wait(delay * 0.6) end
-	end
-	
-	t_wait(getPerfectDelayDM(THICKNESS) * 6.1)
-end
-
--- pDMBarrageSpiral: spawns a spiral of cBarrage, with static delay
-function pDMBarrageSpiral(mTimes, mDelayMult, mStep)
-	delay = (getPerfectDelayDM(THICKNESS) * 5.42) * (mDelayMult / (u_getDifficultyMult() ^ 0.4)) * (u_getSpeedMultDM() ^ 0.35)
-	startSide = getRandomSide()
-	loopDir = mStep * getRandomDir()	
-	j = 0
-	
-	for i = 0, mTimes do
-		cBarrage(startSide + j)
-		j = j + loopDir
-		t_wait(delay)
-		if(l_getSides() < 6) then t_wait(delay * 0.49) end
-	end
-	
-	t_wait(getPerfectDelayDM(THICKNESS) * (6.7 * (u_getDifficultyMult() ^ 0.7)))
-end
-
--- pWallExVortex: spawns left-left right-right spiral patters
-function pWallExVortex(mTimes, mStep, mExtraMult)
-	delay = getPerfectDelayDM(THICKNESS) * 5.0 
-	startSide = getRandomSide()
-	loopDir = getRandomDir()
-	currentSide = startSide
-	
-	for j = 0, mTimes do
-		for i = 0, mStep do
-			currentSide = currentSide + loopDir
-			rWallEx(currentSide, loopDir * mExtraMult)
-			t_wait(delay)
-		end
-		
-		loopDir = loopDir * -1
-		
-		for i = 0, mStep + 1 do
-			currentSide = currentSide + loopDir;
-			rWallEx(currentSide, loopDir * mExtraMult)
-			t_wait(delay)
-		end
-	end
-	
-	t_wait(getPerfectDelayDM(THICKNESS) * 5.5)
-end
-
--- pInverseBarrage: spawns two barrages who force you to turn 180 degrees
-function pInverseBarrage(mTimes)
-	delay = getPerfectDelayDM(THICKNESS) * 9.9
-	startSide = getRandomSide()
-	
-	for i = 0, mTimes do
-		cBarrage(startSide)
-		t_wait(delay)
-		if(l_getSides() < 6) then t_wait(delay * 0.8) end
-		cBarrage(startSide + getHalfSides())
-		t_wait(delay)
-	end
-	
-	t_wait(getPerfectDelayDM(THICKNESS) * 2.5)
-end
-
--- pRandomBarrage: spawns barrages with random side, and waits humanly-possible times depending on the sides distance
-function pRandomBarrage(mTimes, mDelayMult)
-	side = getRandomSide()
-	oldSide = 0
-	
-	for i = 0, mTimes do	
-		cBarrage(side)
-		oldSide = side
-		side = getRandomSide()
-		t_wait(getPerfectDelayDM(THICKNESS) * (2 + (getSideDistance(side, oldSide)*mDelayMult)))
-	end
-	
-	t_wait(getPerfectDelayDM(THICKNESS) * 5.6)
-end
-
--- pMirrorWallStrip: spawns rWalls close to one another on the same side
-function pMirrorWallStrip(mTimes, mExtra)
-	delay = getPerfectDelayDM(THICKNESS) * 3.65
-	startSide = getRandomSide()
-	
-	for i = 0, mTimes do
-		rWallEx(startSide, mExtra)
-		t_wait(delay)
-	end
-	
-	t_wait(getPerfectDelayDM(THICKNESS) * 5.00)
-end
-
--- pTunnel: forces you to circle around a very thick wall
-function pTunnel(mTimes)
-	oldThickness = THICKNESS
-	myThickness = getPerfectThickness(THICKNESS)
-	delay = getPerfectDelay(myThickness) * 5
-	startSide = getRandomSide()
-	loopDir = getRandomDir()
-	
-	THICKNESS = myThickness
-	
-	for i = 0, mTimes do
-		if i < mTimes then
-			w_wall(startSide, myThickness + 5 * u_getSpeedMultDM() * delay)
-		end
-		
-		cBarrage(startSide + loopDir)
-		t_wait(delay)
-		
-		loopDir = loopDir * -1
-	end
-	
-	THICKNESS = oldThickness
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Scripts/utils.lua b/_RELEASE/Packs/cube/Scripts/utils.lua
deleted file mode 100644
index 300f63c..0000000
--- a/_RELEASE/Packs/cube/Scripts/utils.lua
+++ /dev/null
@@ -1,28 +0,0 @@
--- initialize random seed
-math.randomseed(os.time())
-math.random()
-math.random()
-math.random()
-
--- shuffle: shuffles an array
-function shuffle(t)
-	math.randomseed(os.time())
-	local iterations = #t
-	local j
-	for i = iterations, 2, -1 do
-			j = math.random(i)
-			t[i], t[j] = t[j], t[i]
-	end
-	
-	return t
-end
-
--- clamp: clamps a number between two values
-function clamp(input, min_val, max_val)
-	if input < min_val then
-		input = min_val
-	elseif input > max_val then
-		input = max_val
-	end
-	return input
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Styles/apeirogon.json b/_RELEASE/Packs/cube/Styles/apeirogon.json
deleted file mode 100644
index 3436509..0000000
--- a/_RELEASE/Packs/cube/Styles/apeirogon.json
+++ /dev/null
@@ -1,30 +0,0 @@
-{
-	// Style data id
-	"id": "apeirogon",
-
-	// Hue options
-	"hue_min": 149,
-	"hue_max": 360,
-	"hue_ping_pong": false,
-	"hue_increment": 1.0,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 1.8,
-	"pulse_increment": 0.027,
-
-	// 3D options
-	"3D_depth": 8,
-	"3D_skew": 0.15,
-	"3D_spacing": 1.5,
-	
-	// Main color
-	"main": { "main": true, "dynamic": false, "value": [253, 253, 253, 255], "pulse": [0, 0, 0, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [90, 90, 90, 255], "pulse": [75, 15, 15, 0]},
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [60, 60, 60, 255], "pulse": [0, 0, 0, 0]}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Styles/babysteps.json b/_RELEASE/Packs/cube/Styles/babysteps.json
deleted file mode 100644
index d296881..0000000
--- a/_RELEASE/Packs/cube/Styles/babysteps.json
+++ /dev/null
@@ -1,34 +0,0 @@
-{
-	// Style data id
-	"id": "babysteps",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 360,
-	"hue_ping_pong": false,
-	"hue_increment": 1.0,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 1.5,
-	"pulse_increment": 0.025,
-
-	// 3D options
-	"3D_depth": 4,
-	"3D_skew": 0.15,
-	"3D_spacing": 2.5,
-	"3D_darken_multiplier": 1.1,
-	"3D_alpha_multiplier": 0.4,
-	"3D_alpha_falloff": 15.0,
-	"3D_override_color": [85, 95, 155, 255],
-	
-	// Main color
-	"main": { "main": true, "dynamic": false, "value": [0, 0, 0, 255], "pulse": [0, 0, 0, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [240, 240, 240, 255], "pulse": [0, 0, 0, 0]},
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [200, 200, 200, 255], "pulse": [0, 0, 25, 0]}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Styles/commando.json b/_RELEASE/Packs/cube/Styles/commando.json
deleted file mode 100644
index 187ff16..0000000
--- a/_RELEASE/Packs/cube/Styles/commando.json
+++ /dev/null
@@ -1,36 +0,0 @@
-{
-	// Style data id
-	"id": "commando",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 255,
-	"hue_ping_pong": false,
-	"hue_increment": 1.0,
-	
-	// Pulse options
-	"pulse_min": -1.5,
-	"pulse_max": 1.5,
-	"pulse_increment": 0.025,
-	
-	// 3D options
-	"3D_depth": 7,
-	"3D_skew": 0.20,
-	"3D_spacing": 1.3,
-	"3D_darken_multiplier": 1.6,
-	"3D_alpha_multiplier": 1,
-	"3D_alpha_falloff": 0.1,
-	"3D_override_color": [125, 185, 125, 255],
-
-	// Main color
-	"main": { "main": true, "dynamic": false, "value": [28, 20, 13, 225], "pulse": [0, 0, 0, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [242, 233, 225, 255], "pulse": [0, 0, 0, 0] },
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [203, 232, 107, 255], "pulse": [-70, 0, 0, 0] },
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [255, 255, 255, 255], "pulse": [0, 0, 0, 0] },
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [203, 232, 107, 255], "pulse": [-70, 0, 0, 0] }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Styles/dangertest.json b/_RELEASE/Packs/cube/Styles/dangertest.json
deleted file mode 100644
index b9a92c9..0000000
--- a/_RELEASE/Packs/cube/Styles/dangertest.json
+++ /dev/null
@@ -1,34 +0,0 @@
-{
-	// Style data id
-	"id": "dangertest",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 360,
-	"hue_ping_pong": false,
-	"hue_increment": 1.0,
-
-	// 3D options
-	"3D_depth": 5,
-	"3D_skew": 0.15,
-	"3D_spacing": 1.5,
-	"3D_darken_multiplier": 1.5,
-	"3D_alpha_multiplier": 0.5,
-	"3D_alpha_falloff": 15.0,
-	"3D_override_color": [45, 45, 45, 255],
-
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 1.5,
-	"pulse_increment": 0.025,
-	
-	// Main color
-	"main": { "main": true, "dynamic": false, "value": [253, 253, 253, 255], "pulse": [0, 0, 0, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [73, 73, 0, 255], "pulse": [0, 0, 0, 0]},
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [11, 11, 11, 255], "pulse": [0, 0, 0, 0]}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Styles/euclideanpc.json b/_RELEASE/Packs/cube/Styles/euclideanpc.json
deleted file mode 100644
index 6c1447f..0000000
--- a/_RELEASE/Packs/cube/Styles/euclideanpc.json
+++ /dev/null
@@ -1,34 +0,0 @@
-{
-	// Style data id
-	"id": "euclideanpc",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 360,
-	"hue_ping_pong": false,
-	"hue_increment": 1.0,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 1.5,
-	"pulse_increment": 0.025,
-
-	// 3D options
-	"3D_depth": 12,
-	"3D_skew": 0.15,
-	"3D_spacing": 2.1,
-	"3D_darken_multiplier": 1.1,
-	"3D_alpha_multiplier": 0.4,
-	"3D_alpha_falloff": 1.0,
-	"3D_override_color": [166, 166, 166, 255],
-	
-	// Main color
-	"main": { "main": true, "dynamic": false, "value": [253, 253, 253, 255], "pulse": [0, 0, 0, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [73, 73, 0, 255], "pulse": [0, 0, 0, 0]},
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [11, 11, 11, 255], "pulse": [0, 0, 0, 0]}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Styles/flatteringshape.json b/_RELEASE/Packs/cube/Styles/flatteringshape.json
deleted file mode 100644
index cf8b59a..0000000
--- a/_RELEASE/Packs/cube/Styles/flatteringshape.json
+++ /dev/null
@@ -1,30 +0,0 @@
-{
-	// Style data id
-	"id": "flatteringshape",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 160,
-	"hue_ping_pong": true,
-	"hue_increment": 0.7,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 2.0,
-	"pulse_increment": 0.025,
-
-	// 3D options
-	"3D_depth": 7,
-	"3D_skew": 0.15,
-	"3D_spacing": 1.2,
-	
-	// Main color
-	"main": { "main": true, "dynamic": true, "value": [255, 0, 0, 255], "pulse": [0, 50, 0, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 2.7, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]},
-		{ "dynamic": false, "dynamic_offset": true, "dynamic_darkness": 2.5, "value": [45, 60, 45, 255], "pulse": [25, 25, 25, 0], "offset": 5.0}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Styles/goldenratio.json b/_RELEASE/Packs/cube/Styles/goldenratio.json
deleted file mode 100644
index 6e9a34b..0000000
--- a/_RELEASE/Packs/cube/Styles/goldenratio.json
+++ /dev/null
@@ -1,34 +0,0 @@
-{
-	// Style data id
-	"id": "goldenratio",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 255,
-	"hue_ping_pong": false,
-	"hue_increment": 1.0,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 1.5,
-	"pulse_increment": 0.025,
-
-	// 3D options
-	"3D_depth": 8,
-	"3D_skew": 0.15,
-	"3D_spacing": 1.5,
-	
-	// Main color
-	"main": { "main": true, "dynamic": false, "value": [0, 0, 0, 225], "pulse": [25, 50, 75, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 25.0},
-		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 50.0},
-		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 75.0},
-		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 100.0},
-		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 125.0},
-		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 150.0}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Styles/labyrinth.json b/_RELEASE/Packs/cube/Styles/labyrinth.json
deleted file mode 100644
index b4d6c9c..0000000
--- a/_RELEASE/Packs/cube/Styles/labyrinth.json
+++ /dev/null
@@ -1,33 +0,0 @@
-{
-	// Style data id
-	"id": "labyrinth",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 255,
-	"hue_ping_pong": false,
-	"hue_increment": 1.0,
-	
-	// Pulse options
-	"pulse_min": -1.9,
-	"pulse_max": 1.5,
-	"pulse_increment": 0.025,
-
-	// 3D options
-	"3D_depth": 4,
-	"3D_skew": 0.20,
-	"3D_spacing": 2.6,
-
-	
-	// Main color
-	"main": { "main": true, "dynamic": false, "value": [255, 255, 255, 225], "pulse": [0, 0, 0, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [12, 24, 30, 255], 	"pulse": [0, 0, 0, 0] },
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [73, 31, 92, 255], 	"pulse": [0, 0, -30, 0] },
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [25, 25, 25, 255], 	"pulse": [0, 0, 0, 0] },
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [73, 31, 92, 255], 	"pulse": [0, 0, -30, 0] }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Styles/pi.json b/_RELEASE/Packs/cube/Styles/pi.json
deleted file mode 100644
index f9b6484..0000000
--- a/_RELEASE/Packs/cube/Styles/pi.json
+++ /dev/null
@@ -1,34 +0,0 @@
-{
-	// Style data id
-	"id": "pi",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 255,
-	"hue_ping_pong": false,
-	"hue_increment": 1.0,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 1.5,
-	"pulse_increment": 0.025,
-
-	// 3D options
-	"3D_depth": 4,
-	"3D_skew": 0.15,
-	"3D_spacing": 4.5,
-	
-	// Main color
-	"main": { "main": true, "dynamic": false, "value": [0, 0, 0, 225], "pulse": [99, 30, 165, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 74, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 25.0},
-		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 50.0},
-		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 115, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 75.0},
-		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 98, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 100.0},
-		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [250, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 125.0},
-		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [163, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 150.0}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Styles/pointless.json b/_RELEASE/Packs/cube/Styles/pointless.json
deleted file mode 100644
index 2c535b7..0000000
--- a/_RELEASE/Packs/cube/Styles/pointless.json
+++ /dev/null
@@ -1,30 +0,0 @@
-{
-	// Style data id
-	"id": "pointless",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 360,
-	"hue_ping_pong": false,
-	"hue_increment": 0.7,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 1.5,
-	"pulse_increment": 0.025,
-
-	// 3D options
-	"3D_depth": 8,
-	"3D_skew": 0.15,
-	"3D_spacing": 1.5,
-	
-	// Main color
-	"main": { "main": true, "dynamic": true, "value": [255, 0, 0, 255], "pulse": [-80, 75, 65, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 2.7, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]},
-		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 3.5, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/Styles/seconddimension.json b/_RELEASE/Packs/cube/Styles/seconddimension.json
deleted file mode 100644
index 6a689d0..0000000
--- a/_RELEASE/Packs/cube/Styles/seconddimension.json
+++ /dev/null
@@ -1,34 +0,0 @@
-{
-	// Style data id
-	"id": "seconddimension",
-
-	// Hue options
-	"hue_min": 200,
-	"hue_max": 340,
-	"hue_ping_pong": true,
-	"hue_increment": 1.0,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 1.5,
-	"pulse_increment": 0.025,
-
-	// 3D options
-	"3D_depth": 7,
-	"3D_skew": 0.15,
-	"3D_spacing": 1.5,
-	"3D_darken_multiplier": 1.5,
-	"3D_alpha_multiplier": 0.5,
-	"3D_alpha_falloff": 19.0,
-	"3D_override_color": [45, 45, 45, 255],
-	
-	// Main color
-	"main": { "main": true, "dynamic": true, "value": [0, 0, 0, 255], "pulse": [0, 0, 0, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [15, 15, 15, 0], "offset": 4.7},
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [235, 235, 235, 255], "pulse": [0, 0, 0, 0]}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/cube/pack.json b/_RELEASE/Packs/cube/pack.json
deleted file mode 100644
index b7eefc9..0000000
--- a/_RELEASE/Packs/cube/pack.json
+++ /dev/null
@@ -1,4 +0,0 @@
-{
-	"name": "cube",
-	"priority": -1000
-} 
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Levels/acceleradiant.json b/_RELEASE/Packs/hypercube/Levels/acceleradiant.json
deleted file mode 100644
index 71955ab..0000000
--- a/_RELEASE/Packs/hypercube/Levels/acceleradiant.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "acceleradiant",
-	"name": "acceleradiant",
-	"description": "dunno lol",
-	"author": "vittorio romeo",	
-	"menuPriority": 20,
-	"selectable": true,
-	"styleId": "acceleradiant",
-	"musicId": "mrGawne",
-	"luaFile": "Scripts/Levels/acceleradiant.lua",
-	"difficultyMults": [0.85, 1.25, 1.4, 1.8]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Levels/centrifugal.json b/_RELEASE/Packs/hypercube/Levels/centrifugal.json
deleted file mode 100644
index a08075d..0000000
--- a/_RELEASE/Packs/hypercube/Levels/centrifugal.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "centrifugal",
-	"name": "centrifugal force",
-	"description": "insert cool description here",
-	"author": "vittorio romeo",	
-	"menuPriority": 71,
-	"selectable": true,
-	"styleId": "centrifugal",
-	"musicId": "tengil",
-	"luaFile": "Scripts/Levels/centrifugal.lua",
-	"difficultyMults": [1.2, 1.4, 1.6, 0.6, 0.3]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Levels/disc-o.json b/_RELEASE/Packs/hypercube/Levels/disc-o.json
deleted file mode 100644
index 6476a0e..0000000
--- a/_RELEASE/Packs/hypercube/Levels/disc-o.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "disc-o",
-	"name": "disc-o",
-	"description": "dance!",
-	"author": "vittorio romeo",	
-	"menuPriority": 10,
-	"selectable": true,
-	"styleId": "disc-o",
-	"musicId": "dischipo",
-	"luaFile": "Scripts/Levels/disc-o.lua",
-	"difficultyMults": [1.6, 2.2, 2.8, 0.6, 0.4]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Levels/evotutorial.json b/_RELEASE/Packs/hypercube/Levels/evotutorial.json
deleted file mode 100644
index b0f3da7..0000000
--- a/_RELEASE/Packs/hypercube/Levels/evotutorial.json
+++ /dev/null
@@ -1,11 +0,0 @@
-{
-	"id": "evotutorial",
-	"name": "evotutorial",
-	"description": "learn new game mechanics here!",
-	"author": "vittorio romeo",	
-	"menuPriority": 0,
-	"selectable": true,
-	"styleId": "evotutorial",
-	"musicId": "gmoomh",
-	"luaFile": "Scripts/Levels/evotutorial.lua"
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Levels/g-force.json b/_RELEASE/Packs/hypercube/Levels/g-force.json
deleted file mode 100644
index cd8afea..0000000
--- a/_RELEASE/Packs/hypercube/Levels/g-force.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "g-force",
-	"name": "g-force",
-	"description": "beware the acceleration",
-	"author": "vittorio romeo",	
-	"menuPriority": 30,
-	"selectable": true,
-	"styleId": "g-force",
-	"musicId": "cpumood",
-	"luaFile": "Scripts/Levels/g-force.lua",
-	"difficultyMults": [1.6, 2.2, 2.8, 0.4, 0.6]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Levels/incongruence.json b/_RELEASE/Packs/hypercube/Levels/incongruence.json
deleted file mode 100644
index d3cb401..0000000
--- a/_RELEASE/Packs/hypercube/Levels/incongruence.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "incongruence",
-	"name": "incongruence",
-	"description": "choose your side...",
-	"author": "vittorio romeo",	
-	"menuPriority": 40,
-	"selectable": true,
-	"styleId": "incongruence",
-	"musicId": "flirtFlirt",
-	"luaFile": "Scripts/Levels/incongruence.lua",
-	"difficultyMults": [0.75, 1.25, 1.5, 1.8]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Levels/massacre.json b/_RELEASE/Packs/hypercube/Levels/massacre.json
deleted file mode 100644
index 659747a..0000000
--- a/_RELEASE/Packs/hypercube/Levels/massacre.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "massacre",
-	"name": "massacre",
-	"description": "you >will< die",
-	"author": "vittorio romeo",	
-	"menuPriority": 80,
-	"selectable": true,
-	"styleId": "massacre",
-	"musicId": "massacrev2",
-	"luaFile": "Scripts/Levels/massacre.lua",
-	"difficultyMults": [1.3, 1.6, 0.3, 0.6]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Levels/polyhedrug.json b/_RELEASE/Packs/hypercube/Levels/polyhedrug.json
deleted file mode 100644
index e401541..0000000
--- a/_RELEASE/Packs/hypercube/Levels/polyhedrug.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "polyhedrug",
-	"name": "polyhedrug",
-	"description": "ready to experience something different?",
-	"author": "vittorio romeo",	
-	"menuPriority": 60,
-	"selectable": true,
-	"styleId": "polyhedrug",
-	"musicId": "johnnyDerp",
-	"luaFile": "Scripts/Levels/polyhedrug.lua",
-	"difficultyMults": [0.75, 1.25, 1.5, 1.8]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Levels/reppaws.json b/_RELEASE/Packs/hypercube/Levels/reppaws.json
deleted file mode 100644
index e17e9ce..0000000
--- a/_RELEASE/Packs/hypercube/Levels/reppaws.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "reppaws",
-	"name": "reppaws",
-	"description": "180 degrees of awesomeness",
-	"author": "vittorio romeo",	
-	"menuPriority": 70,
-	"selectable": true,
-	"styleId": "reppaws",
-	"musicId": "minimal",
-	"luaFile": "Scripts/Levels/reppaws.lua",
-	"difficultyMults": [1.2, 1.4, 1.6, 0.6, 0.3]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Levels/slither.json b/_RELEASE/Packs/hypercube/Levels/slither.json
deleted file mode 100644
index a544e7b..0000000
--- a/_RELEASE/Packs/hypercube/Levels/slither.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-	"id": "slither",
-	"name": "slither",
-	"description": "sssssss",
-	"author": "vittorio romeo",	
-	"menuPriority": 50,
-	"selectable": true,
-	"styleId": "slither",
-	"musicId": "pep",
-	"luaFile": "Scripts/Levels/slither.lua",
-	"difficultyMults": [0.5, 2, 3]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Music/cpumood.json b/_RELEASE/Packs/hypercube/Music/cpumood.json
deleted file mode 100644
index 1c926ff..0000000
--- a/_RELEASE/Packs/hypercube/Music/cpumood.json
+++ /dev/null
@@ -1,20 +0,0 @@
-{
-	// Music data id
-	"id": "cpumood",
-
-	// Music file
-	"file_name": "cpumood.ogg",
-
-	// Music information
-	"name": "CPU Mood",
-	"album": "",
-	"author": "Fantomenk",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 9 },
-		{ "time": 100 },
-		{ "time": 204 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Music/dischipo.json b/_RELEASE/Packs/hypercube/Music/dischipo.json
deleted file mode 100644
index ffed198..0000000
--- a/_RELEASE/Packs/hypercube/Music/dischipo.json
+++ /dev/null
@@ -1,20 +0,0 @@
-{
-	// Music data id
-	"id": "dischipo",
-
-	// Music file
-	"file_name": "gmoomh.ogg",
-
-	// Music information
-	"name": "Dischipo",
-	"album": "",
-	"author": "Fantomenk",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 15 },
-		{ "time": 54 },
-		{ "time": 127 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Music/flirtFlirt.json b/_RELEASE/Packs/hypercube/Music/flirtFlirt.json
deleted file mode 100644
index 04bc11c..0000000
--- a/_RELEASE/Packs/hypercube/Music/flirtFlirt.json
+++ /dev/null
@@ -1,21 +0,0 @@
-{
-	// Music data id
-	"id": "flirtFlirt",
-
-	// Music file
-	"file_name": "flirtFlirt.ogg",
-
-	// Music information
-	"name": "Flirt Flirt Oh It Hurts",
-	"album": "Caps On, Hats Off",
-	"author": "BOSSFIGHT",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 17 },
-		{ "time": 39 },
-		{ "time": 86 },
-		{ "time": 165 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Music/gmoomh.json b/_RELEASE/Packs/hypercube/Music/gmoomh.json
deleted file mode 100644
index 81350f2..0000000
--- a/_RELEASE/Packs/hypercube/Music/gmoomh.json
+++ /dev/null
@@ -1,20 +0,0 @@
-{
-	// Music data id
-	"id": "gmoomh",
-
-	// Music file
-	"file_name": "gmoomh.ogg",
-
-	// Music information
-	"name": "Getting melodies out of my head",
-	"album": "",
-	"author": "Fantomenk",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 2 },
-		{ "time": 65 },
-		{ "time": 123 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Music/johnnyDerp.json b/_RELEASE/Packs/hypercube/Music/johnnyDerp.json
deleted file mode 100644
index c2bc30f..0000000
--- a/_RELEASE/Packs/hypercube/Music/johnnyDerp.json
+++ /dev/null
@@ -1,20 +0,0 @@
-{
-	// Music data id
-	"id": "johnnyDerp",
-
-	// Music file
-	"file_name": "johnnyDerp.ogg",
-
-	// Music information
-	"name": "Johnny Derp",
-	"album": "",
-	"author": "Dunderpatrullen VS. BOSSFIGHT",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 7 },
-		{ "time": 46 },
-		{ "time": 145 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Music/massacrev2.json b/_RELEASE/Packs/hypercube/Music/massacrev2.json
deleted file mode 100644
index 178acfc..0000000
--- a/_RELEASE/Packs/hypercube/Music/massacrev2.json
+++ /dev/null
@@ -1,20 +0,0 @@
-{
-	// Music data id
-	"id": "massacrev2",
-
-	// Music file
-	"file_name": "massacrev2.ogg",
-
-	// Music information
-	"name": "Massacre (version 2)",
-	"album": "",
-	"author": "Fantomenk",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 15 },
-		{ "time": 83 },
-		{ "time": 160 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Music/minimal.json b/_RELEASE/Packs/hypercube/Music/minimal.json
deleted file mode 100644
index 8d1390b..0000000
--- a/_RELEASE/Packs/hypercube/Music/minimal.json
+++ /dev/null
@@ -1,20 +0,0 @@
-{
-	// Music data id
-	"id": "minimal",
-
-	// Music file
-	"file_name": "minimal.ogg",
-
-	// Music information
-	"name": "Minimal",
-	"album": "",
-	"author": "Fantomenk",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 13 },
-		{ "time": 27 },
-		{ "time": 75 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Music/mrGawne.json b/_RELEASE/Packs/hypercube/Music/mrGawne.json
deleted file mode 100644
index e216472..0000000
--- a/_RELEASE/Packs/hypercube/Music/mrGawne.json
+++ /dev/null
@@ -1,20 +0,0 @@
-{
-	// Music data id
-	"id": "mrGawne",
-
-	// Music file
-	"file_name": "mrGawne.ogg",
-
-	// Music information
-	"name": "Be Gone Mr. Gawne",
-	"album": "Caps On, Hats Off",
-	"author": "BOSSFIGHT",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 18 },
-		{ "time": 42 },
-		{ "time": 90 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Music/pep.json b/_RELEASE/Packs/hypercube/Music/pep.json
deleted file mode 100644
index 4790e03..0000000
--- a/_RELEASE/Packs/hypercube/Music/pep.json
+++ /dev/null
@@ -1,20 +0,0 @@
-{
-	// Music data id
-	"id": "pep",
-
-	// Music file
-	"file_name": "pep.ogg",
-
-	// Music information
-	"name": "Platforms and Pitfalls",
-	"album": "",
-	"author": "Fantomenk",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 13 },
-		{ "time": 72 },
-		{ "time": 110 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Music/tengil.json b/_RELEASE/Packs/hypercube/Music/tengil.json
deleted file mode 100644
index 998b744..0000000
--- a/_RELEASE/Packs/hypercube/Music/tengil.json
+++ /dev/null
@@ -1,19 +0,0 @@
-{
-	// Music data id
-	"id": "tengil",
-
-	// Music file
-	"file_name": "tengil.ogg",
-
-	// Music information
-	"name": "Tengil",
-	"album": "",
-	"author": "Fantomenk",
-	
-	// Segments
-	"segments":
-	[
-		{ "time": 57 },
-		{ "time": 145 }
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Scripts/Levels/acceleradiant.lua b/_RELEASE/Packs/hypercube/Scripts/Levels/acceleradiant.lua
deleted file mode 100644
index f608d57..0000000
--- a/_RELEASE/Packs/hypercube/Scripts/Levels/acceleradiant.lua
+++ /dev/null
@@ -1,92 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-u_execScript("nextpatterns.lua")
-
--- this function adds a pattern to the timeline based on a key
-function addPattern(mKey)
-		if mKey == 0 then pACBarrage()
-	elseif mKey == 1 then pACBarrageMulti()
-	elseif mKey == 2 then pACBarrageMultiAltDir()
-	end
-end
-
--- shuffle the keys, and then call them to add all the patterns
--- shuffling is better than randomizing - it guarantees all the patterns will be called
-keys = { 0, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0 }
-keys = shuffle(keys)
-index = 0
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(2.25)
-	l_setSpeedInc(0.045)
-	l_setRotationSpeed(0.27)
-	l_setRotationSpeedMax(0.4)
-	l_setRotationSpeedInc(0.045)
-	l_setDelayMult(1.1)
-	l_setDelayInc(-0.01)
-	l_setFastSpin(71.0)
-	l_setSides(6)
-	l_setSidesMin(5)
-	l_setSidesMax(7)
-	l_setIncTime(15)
-	l_setMaxInc(4)
-
-	l_setPulseMin(64)
-	l_setPulseMax(84)
-	l_setPulseSpeed(1.05)
-	l_setPulseSpeedR(1.34)
-	l_setPulseDelayMax(7)
-
-	l_setBeatPulseMax(15)
-	l_setBeatPulseDelayMax(21.8)
-
-	enableSwapIfDMGreaterThan(1.4)
-end
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-	addPattern(keys[index])
-	index = index + 1
-	
-	if index - 1 == #keys then
-		index = 1
-	end
-end
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- continuous direction change (even if not on level increment)
-dirChangeTime = 400
-hueIMin = 0.0
-hueIMax = 22.0
-hueIStep = 0.0065
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-	dirChangeTime = dirChangeTime - mFrameTime;
-	if dirChangeTime < 0 then
-		-- do not change direction while fast spinning
-		if u_isFastSpinning() == false then
-			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
-			dirChangeTime = 400
-		end
-	end 
-
-	s_setHueInc(s_getHueInc() + hueIStep)
-	if(s_getHueInc() > hueIMax) then hueIStep = hueIStep * -1 end
-	if(s_getHueInc() < hueIMin) then hueIStep = hueIStep * -1 end
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Scripts/Levels/centrifugal.lua b/_RELEASE/Packs/hypercube/Scripts/Levels/centrifugal.lua
deleted file mode 100644
index 5efde07..0000000
--- a/_RELEASE/Packs/hypercube/Scripts/Levels/centrifugal.lua
+++ /dev/null
@@ -1,66 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-u_execScript("nextpatterns.lua")
-u_execScript("evolutionpatterns.lua")
-
-curveSpeed = 1
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(2.91)
-	l_setSpeedInc(0.0)
-	l_setRotationSpeed(0.0)
-	l_setRotationSpeedMax(0.0)
-	l_setRotationSpeedInc(0.0)
-	l_setDelayMult(1.35)
-	l_setDelayInc(0.0)
-	l_setFastSpin(0.0)
-	l_setSides(15)
-	l_setSidesMin(15)
-	l_setSidesMax(15)
-	l_setIncTime(10)
-
-	l_setWallSkewLeft(0)
-
-	l_setPulseMin(60)
-	l_setPulseMax(60)
-	l_setPulseSpeed(0)
-	l_setPulseSpeedR(0)
-	l_setPulseDelayMax(6.8)
-
-	l_setBeatPulseMax(20)
-	l_setBeatPulseDelayMax(27.2)
-
-	l_setSwapEnabled(true)
-	l_addTracked("curveSpeed", "curve speed")
-end
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-	hmcSimpleBarrageSNeigh(getRandomSide(), getRandomDir() * curveSpeed, 2) 
-	t_wait(getPerfectDelayDM(THICKNESS) * 6.22)
-end
-
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-	if curveSpeed < 3 then
-		curveSpeed = curveSpeed + 0.4
-		m_messageAddImportant("Curve speed: "..curveSpeed, 120)
-	end
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Scripts/Levels/disc-o.lua b/_RELEASE/Packs/hypercube/Scripts/Levels/disc-o.lua
deleted file mode 100644
index b50c201..0000000
--- a/_RELEASE/Packs/hypercube/Scripts/Levels/disc-o.lua
+++ /dev/null
@@ -1,105 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-u_execScript("nextpatterns.lua")
-u_execScript("evolutionpatterns.lua")
-
--- this function adds a pattern to the timeline based on a key
-function addPattern(mKey)
-		if mKey == 0 then pAltBarrage(math.random(1, 3), 2) 
-	elseif mKey == 1 then pMirrorSpiral(math.random(2, 4), 0)
-	elseif mKey == 2 then pBarrageSpiral(math.random(0, 3), 1, 1)
-	elseif mKey == 3 then pBarrageSpiral(math.random(0, 2), 1.2, 2)
-	elseif mKey == 4 then pBarrageSpiral(2, 0.7, 1)
-	elseif mKey == 5 then pInverseBarrage(0)
-	elseif mKey == 6 then hmcDefBarrageSpiral()
-	elseif mKey == 7 then pMirrorWallStrip(1, 0)
-	elseif mKey == 8 then hmcDefSpinner()
-	elseif mKey == 9 then hmcDefBarrage()
-	elseif mKey == 10 then hmcDef2Cage()
-	elseif mKey == 11 then hmcDefBarrageSpiralSpin()
-	end
-end
-
--- shuffle the keys, and then call them to add all the patterns
--- shuffling is better than randomizing - it guarantees all the patterns will be called
-keys = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 10, 8, 8, 9, 9, 9, 9, 6, 11, 11, 10, 10 }
-keys = shuffle(keys)
-index = 0
-
-specials = { "cage", "spinner", "barrage" }
-special = "none"
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(1.7)
-	l_setSpeedInc(0.15)
-	l_setRotationSpeed(0.1)
-	l_setRotationSpeedMax(0.4)
-	l_setRotationSpeedInc(0.035)
-	l_setDelayMult(1.2)
-	l_setDelayInc(0.0)
-	l_setFastSpin(0.0)
-	l_setSides(6)
-	l_setSidesMin(6)
-	l_setSidesMax(6)
-	l_setIncTime(15)
-	l_setMaxInc(6)
-
-	l_setPulseMin(77)
-	l_setPulseMax(95)
-	l_setPulseSpeed(1.95)
-	l_setPulseSpeedR(0.51)
-	l_setPulseDelayMax(13)
-
-	l_setBeatPulseMax(17)
-	l_setBeatPulseDelayMax(27.8)
-
-	l_setSwapEnabled(true)
-	l_addTracked("special", "special")
-end
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-	if special == "none" then
-		addPattern(keys[index])
-		index = index + 1
- 	
-		if index - 1 == #keys then
-			index = 1
-		end
-	elseif special == "cage" then
-		addPattern(10)
-	elseif special == "spinner" then
-		addPattern(8)
-	elseif special == "barrage" then
-		addPattern(9)
-	end
-end
-
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-	specials = shuffle(specials)
-
-	if special == "none" then
-		special = specials[1]
-		m_messageAddImportant("Special: "..special, 120)
-	else
-		special = "none"
-	end
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Scripts/Levels/evotutorial.lua b/_RELEASE/Packs/hypercube/Scripts/Levels/evotutorial.lua
deleted file mode 100644
index a4c6f96..0000000
--- a/_RELEASE/Packs/hypercube/Scripts/Levels/evotutorial.lua
+++ /dev/null
@@ -1,178 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-u_execScript("nextpatterns.lua")
-u_execScript("evolutionpatterns.lua")
-
--- this function adds a pattern to the timeline based on a key
-function addPattern(mKey)
-		if mKey == 0 then cBarrage(0)
-	elseif mKey == 1 then hmcBarrageN(0, 0, 0, 0.05, -3.8, 2.7, true); t_wait(55)
-	elseif mKey == 2 then hmcBarrageN(0, 0, 0, -0.05, -2.7, 3.8, true); t_wait(55)
-	end
-end
-
--- shuffle the keys, and then call them to add all the patterns
--- shuffling is better than randomizing - it guarantees all the patterns will be called
-keys = { 1, 1, 2, 2 }
-keys = shuffle(keys)
-index = 0
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(1.1)
-	l_setSpeedInc(0.045)
-	l_setRotationSpeed(0.1)
-	l_setRotationSpeedMax(0.4)
-	l_setRotationSpeedInc(0.045)
-	l_setDelayMult(1.0)
-	l_setDelayInc(0.0)
-	l_setFastSpin(71.0)
-	l_setSides(6)
-	l_setSidesMin(5)
-	l_setSidesMax(7)
-	l_setIncTime(0)
-
-	l_setWallSkewLeft(18)
-
-	l_setPulseMin(64)
-	l_setPulseMax(84)
-	l_setPulseSpeed(1.05)
-	l_setPulseSpeedR(1.35)
-	l_setPulseDelayMax(7)
-
-	l_setBeatPulseMax(15)
-	l_setBeatPulseDelayMax(110)
-
-	l_setSwapEnabled(true)
-
-	l_setTutorialMode(true)
-	l_setIncEnabled(false)
-end
-
-swappedOnce = false
-
--- onCursorSwap is executed whenever the player executes a successful 180° swap
-function onCursorSwap()
-	if swappedOnce == false then
-		u_log("swap detected!")
-		swappedOnce = true
-	end
-end
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-	m_messageAddImportant("welcome to the evolution tutorial", 120)
-	m_messageAddImportant("today you'll be introduced to...", 120)
-	m_messageAddImportant("1. swapping!", 100)
-	m_messageAddImportant("2. curving walls!", 100)
-	m_messageAddImportant("", 120)
-	m_messageAddImportant("press space or middle mouse button\nto swap", 250)
-	m_messageAddImportant("it allows you to rotate 180 degrees!", 200)
-	m_messageAddImportant("", 120)
-
-	m_messageAddImportant("now: curving walls", 120)
-	m_messageAddImportant("they can be simple...", 120)
-	m_messageAddImportant("", 120 * 3 + 80)
-
-	t_wait(135 * 8)
-	hmcSimpleBarrage(1)
-	t_wait(100)
-	hmcSimpleBarrage(-1)
-	t_wait(50)
-	hmcSimpleBarrage(1)
-	t_wait(100)
-	hmcSimpleBarrage(-2.5)
-	t_wait(80)
-	hmcSimpleBarrage(2.5)
-	t_wait(80)
-	hmcSimpleBarrage(3)
-
-	t_wait(50)
-	m_messageAddImportant("...in various patterns...", 130)
-	m_messageAddImportant("", 120 * 5 + 80)
-	t_wait(130)
-
-	hmcSimpleTwirl(5, 1, 0)
-	t_wait(50)
-	hmcSimpleTwirl(5, -2.5, 0.3)
-
-	m_messageAddImportant("...or can accellerate!", 130)
-	m_messageAddImportant("", 120 * 4 + 40)
-	t_wait(130)
-
-	hmcBarrage(0, 0.05, -1.5, 3, true)
-	t_wait(80)
-	hmcBarrage(0, -0.05, -3, 3, true)
-	t_wait(100)
-	hmcBarrage(0, 0.1, -2, 2, true)
-	t_wait(100)
-	hmcBarrage(0, 0.1, -3, 3, true)
-	t_wait(200)
-
-	m_messageAddImportant("they can also do crazy stuff!", 130)
-	m_messageAddImportant("", 120 * 8 + 50)
-
-	hmcSimpleCage(2.5, 1)
-	t_wait(80)
-	hmcSimpleCage(2.5, -1)
-	t_wait(100)
-	hmcSimpleCage(2.5, 1)
-	hmcSimpleCage(2.5, 1)
-	t_wait(100)
-	hmcSimpleCage(2.5, 1)
-	hmcSimpleCage(2.5, -1)
-	t_wait(100)
-	hmcSimpleSpinner(1)
-	t_wait(100)
-	hmcSimpleSpinner(-2)
-	t_wait(100)
-	hmcSimpleSpinner(3)
-	t_wait(100)
-	hmcSimpleCage(1.5, 1)
-	hmcSimpleCage(2.5, 1)
-	t_wait(100)
-	hmcSimpleCage(1.5, 1)
-	hmcSimpleCage(2.5, -1)
-	t_wait(100)
-	hmcSimpleSpinner(1)
-	hmcSimpleSpinner(1.2)
-	t_wait(100)
-	hmcSimpleSpinner(1)
-	hmcSimpleSpinner(-1.2)
-	t_wait(700)
-
-	m_messageAddImportant("well done!", 130)
-	m_messageAddImportant("now play some real levels!", 138)
-
-	u_kill()
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-end
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- continuous direction change (even if not on level increment)
-dirChangeTime = 600
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-	dirChangeTime = dirChangeTime - mFrameTime;
-	if dirChangeTime < 0 then
-		-- do not change direction while fast spinning
-		if u_isFastSpinning() == false then
-			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
-			dirChangeTime = 400
-		end
-	end 
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Scripts/Levels/g-force.lua b/_RELEASE/Packs/hypercube/Scripts/Levels/g-force.lua
deleted file mode 100644
index 0a9768c..0000000
--- a/_RELEASE/Packs/hypercube/Scripts/Levels/g-force.lua
+++ /dev/null
@@ -1,122 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-u_execScript("nextpatterns.lua")
-u_execScript("evolutionpatterns.lua")
-
-function gforceBarrage()
-	cBarrage(getRandomSide()) 
-	t_wait(getPerfectDelayDM(THICKNESS) * 6.1)
-end
-
-function gforceBarrageAssault()
-	cBarrage(getRandomSide()) 
-	t_wait(getPerfectDelayDM(THICKNESS) * 3.1)
-end
-
-
--- this function adds a pattern to the timeline based on a key
-function addPattern(mKey)
-		if mKey == 0 then hmcDefAccelBarrage()
-	elseif mKey == 1 then gforceBarrage()
-	end
-end
-
--- shuffle the keys, and then call them to add all the patterns
--- shuffling is better than randomizing - it guarantees all the patterns will be called
-keys = { 0, 1 }
-keys = shuffle(keys)
-index = 0
-
-specials = { "double", "assault", "incongruence", "dizzy" } 
-special = "none"
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(2.1)
-	l_setSpeedInc(0.16)
-	l_setRotationSpeed(0.12)
-	l_setRotationSpeedMax(0.4)
-	l_setRotationSpeedInc(0.035)
-	l_setDelayMult(1.9)
-	l_setDelayInc(0.0)
-	l_setFastSpin(0.0)
-	l_setSides(4)
-	l_setSidesMin(4)
-	l_setSidesMax(4)
-	l_setIncTime(10)
-	l_setMaxInc(10)
-
-	l_setWallSkewLeft(-15)
-
-	l_setPulseMin(77)
-	l_setPulseMax(95)
-	l_setPulseSpeed(2.95)
-	l_setPulseSpeedR(0.5)
-	l_setPulseDelayMax(13)
-
-	l_setBeatPulseMax(19)
-	l_setBeatPulseDelayMax(14.2)
-
-	l_setSwapEnabled(true)
-	l_addTracked("special", "special")
-end
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-	if special == "incongruence" then
-		l_setSides(math.random(4, 5))
-	else
-		l_setSides(4)
-	end
-
-	if special == "assault" then
-		gforceBarrageAssault()
-		return
-	end
-
-	if special == "dizzy" then
-		addPattern(0)
-		return
-	end
-
-	if special ~= "double" then
-		addPattern(keys[index])
-	else
-		addPattern(keys[index])
-		addPattern(keys[index])
-	end
-
-	index = index + 1
-	
-	if index - 1 == #keys then
-		index = 1
-	end
-end
-
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-	specials = shuffle(specials)
-
-	if special == "none" then
-		special = specials[1]
-		m_messageAddImportant("Special: "..special, 120)
-	else
-		special = "none"
-	end
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Scripts/Levels/incongruence.lua b/_RELEASE/Packs/hypercube/Scripts/Levels/incongruence.lua
deleted file mode 100644
index 0b51ce8..0000000
--- a/_RELEASE/Packs/hypercube/Scripts/Levels/incongruence.lua
+++ /dev/null
@@ -1,103 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-u_execScript("nextpatterns.lua")
-
--- this function adds a pattern to the timeline based on a key
-function addPattern(mKey)
-		if mKey == 0 then pRCBarrage()
-	elseif mKey == 1 then pRCBarrageDouble()
-	elseif mKey == 2 then pRCBarrageSpin()
-	end
-end
-
--- shuffle the keys, and then call them to add all the patterns
--- shuffling is better than randomizing - it guarantees all the patterns will be called
-keys = { 0, 0, 1, 1, 2 }
-keys = shuffle(keys)
-index = 0
-lowerBound = 4
-upperBound = 6
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(2.7)
-	l_setSpeedInc(0.11)
-	l_setRotationSpeed(0.27)
-	l_setRotationSpeedMax(0.4)
-	l_setRotationSpeedInc(0.045)
-	l_setDelayMult(1.1)
-	l_setDelayInc(-0.04)
-	l_setFastSpin(71.0)
-	l_setSides(6)
-	l_setSidesMin(0)
-	l_setSidesMax(0)
-	l_setIncTime(15)
-	l_setMaxInc(4)
-
-	l_setPulseMin(64)
-	l_setPulseMax(84)
-	l_setPulseSpeed(1.05)
-	l_setPulseSpeedR(1.34)
-	l_setPulseDelayMax(7)
-
-	l_setBeatPulseMax(15)
-	l_setBeatPulseDelayMax(21.8)
-
-	l_addTracked("lowerBound", "min")
-	l_addTracked("upperBound", "max")
-	l_enableRndSideChanges(false)
-
-	enableSwapIfDMGreaterThan(1.5)
-end
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-	m_messageAddImportant("Sides ("..lowerBound.." / "..upperBound..")", 170)
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-	l_setSides(math.random(lowerBound, upperBound))
-	addPattern(keys[index])
-	index = index + 1
-	
-	if index - 1 == #keys then
-		index = 1
-	end
-end
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-	lowerBound = math.random(4, 6)
-	upperBound = lowerBound + math.random(1, 3)
-	m_messageAddImportant("Sides ("..lowerBound.." / "..upperBound..")", 170)
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- continuous direction change (even if not on level increment)
-dirChangeTime = 400
-hueIMin = 0.0
-hueIMax = 22.0
-hueIStep = 0.0065
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-	dirChangeTime = dirChangeTime - mFrameTime;
-	if dirChangeTime < 0 then
-		-- do not change direction while fast spinning
-		if u_isFastSpinning() == false then
-			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
-			dirChangeTime = 400
-		end
-	end 
-
-	s_setHueInc(s_getHueInc() + hueIStep)
-	if(s_getHueInc() > hueIMax) then hueIStep = hueIStep * -1 end
-	if(s_getHueInc() < hueIMin) then hueIStep = hueIStep * -1 end
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Scripts/Levels/massacre.lua b/_RELEASE/Packs/hypercube/Scripts/Levels/massacre.lua
deleted file mode 100644
index 75834a1..0000000
--- a/_RELEASE/Packs/hypercube/Scripts/Levels/massacre.lua
+++ /dev/null
@@ -1,129 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-u_execScript("nextpatterns.lua")
-u_execScript("evolutionpatterns.lua")
-
--- this function adds a pattern to the timeline based on a key
-function addPattern(mKey)
-		if mKey == 0 then pAltBarrage(math.random(1, 2), 2) 
-	elseif mKey == 1 then pBarrageSpiral(2, 0.6, 1)
-	elseif mKey == 2 then pInverseBarrage(0)
-	elseif mKey == 3 then hmcDefBarrageSpiralFast()
-	elseif mKey == 4 then pWallExVortex(0, 1, 1)
-	elseif mKey == 5 then pDMBarrageSpiral(math.random(2, 4), 0.4, 1)
-	elseif mKey == 6 then pRandomBarrage(math.random(1, 3), 2.25)
-	elseif mKey == 7 then pInverseBarrage(0)
-	elseif mKey == 8 then pMirrorWallStrip(1, 0)
-	elseif mKey == 9 then hmcDefSpinner()
-	elseif mKey == 10 then hmcDefBarrageSpiral()
-	elseif mKey == 11 then hmcDef2CageD()
-	elseif mKey == 12 then hmcDefBarrageSpiralSpin()
-	elseif mKey == 13 then hmcDefSpinnerSpiralAcc()
-	elseif mKey == 14 then hmcDefBarrageSpiralRnd()
-	elseif mKey == 15 then hmcDefBarrageInv()
-	end
-end
-
--- shuffle the keys, and then call them to add all the patterns
--- shuffling is better than randomizing - it guarantees all the patterns will be called
-keys = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
-keys = shuffle(keys)
-index = 0
-
-specials = { "cage", "spinner", "barrage", "spiral" }
-special = "none"
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(2.7)
-	l_setSpeedInc(0.04)
-	l_setRotationSpeed(0.25)
-	l_setRotationSpeedMax(0.4)
-	l_setRotationSpeedInc(0.015)
-	l_setDelayMult(1.35)
-	l_setDelayInc(0.0)
-	l_setFastSpin(71.0)
-	l_setSides(6)
-	l_setSidesMin(6)
-	l_setSidesMax(6)
-	l_setIncTime(10)
-	l_setMaxInc(2)
-
-	l_setPulseMin(61)
-	l_setPulseMax(80)
-	l_setPulseSpeed(2.4)
-	l_setPulseSpeedR(1.45)
-	l_setPulseDelayMax(6.8)
-
-	l_setBeatPulseMax(18)
-	l_setBeatPulseDelayMax(18.8)
-
-	l_setSwapEnabled(true)
-	l_addTracked("special", "special")
-end
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-	setCurveMult(0.85)
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-	if special == "none" then
-		addPattern(keys[index])
-		index = index + 1
- 	
-		if index - 1 == #keys then
-			index = 1
-		end
-	elseif special == "cage" then
-		addPattern(11)
-		addPattern(9)
-	elseif special == "spinner" then
-		addPattern(14)
-		addPattern(9)
-	elseif special == "barrage" then
-		addPattern(3)
-		addPattern(14)
-		addPattern(13)
-		addPattern(15)
-	elseif special == "spiral" then
-		addPattern(12)
-		addPattern(4)
-	end
-end
-
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-	specials = shuffle(specials)
-
-	if special == "none" then
-		special = specials[1]
-		m_messageAddImportant("Special: "..special, 120)
-	else
-		special = "none"
-	end
-end
-
--- continuous direction change (even if not on level increment)
-dirChangeTime = 120
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-	dirChangeTime = dirChangeTime - mFrameTime;
-	if dirChangeTime < 0 then
-		-- do not change direction while fast spinning
-		if u_isFastSpinning() == false then
-			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
-			dirChangeTime = 200
-		end
-	end 
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Scripts/Levels/polyhedrug.lua b/_RELEASE/Packs/hypercube/Scripts/Levels/polyhedrug.lua
deleted file mode 100644
index 20f537d..0000000
--- a/_RELEASE/Packs/hypercube/Scripts/Levels/polyhedrug.lua
+++ /dev/null
@@ -1,109 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-u_execScript("nextpatterns.lua")
-
-extra = 0
-level = 1
-incrementTime = 10
-
--- this function adds a pattern to the timeline based on a key
-function addPattern(mKey)
-		if mKey == 0 then pTrapBarrage(math.random(0, l_getSides())) 
-	elseif mKey == 1 then pTrapBarrageDouble(math.random(0, l_getSides()))
-	elseif mKey == 2 then pTrapBarrageInverse(math.random(0, l_getSides()))
-	elseif mKey == 3 then pTrapBarrageAlt(math.random(0, l_getSides()))
-	end
-end
-
--- shuffle the keys, and then call them to add all the patterns
--- shuffling is better than randomizing - it guarantees all the patterns will be called
-keys = { 0, 0, 1, 1, 2, 2, 3, 3 }
-keys = shuffle(keys)
-index = 0
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(2.0)
-	l_setSpeedInc(0.0)
-	l_setRotationSpeed(0.27)
-	l_setRotationSpeedMax(0.4)
-	l_setRotationSpeedInc(0.045)
-	l_setDelayMult(1.1)
-	l_setDelayInc(0.0)
-	l_setFastSpin(71.0)
-	l_setSides(4)
-	l_setSidesMin(0)
-	l_setSidesMax(0)
-	l_setIncTime(10)
-	l_setMaxInc(4)
-
-	l_setPulseMin(64)
-	l_setPulseMax(84)
-	l_setPulseSpeed(1.05)
-	l_setPulseSpeedR(1.34)
-	l_setPulseDelayMax(7)
-
-	l_setBeatPulseMax(15)
-	l_setBeatPulseDelayMax(21.8)
-
-	l_addTracked("level", "level")
-	l_addTracked("lowerBound", "min")
-	l_addTracked("upperBound", "max")
-	l_enableRndSideChanges(false)
-
-	enableSwapIfDMGreaterThan(1.5)
-end
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-	m_messageAddImportant("level: "..(extra + 1).." / time: "..incrementTime, 170)
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-	addPattern(keys[index])
-	index = index + 1
-	
-	if index - 1 == #keys then
-		index = 1
-	end
-end
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-	extra = extra + 1
-	level = extra + 1
-	incrementTime = incrementTime + 5
-	l_setSides(l_getSides() + 1)
-	l_setIncTime(incrementTime)
-	m_messageAddImportant("level: "..(extra + 1).." / time: "..incrementTime, 170)
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- continuous direction change (even if not on level increment)
-dirChangeTime = 400
-hueIMin = 0.0
-hueIMax = 22.0
-hueIStep = 0.0065
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-	dirChangeTime = dirChangeTime - mFrameTime;
-	if dirChangeTime < 0 then
-		-- do not change direction while fast spinning
-		if u_isFastSpinning() == false then
-			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
-			dirChangeTime = 400
-		end
-	end 
-
-	s_setHueInc(s_getHueInc() + hueIStep)
-	if(s_getHueInc() > hueIMax) then hueIStep = hueIStep * -1 end
-	if(s_getHueInc() < hueIMin) then hueIStep = hueIStep * -1 end
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Scripts/Levels/reppaws.lua b/_RELEASE/Packs/hypercube/Scripts/Levels/reppaws.lua
deleted file mode 100644
index 90e15e2..0000000
--- a/_RELEASE/Packs/hypercube/Scripts/Levels/reppaws.lua
+++ /dev/null
@@ -1,86 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-u_execScript("nextpatterns.lua")
-u_execScript("evolutionpatterns.lua")
-
-gap = 6
-
--- this function adds a pattern to the timeline based on a key
-function addPattern(mKey)
-		if mKey == 0 then cBarrageN(getRandomSide(), gap) t_wait(getPerfectDelayDM(THICKNESS) * 6)
-	elseif mKey == 1 then hmcSimpleBarrageSNeigh(getRandomSide(), 0, gap) t_wait(getPerfectDelayDM(THICKNESS) * 6)
-	end
-end
-
--- shuffle the keys, and then call them to add all the patterns
--- shuffling is better than randomizing - it guarantees all the patterns will be called
-keys = { 0, 0, 0, 1, 1, 1 }
-keys = shuffle(keys)
-index = 0
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(3.0)
-	l_setSpeedInc(0.0)
-	l_setRotationSpeed(0.22)
-	l_setRotationSpeedMax(0.4)
-	l_setRotationSpeedInc(0.0)
-	l_setDelayMult(1.35)
-	l_setDelayInc(0.0)
-	l_setFastSpin(71.0)
-	l_setSides(32)
-	l_setSidesMin(32)
-	l_setSidesMax(32)
-	l_setIncTime(10)
-
-	l_setWallSkewLeft(15)
-
-	l_setPulseMin(61)
-	l_setPulseMax(80)
-	l_setPulseSpeed(3.6)
-	l_setPulseSpeedR(1.45)
-	l_setPulseDelayMax(6.8)
-
-	l_setBeatPulseMax(20)
-	l_setBeatPulseDelayMax(26.1)
-
-	l_setSwapEnabled(true)
-	l_addTracked("gap", "gap size")
-end
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-	syncCurveWithRotationSpeed(0, 0)
-	m_messageAdd("remember, swap with spacebar!", 120)
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-	addPattern(keys[index])
-
-	index = index + 1
-	
-	if index - 1 == #keys then
-		index = 1
-	end
-end
-
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-	if gap > 2 then
-		gap = gap -1
-		m_messageAddImportant("Gap size: "..gap, 120)
-	end
-end
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Scripts/Levels/slither.lua b/_RELEASE/Packs/hypercube/Scripts/Levels/slither.lua
deleted file mode 100644
index 8e92e76..0000000
--- a/_RELEASE/Packs/hypercube/Scripts/Levels/slither.lua
+++ /dev/null
@@ -1,110 +0,0 @@
--- include useful files
-u_execScript("utils.lua")
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-u_execScript("nextpatterns.lua")
-u_execScript("evolutionpatterns.lua")
-
--- this function adds a pattern to the timeline based on a key
-function addPattern(mKey)
-		if mKey == 0 then pAltBarrage(math.random(1, 3), 2) 
-	end
-end
-
--- shuffle the keys, and then call them to add all the patterns
--- shuffling is better than randomizing - it guarantees all the patterns will be called
-keys = { 0 }
-keys = shuffle(keys)
-index = 0
-
-smin = 2
-smax = 2
-
-level = 1
-incrementTime = 10
-
-range = "("..(smin * 2).."/"..(smax * 2).."]"
-
--- onInit is an hardcoded function that is called when the level is first loaded
-function onInit()
-	l_setSpeedMult(1.7)
-	l_setSpeedInc(0.1)
-	l_setRotationSpeed(0.2)
-	l_setRotationSpeedMax(0.4)
-	l_setRotationSpeedInc(0.035)
-	l_setDelayMult(1.1)
-	l_setDelayInc(0.0)
-	l_setFastSpin(0.0)
-	l_setSides(3)
-	l_setSidesMin(3)
-	l_setSidesMax(3)
-	l_setIncTime(10)
-
-	l_setWallAngleLeft(-25)
-
-	l_setPulseMin(60)
-	l_setPulseMax(80)
-	l_setPulseSpeed(3.6)
-	l_setPulseSpeedR(1.45)
-	l_setPulseDelayMax(7)
-
-	l_setBeatPulseMax(15)
-	l_setBeatPulseDelayMax(21.8)
-
-	l_setSwapEnabled(true)
-	l_addTracked("level", "level")
-	l_addTracked("next at", "incrementTime")
-	l_addTracked("range", "range")
-end
-
--- onLoad is an hardcoded function that is called when the level is started/restarted
-function onLoad()
-	m_messageAdd("remember, you can focus with lshift!", 150)
-end
-
--- onStep is an hardcoded function that is called when the level timeline is empty
--- onStep should contain your pattern spawning logic
-function onStep()	
-	l_setSides(math.random(smin, smax) * 2)
-	hmcDefSpinnerSpiralAcc()
-end
-
-
--- onIncrement is an hardcoded function that is called when the level difficulty is incremented
-function onIncrement()
-	level = level + 1
-	incrementTime = incrementTime + 5
-	m_messageAddImportant("level: "..(level).." / time: "..incrementTime, 150)
-
-	if smax < 4 then
-		smax = smax + 1;
-	else
-		smin = smin + 1;
-		smax = smin;
-	end
-
-	range = "("..(smin * 2).."/"..(smax * 2).."]"
-	m_messageAddImportant("Range: "..range, 100)
-
-	l_setSides(l_getSides() + 2)
-	l_setIncTime(incrementTime)
-end
-
--- continuous direction change (even if not on level increment)
-dirChangeTime = 120
-
--- onUnload is an hardcoded function that is called when the level is closed/restarted
-function onUnload()
-end
-
--- onUpdate is an hardcoded function that is called every frame
-function onUpdate(mFrameTime)
-	dirChangeTime = dirChangeTime - mFrameTime;
-	if dirChangeTime < 0 then
-		-- do not change direction while fast spinning
-		if u_isFastSpinning() == false then
-			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
-			dirChangeTime = 400
-		end
-	end 
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Scripts/alternativepatterns.lua b/_RELEASE/Packs/hypercube/Scripts/alternativepatterns.lua
deleted file mode 100644
index 0266f12..0000000
--- a/_RELEASE/Packs/hypercube/Scripts/alternativepatterns.lua
+++ /dev/null
@@ -1,119 +0,0 @@
-u_execScript("common.lua")
-
-function pAltMirrorSpiral(mTimes, mExtra)
-	oldThickness = THICKNESS
-	THICKNESS = getPerfectThickness(THICKNESS)
-	delay = getPerfectDelay(THICKNESS)
-	startSide = getRandomSide()
-	loopDir = getRandomDir()	
-	for k = 1, #mTimes do
-		for i = 1, mTimes[k] do
-			rWallEx(startSide, mExtra)
-			if (k % 2) == 0 then
-				startSide = startSide + loopDir
-			else
-				startSide = startSide - loopDir
-			end
-			t_wait(delay)
-		end 
-	end
-
-	THICKNESS = oldThickness
-	
-	t_wait(getPerfectDelay(THICKNESS) * 6.5)
-end
-
-function randomArray(mNumber,mLower,mUpper)
-	a = {}
-	for k = 1, mNumber do
-		a[k] = math.random(mLower,mUpper)
-	end
-	return a
-end
-
-function pAltTunnel(mTimes,mFree)
-	oldThickness = THICKNESS
-	myThickness = getPerfectThickness(THICKNESS)
-	delay = getPerfectDelay(myThickness) * 5
-	startSide = getRandomSide()
-	loopDir = getRandomDir()
-	
-	THICKNESS = myThickness
-	
-	for i = 0, mTimes do
-		if i < mTimes then
-			w_wall(startSide, myThickness + 5 * l_getSpeedMult() * delay)
-		end
-		
-		cBarrageN(startSide + loopDir,mFree)
-		t_wait(delay)
-		
-		loopDir = loopDir * -1
-	end
-	
-	THICKNESS = oldThickness
-end
-
-function cycle(mSides)
-	eArray = {}
-	j = getRandomSide()
-	for i = 1, mSides do 
-		eArray[i] = (i + j) % mSides + 1
-	end
-	return eArray
-end
-
-function pLadder(mTimes,mArray,myThickness)
-
-	delay = getPerfectDelay(myThickness)
-
-	local eArray = {}
-	l = 1
-	s = (#mArray)/l_getSides()
-	t = math.random(0,100)
-
-	for i = 1, mTimes do
-		q = (i+t) % s + 1
-		for k = 1, l_getSides() do
-			if(mArray[(q-1)*l_getSides() + k] ~= 0) then
-				eArray[l] = 1
-			else
-				eArray[l] = 0
-			end
-			l = l + 1
-		end
-		
-		if i ~= mTimes then
-			for j = 1, 3 do
-				for k = 1,l_getSides() do
-					if(mArray[(q-1)*l_getSides() + k] == 2) then
-						eArray[l] = 1
-					else
-						eArray[l] = 0
-					end
-					l = l + 1
-				end
-			end
-		end
-	end
-
-	patternizer(eArray,myThickness)
-	t_wait(delay*2)
-	
-end
-
-function patternizer(mArray,myThickness)
-	delay = getPerfectDelay(myThickness)
-	eArray = cycle(l_getSides())
-
-	j = math.floor(#mArray / l_getSides())
-	
-	for i = 1, j do
-		for k = 1, l_getSides() do
-			if mArray[(i - 1)*l_getSides() + k] == 1 then
-				w_wall(eArray[k], myThickness)
-			end
-		end
-		t_wait(delay)
-	end
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Scripts/common.lua b/_RELEASE/Packs/hypercube/Scripts/common.lua
deleted file mode 100644
index 975a00d..0000000
--- a/_RELEASE/Packs/hypercube/Scripts/common.lua
+++ /dev/null
@@ -1,114 +0,0 @@
--- common variables
-THICKNESS = 40.0;
-
-function enableSwapIfDMGreaterThan(mDM)
-	if(u_getDifficultyMult() > mDM) then
-		m_messageAdd(" difficulty > " ..mDM.. "\nswap enabled!", 65)
-		l_setSwapEnabled(true)
-	end	
-end
-
-function disableIncIfDMGreaterThan(mDM)
-	if(u_getDifficultyMult() > mDM) then
-		m_messageAdd(" difficulty > " ..mDM.. "\nincrement disabled!", 65)
-		l_setIncEnabled(false)
-	end	
-end
-
--- getHalfSides: returns half the number of sides (integer)
-function getHalfSides() return math.ceil(l_getSides() / 2) end
-
--- getRandomSide: returns random mSide
-function getRandomSide() return math.random(0, l_getSides() - 1) end
-
--- getRandomDir: returns either 1 or -1
-function getRandomDir()
-	if math.random(0, 100) > 50 then return 1 end
-	return -1
-end
-
--- getPerfectDelay: returns time to wait for two walls to be next to each other
-function getPerfectDelay(mThickness) return mThickness / (5.02 * u_getSpeedMultDM()) * u_getDelayMultDM() end
-
--- getPerfectDelayDM: returns getPerfectDelay calculated with difficulty mutliplier
-function getPerfectDelayDM(mThickness) return mThickness / (5.02 * u_getSpeedMultDM()) * u_getDelayMultDM() end
-
--- getPerfectThickness: returns a good THICKNESS value in relation to human reflexes
-function getPerfectThickness(mThickness) return mThickness * u_getSpeedMultDM() end
-
--- getSideDistance: returns shortest distance from a side to another
-function getSideDistance(mSide1, mSide2)
-	start = mSide1	
-	rightSteps = 0
-	while start ~= mSide2 do
-		rightSteps = rightSteps + 1
-		start = start + 1
-		if start > l_getSides() - 1 then start = 0 end
-	end
-	
-	start = mSide1	
-	leftSteps = 0
-	while start ~= mSide2 do
-		leftSteps = leftSteps + 1
-		start = start - 1
-		if start < 0 then start = l_getSides() - 1 end
-	end
-	
-	if rightSteps < leftSteps then return rightSteps end
-	return leftSteps
-end
-
--- cWall: creates a wall with the common THICKNESS
-function cWall(mSide) w_wall(mSide, THICKNESS) end
-
--- oWall: creates a wall opposite to the mSide passed
-function oWall(mSide) cWall(mSide + getHalfSides()) end
-
--- rWall: union of cwall and owall (created 2 walls facing each other)
-function rWall(mSide)
-	cWall(mSide)
-	oWall(mSide)
-end
-
--- cWallEx: creates a wall with mExtra walls attached to it 
-function cWallEx(mSide, mExtra)
-	cWall(mSide);
-	loopDir = 1;
-	
-	if mExtra < 0 then loopDir = -1 end
-	for i = 0, mExtra, loopDir do cWall(mSide + i) end
-end
-
--- oWallEx: creates a wall with mExtra walls opposite to mSide
-function oWallEx(mSide, mExtra)
-	cWallEx(mSide + getHalfSides(), mExtra)
-end
-
--- rWallEx: union of cwallex and owallex
-function rWallEx(mSide, mExtra)
-	cWallEx(mSide, mExtra)
-	oWallEx(mSide, mExtra)
-end
-
--- cBarrageN: spawns a barrage of walls, with a free mSide plus mNeighbors
-function cBarrageN(mSide, mNeighbors)
-	for i = mNeighbors, l_getSides() - 2 - mNeighbors, 1 do
-		cWall(mSide + i + 1)
-	end
-end
-
--- cBarrage: spawns a barrage of walls, with a single free mSide
-function cBarrage(mSide) cBarrageN(mSide, 0) end
-
--- cBarrageOnlyN: spawns a barrage of wall, with only free mNeighbors
-function cBarrageOnlyN(mSide, mNeighbors)
-	cWall(mSide)
-	cBarrageN(mSide, mNeighbors)
-end
-
--- cAltBarrage: spawns a barrage of alternate walls
-function cAltBarrage(mSide, mStep)
-	for i = 0, l_getSides() / mStep, 1 do
-		cWall(mSide + i * mStep)
-	end
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Scripts/commonpatterns.lua b/_RELEASE/Packs/hypercube/Scripts/commonpatterns.lua
deleted file mode 100644
index 0041013..0000000
--- a/_RELEASE/Packs/hypercube/Scripts/commonpatterns.lua
+++ /dev/null
@@ -1,196 +0,0 @@
-u_execScript("common.lua")
-
--- pAltBarrage: spawns a series of cAltBarrage
-function pAltBarrage(mTimes, mStep)
-	delay = getPerfectDelayDM(THICKNESS) * 5.6
-	
-	for i = 0, mTimes do
-		cAltBarrage(i, mStep)
-		t_wait(delay)
-	end
-	
-	t_wait(delay)
-end
-
--- pMirrorSpiral: spawns a spiral of rWallEx
-function pMirrorSpiral(mTimes, mExtra)
-	oldThickness = THICKNESS
-	THICKNESS = getPerfectThickness(THICKNESS)
-	delay = getPerfectDelay(THICKNESS)
-	startSide = getRandomSide()
-	loopDir = getRandomDir()	
-	j = 0
-	
-	for i = 0, mTimes do
-		rWallEx(startSide + j, mExtra)
-		j = j + loopDir
-		t_wait(delay)
-	end
-	
-	THICKNESS = oldThickness
-	
-	t_wait(getPerfectDelayDM(THICKNESS) * 6.5)
-end
-
--- pMirrorSpiralDouble: spawns a spiral of rWallEx where you need to change direction
-function pMirrorSpiralDouble(mTimes, mExtra)
-	oldThickness = THICKNESS
-	THICKNESS = getPerfectThickness(THICKNESS)
-	delay = getPerfectDelayDM(THICKNESS)
-	startSide = getRandomSide()
-	currentSide = startSide
-	loopDir = getRandomDir()	
-	j = 0
-	
-	for i = 0, mTimes do
-		rWallEx(startSide + j, mExtra)
-		j = j + loopDir
-		t_wait(delay)
-	end
-	
-	rWallEx(startSide + j, mExtra)
-	t_wait(delay * 0.9)
-	
-	rWallEx(startSide + j, mExtra)
-	t_wait(delay * 0.9)
-	
-	loopDir = loopDir * -1
-	
-	for i = 0, mTimes + 1 do
-		currentSide = currentSide + loopDir;
-		rWallEx(currentSide + j - 1, mExtra)
-		j = j + loopDir
-		t_wait(delay)
-	end
-	
-	THICKNESS = oldThickness
-	t_wait(getPerfectDelayDM(THICKNESS) * 7.5)
-end
-
--- pBarrageSpiral: spawns a spiral of cBarrage
-function pBarrageSpiral(mTimes, mDelayMult, mStep)
-	delay = getPerfectDelayDM(THICKNESS) * 5.6 * mDelayMult
-	startSide = getRandomSide()
-	loopDir = mStep * getRandomDir()	
-	j = 0
-	
-	for i = 0, mTimes do
-		cBarrage(startSide + j)
-		j = j + loopDir
-		t_wait(delay)
-		if(l_getSides() < 6) then t_wait(delay * 0.6) end
-	end
-	
-	t_wait(getPerfectDelayDM(THICKNESS) * 6.1)
-end
-
--- pDMBarrageSpiral: spawns a spiral of cBarrage, with static delay
-function pDMBarrageSpiral(mTimes, mDelayMult, mStep)
-	delay = (getPerfectDelayDM(THICKNESS) * 5.42) * (mDelayMult / (u_getDifficultyMult() ^ 0.4)) * (u_getSpeedMultDM() ^ 0.35)
-	startSide = getRandomSide()
-	loopDir = mStep * getRandomDir()	
-	j = 0
-	
-	for i = 0, mTimes do
-		cBarrage(startSide + j)
-		j = j + loopDir
-		t_wait(delay)
-		if(l_getSides() < 6) then t_wait(delay * 0.49) end
-	end
-	
-	t_wait(getPerfectDelayDM(THICKNESS) * (6.7 * (u_getDifficultyMult() ^ 0.7)))
-end
-
--- pWallExVortex: spawns left-left right-right spiral patters
-function pWallExVortex(mTimes, mStep, mExtraMult)
-	delay = getPerfectDelayDM(THICKNESS) * 5.0 
-	startSide = getRandomSide()
-	loopDir = getRandomDir()
-	currentSide = startSide
-	
-	for j = 0, mTimes do
-		for i = 0, mStep do
-			currentSide = currentSide + loopDir
-			rWallEx(currentSide, loopDir * mExtraMult)
-			t_wait(delay)
-		end
-		
-		loopDir = loopDir * -1
-		
-		for i = 0, mStep + 1 do
-			currentSide = currentSide + loopDir;
-			rWallEx(currentSide, loopDir * mExtraMult)
-			t_wait(delay)
-		end
-	end
-	
-	t_wait(getPerfectDelayDM(THICKNESS) * 5.5)
-end
-
--- pInverseBarrage: spawns two barrages who force you to turn 180 degrees
-function pInverseBarrage(mTimes)
-	delay = getPerfectDelayDM(THICKNESS) * 9.9
-	startSide = getRandomSide()
-	
-	for i = 0, mTimes do
-		cBarrage(startSide)
-		t_wait(delay)
-		if(l_getSides() < 6) then t_wait(delay * 0.8) end
-		cBarrage(startSide + getHalfSides())
-		t_wait(delay)
-	end
-	
-	t_wait(getPerfectDelayDM(THICKNESS) * 2.5)
-end
-
--- pRandomBarrage: spawns barrages with random side, and waits humanly-possible times depending on the sides distance
-function pRandomBarrage(mTimes, mDelayMult)
-	side = getRandomSide()
-	oldSide = 0
-	
-	for i = 0, mTimes do	
-		cBarrage(side)
-		oldSide = side
-		side = getRandomSide()
-		t_wait(getPerfectDelayDM(THICKNESS) * (2 + (getSideDistance(side, oldSide)*mDelayMult)))
-	end
-	
-	t_wait(getPerfectDelayDM(THICKNESS) * 5.6)
-end
-
--- pMirrorWallStrip: spawns rWalls close to one another on the same side
-function pMirrorWallStrip(mTimes, mExtra)
-	delay = getPerfectDelayDM(THICKNESS) * 3.65
-	startSide = getRandomSide()
-	
-	for i = 0, mTimes do
-		rWallEx(startSide, mExtra)
-		t_wait(delay)
-	end
-	
-	t_wait(getPerfectDelayDM(THICKNESS) * 5.00)
-end
-
--- pTunnel: forces you to circle around a very thick wall
-function pTunnel(mTimes)
-	oldThickness = THICKNESS
-	myThickness = getPerfectThickness(THICKNESS)
-	delay = getPerfectDelay(myThickness) * 5
-	startSide = getRandomSide()
-	loopDir = getRandomDir()
-	
-	THICKNESS = myThickness
-	
-	for i = 0, mTimes do
-		if i < mTimes then
-			w_wall(startSide, myThickness + 5 * u_getSpeedMultDM() * delay)
-		end
-		
-		cBarrage(startSide + loopDir)
-		t_wait(delay)
-		
-		loopDir = loopDir * -1
-	end
-	
-	THICKNESS = oldThickness
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Scripts/evolutionpatterns.lua b/_RELEASE/Packs/hypercube/Scripts/evolutionpatterns.lua
deleted file mode 100644
index a5aa629..0000000
--- a/_RELEASE/Packs/hypercube/Scripts/evolutionpatterns.lua
+++ /dev/null
@@ -1,301 +0,0 @@
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-u_execScript("utils.lua")
-u_execScript("alternativepatterns.lua")
-u_execScript("nextpatterns.lua")
-
-hueModifier = 0.2
-sync = false
-syncRndMin = 0
-syncRndMax = 0
-
-curveMult = 1
-
-function syncCurveWithRotationSpeed(mRndMin, mRndMax)
-	sync = true
-	syncRndMin = mRndMin
-	syncRndMax = mRndMax
-end
-
-function setCurveMult(mMult)
-	curveMult = mMult
-end
-
-function wallHMCurveAcc(mSide, mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong)
-	if sync == true then
-		mCurve = l_getRotationSpeed() * 10.0
-		mCurve = mCurve + (math.random(syncRndMin, syncRndMax) / 100.0)
-	end
-
-	w_wallHModCurveData(hueModifier, mSide, THICKNESS, mCurve * (u_getDifficultyMult() ^ 0.25) * curveMult, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong)
-end
-
-function wallHMCurve(mSide, mCurve)
-	wallHMCurveAcc(mSide, mCurve, 0, 0, 0, false)
-end
-
-function hmcBarrageN(mSide, mNeighbors, mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong)
-	for i = mNeighbors, l_getSides() - 2 - mNeighbors, 1 do
-		wallHMCurveAcc(mSide + i + 1, mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong)
-	end
-end
-
-function hmcBarrageS(mSide, mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong)
-	hmcBarrageN(mSide, 0, mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong);
-end
-
-function hmcBarrage(mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong)
-	hmcBarrageS(getRandomSide(), mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong);
-end
-
-function hmcSimpleBarrage(mCurve)
-	hmcBarrageN(getRandomSide(), 0, mCurve, 0, 0, 0, false);
-end
-
-function hmcSimpleBarrageS(mSide, mCurve)
-	hmcBarrageN(mSide, 0, mCurve, 0, 0, 0, false);
-end
-
-function hmcSimpleBarrageSNeigh(mSide, mCurve, mNeighbors)
-	hmcBarrageN(mSide, mNeighbors, mCurve, 0, 0, 0, false);
-end
-
-
-function hmcSimpleTwirl(mTimes, mCurve, mCurveAdd)
-	startSide = getRandomSide()
-	currentSide = startSide
-	loopDir = getRandomDir()
-	delay = getPerfectDelayDM(THICKNESS) * 5.7
-	j = 0
-	
-	currentCurve = mCurve	
-
-	for i = 0, mTimes do
-		hmcSimpleBarrageS(startSide + j, currentCurve)
-		j = j + loopDir
-		currentCurve = currentCurve + mCurveAdd
-		t_wait(delay)
-	end
-end
-
-function hmcSimpleCage(mCurve, mDir)
-	side = getRandomSide()
-	oppositeSide = side + getHalfSides()
-
-	wallHMCurve(side, mCurve)
-	wallHMCurve(oppositeSide, mCurve * mDir)
-end
-
-function hmcSimpleCageS(mCurve, mDir, mSide)
-	oppositeSide = mSide + getHalfSides()
-
-	wallHMCurve(mSide, mCurve)
-	wallHMCurve(oppositeSide, mCurve * mDir)
-end
-
-function hmcSimpleSpinner(mCurve)
-	side = getRandomSide()
-
-	for i = 0, l_getSides() / 2, 1 do
-		wallHMCurve(side + i * 2, mCurve)
-	end
-end
-
-function hmcSimpleSpinnerS(mSide, mCurve)
-	for i = 0, l_getSides() / 2, 1 do
-		wallHMCurve(mSide + i * 2, mCurve)
-	end
-end
-
-function hmcSimpleSpinnerSAcc(mSide, mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong)
-	for i = 0, l_getSides() / 2, 1 do
-		wallHMCurveAcc(mSide + i * 2, mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong)
-	end
-end
-
-function hmcDefSpinner()
-	t_wait(getPerfectDelayDM(THICKNESS) * 3.2)
-	hmcSimpleSpinner(math.random(10, 19) / 10.0 * getRandomDir())
-	t_wait(getPerfectDelayDM(THICKNESS) * 5.9)
-end
-
-function hmcDefBarrage()
-	t_wait(getPerfectDelayDM(THICKNESS) * 3.1)
-	hmcSimpleBarrage(math.random(10, 20) / 10.0 * getRandomDir())
-	t_wait(getPerfectDelayDM(THICKNESS) * 5)
-end
-
-function hmcDef2Cage()
-	t_wait(getPerfectDelayDM(THICKNESS) * 2.1)
-	side = getRandomSide()
-	rndspd = math.random(10, 20) / 10.0
-
-	t_wait(getPerfectDelayDM(THICKNESS) * 3.1)
-	hmcSimpleCageS(rndspd, -1, side)
-	t_wait(getPerfectDelayDM(THICKNESS) * 1.1)
-	hmcSimpleCageS(rndspd, -1, side)
-	t_wait(getPerfectDelayDM(THICKNESS) * 1.1)
-	hmcSimpleCageS(rndspd, -1, side)
-	t_wait(getPerfectDelayDM(THICKNESS) * 5.3)
-end
-
-function hmcDef2CageD()
-	t_wait(getPerfectDelayDM(THICKNESS) * 2.1)
-
-	side = getRandomSide()
-	oppositeSide = getHalfSides() + side
-	rndspd = math.random(10, 17) / 10.0
-
-	t_wait(getPerfectDelayDM(THICKNESS) * 3.1)
-	hmcSimpleCageS(rndspd, -1, side)
-	t_wait(getPerfectDelayDM(THICKNESS) * 1.1)
-	hmcSimpleCageS(rndspd, -1, side)
-	t_wait(getPerfectDelayDM(THICKNESS) * 1.1)
-	hmcSimpleCageS(rndspd, -1, side)
-	t_wait(getPerfectDelayDM(THICKNESS) * 6.0)
-	hmcSimpleCageS(rndspd, -1, oppositeSide)
-	t_wait(getPerfectDelayDM(THICKNESS) * 1.1)
-	hmcSimpleCageS(rndspd, -1, oppositeSide)
-	t_wait(getPerfectDelayDM(THICKNESS) * 1.1)
-	hmcSimpleCageS(rndspd, -1, oppositeSide)
-	t_wait(getPerfectDelayDM(THICKNESS) * 9.2)
-end
-
-function hmcSimpleBarrageSpiral(mTimes, mDelayMult, mStep, mCurve, mNeighbors)
-	delay = getPerfectDelayDM(THICKNESS) * 6.2 * mDelayMult
-	startSide = getRandomSide()
-	loopDir = mStep * getRandomDir()	
-	j = 0
-	
-	for i = 0, mTimes do
-		hmcSimpleBarrageSNeigh(startSide + j, mCurve, mNeighbors)
-		j = j + loopDir
-		t_wait(delay)
-		if(l_getSides() < 6) then t_wait(delay * 0.7) end
-	end
-	
-	t_wait(getPerfectDelayDM(THICKNESS) * 6.1)
-end
-
-function hmcSimpleBarrageSpiralRnd(mTimes, mDelayMult, mCurve, mNeighbors)
-	delay = getPerfectDelayDM(THICKNESS) * 6.2 * mDelayMult
-	startSide = getRandomSide()
-	
-	for i = 0, mTimes do
-		hmcSimpleBarrageSNeigh(getRandomSide(), mCurve, mNeighbors)
-		t_wait(delay)
-		if(l_getSides() < 6) then t_wait(delay * 0.7) end
-	end
-	
-	t_wait(getPerfectDelayDM(THICKNESS) * 6.1)
-end
-
-function hmcSimpleBarrageSpiralStatic(mTimes, mDelayMult, mStep, mCurve, mNeighbors)
-	delay = getPerfectDelay(THICKNESS) * 5.6 * mDelayMult
-	startSide = getRandomSide()
-	loopDir = mStep * getRandomDir()	
-	j = 0
-	
-	for i = 0, mTimes do
-		hmcSimpleBarrageSNeigh(startSide + j, mCurve, mNeighbors)
-		j = j + loopDir
-		t_wait(delay)
-		if(l_getSides() < 6) then t_wait(delay * 0.6) end
-	end
-	
-	t_wait(getPerfectDelayDM(THICKNESS) * 6.1)
-end
-
-function hmcDefBarrageSpiral()
-	hmcSimpleBarrageSpiral(math.random(1, 3), 1, 1, math.random(5, 15) / 10.0 * getRandomDir(), 0)
-end
-
-function hmcDefBarrageSpiralRnd()
-	hmcSimpleBarrageSpiralRnd(math.random(1, 3), 1, math.random(5, 15) / 10.0 * getRandomDir(), 0)
-end
-
-function hmcDefBarrageSpiralFast()
-	hmcSimpleBarrageSpiral(math.random(1, 3), 0.8, 1, math.random(5, 15) / 10.0 * getRandomDir(), 0)
-end
-
-function hmcDefBarrageSpiralSpin()
-	hmcSimpleBarrageSpiralStatic(math.random(7, 14), 0.25, 1, math.random(5, 18) / 10.0 * getRandomDir(), 2)
-end
-
-function hmcDefBarrageInv()
-	t_wait(getPerfectDelayDM(THICKNESS) * 2.0)
-	delay = getPerfectDelay(THICKNESS) * 5.6 
-	side = getRandomSide()
-	rndspd = math.random(10, 20) / 10.0
-	oppositeSide = getRandomSide() + getHalfSides()
-
-	hmcSimpleBarrageSNeigh(side, rndspd * getRandomDir(), 0)
-	t_wait(delay)
-
-	hmcSimpleBarrageSNeigh(oppositeSide, rndspd * getRandomDir(), 0)
-	t_wait(delay)
-end
-
-function hmcDefAccelBarrage()
-	t_wait(getPerfectDelayDM(THICKNESS) * 1.5)
-	c = math.random(50, 100) / 1000.0 * getRandomDir()
-	min = math.random(5, 35) / 10.0 * -1
-	max = math.random(5, 35) / 10.0
-	hmcBarrage(0, c, min, max, true)
-	t_wait(getPerfectDelayDM(THICKNESS) * 6.1)
-end
-
-function hmcDefAccelBarrageDouble()
-	t_wait(getPerfectDelayDM(THICKNESS) * 1.5)
-	c = math.random(50, 100) / 1000.0 * getRandomDir()
-	min = math.random(5, 35) / 10.0 * -1
-	max = math.random(5, 35) / 10.0
-	hmcBarrage(0, c, min, max, true)
-	t_wait(getPerfectDelayDM(THICKNESS) * 2.1)
-	hmcBarrage(0, c, min, max, true)
-	t_wait(getPerfectDelayDM(THICKNESS) * 6.1)
-end
-
-function hmcDefSpinnerSpiral()
-	t_wait(getPerfectDelayDM(THICKNESS) * 1.5)
-	side = getRandomSide()
-	c = math.random(10, 20) / 10.0 * getRandomDir()
-
-	t_wait(getPerfectDelayDM(THICKNESS) * 3.1)
-
-	for i = 0, math.random(4, 8) do
-		hmcSimpleSpinnerS(side, c)
-		t_wait(getPerfectDelayDM(THICKNESS) * 1.15)
-	end
-
-	t_wait(getPerfectDelayDM(THICKNESS) * 5)
-end
-
-function getRndMinDM(mNum)	
-	return math.random(math.floor(mNum - (u_getDifficultyMult() ^ 3)), math.ceil(mNum))
-end
-
-function getRndMaxDM(mNum)
-	return math.random(math.floor(mNum), math.ceil(mNum + (u_getDifficultyMult() ^ 2.25)))
-end
-
-function hmcDefSpinnerSpiralAcc()
-	t_wait(getPerfectDelayDM(THICKNESS) * 2.1)
-	t_wait(getPerfectDelayDM(THICKNESS) * 2.1)
-	side = getRandomSide()
-
-	acc = math.random(getRndMinDM(50), getRndMaxDM(100)) / 1000.0 * getRandomDir()
-	min = math.random(getRndMinDM(12), getRndMaxDM(28)) / 10.0 * -1
-	max = math.random(getRndMinDM(12), getRndMaxDM(28)) / 10.0
-
-	
-
-	t_wait(getPerfectDelayDM(THICKNESS) * 3.1)
-
-	for i = 0, math.random(4, 8) do
-		hmcSimpleSpinnerSAcc(side, 0, acc, min, max, true)
-		t_wait(getPerfectDelay(THICKNESS) * 0.8)
-	end
-
-	t_wait(getPerfectDelayDM(THICKNESS) * 5.3)
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Scripts/nextpatterns.lua b/_RELEASE/Packs/hypercube/Scripts/nextpatterns.lua
deleted file mode 100644
index 91877a0..0000000
--- a/_RELEASE/Packs/hypercube/Scripts/nextpatterns.lua
+++ /dev/null
@@ -1,158 +0,0 @@
-u_execScript("common.lua")
-u_execScript("commonpatterns.lua")
-u_execScript("utils.lua")
-u_execScript("alternativepatterns.lua")
-
-function wallSAdj(mSide, mAdj) w_wallAdj(mSide, THICKNESS, mAdj) end
-function wallSAcc(mSide, mAdj, mAcc, mMinSpd, mMaxSpd) w_wallAcc(mSide, THICKNESS, mAdj, mAcc * (u_getDifficultyMult()), mMinSpd, mMaxSpd) end
-
-function pTrapBarrage(mSide)
-	delay = getPerfectDelayDM(THICKNESS) * 3.7
-		
-	cBarrage(mSide)
-	t_wait(delay * 3)
-	wallSAdj(mSide, 1.9)
-
-	t_wait(delay * 2.5)
-end
-
-function pTrapBarrageDouble(mSide)
-	delay = getPerfectDelayDM(THICKNESS) * 3.7
-	side2 = mSide + getHalfSides();
-	
-	for i = 0, l_getSides() - 1 do
-		currentSide = mSide + i
-		if((currentSide ~= mSide) and (currentSide ~= side2)) then cWall(currentSide) end
-	end
-
-	t_wait(delay * 3)
-	wallSAdj(mSide, 1.9)
-	wallSAdj(side2, 1.9)
-	
-	t_wait(delay * 2.5)
-end
-
-function pTrapBarrageInverse(mSide)
-	delay = getPerfectDelayDM(THICKNESS) * 3.7
-	
-	cWall(mSide)	
-	t_wait(delay * 3)
-
-	for i = 0, l_getSides() - 1 do
-		currentSide = mSide + i
-		if(currentSide ~= mSide) then wallSAdj(currentSide, 1.9) end
-	end
-
-	t_wait(delay * 2.5)
-end
-
-function pTrapBarrageAlt(mSide)
-	delay = getPerfectDelayDM(THICKNESS) * 3.7
-
-	for i = 0, l_getSides() - 1 do
-		currentSide = mSide + i
-		if(currentSide % 2 ~= 0) then cWall(currentSide) end
-	end
-
-	t_wait(delay * 3)
-
-	for i = 0, l_getSides() - 1 do
-		currentSide = mSide + i
-		if(currentSide % 2 == 0) then wallSAdj(currentSide, 1.9) end
-	end
-
-	t_wait(delay * 2.5)
-end
-
-function pTrapSpiral(mSide)
-	delay = getPerfectDelayDM(THICKNESS) * 3.7
-	loopDir = getRandomDir()		
-
-	if(l_getSides() < 6) then delay = delay + 4 end
-
-	for i = 0, l_getSides() + getHalfSides() do
-		currentSide = (mSide + i) * loopDir
-		for j = 0, getHalfSides() do wallSAdj(currentSide + j, 1.2 + (i / 7.9)) end
-		t_wait((delay * 0.75) - (i * 0.45) + 3)
-	end
-
-	t_wait(delay * 2.5)
-end
-
-function pRCBarrage()
-	currentSides = l_getSides()
-	delay = getPerfectDelayDM(THICKNESS) * 3.7
-	startSide = math.random(0, 10)
-	for i = 0, currentSides - 2 do
-		currentSide = startSide + i
-		cWall(currentSide)
-	end
-	t_wait(delay * 2.5)
-end
-
-function pRCBarrageDouble()
-	currentSides = l_getSides()
-	delay = getPerfectDelayDM(THICKNESS) * 3.7
-	startSide = math.random(0, 10)
-	for i = 0, currentSides - 2 do
-		currentSide = startSide + i
-		holeSide = startSide + i + (currentSides / 2)
-		if(i ~= holeSide) then cWall(currentSide) end
-	end
-	t_wait(delay * 2.5)
-end
-
-function pRCBarrageSpin()
-	currentSides = l_getSides()
-	delay = getPerfectDelayDM(THICKNESS) * 3.7
-	startSide = math.random(0, 10)
-	loopDir = getRandomDir()
-	for j = 0, 2 do
-		for i = 0, currentSides - 2 do
-			currentSide = startSide + i
-			cWall(currentSide + (j * loopDir))
-		end
-		t_wait(delay + 1)
-	end
-	t_wait(delay * 2.5)
-end
-
-function pACBarrage()
-	currentSides = l_getSides()
-	delay = getPerfectDelayDM(THICKNESS) * 3.7
-	startSide = math.random(0, 10)
-	for i = 0, currentSides - 2 do
-		currentSide = startSide + i
-		wallSAcc(currentSide, 9 + math.random(0, 1), -1.1, 1, 12)
-	end
-	t_wait(delay * 2.5)
-end
-
-function pACBarrageMulti()
-	currentSides = l_getSides()
-	delay = getPerfectDelayDM(THICKNESS) * 3.7
-	startSide = math.random(0, 10)
-	for i = 0, currentSides - 2 do
-		currentSide = startSide + i
-		wallSAcc(currentSide, 10, -1.09, 0.31, 10)
-		wallSAcc(currentSide, 0, 0.05, 0, 4.0)
-		wallSAcc(currentSide, 0, 0.09, 0, 4.0)
-		wallSAcc(currentSide, 0, 0.12, 0, 4.0)
-	end
-	t_wait(delay * 8)
-end
-
-function pACBarrageMultiAltDir()
-	currentSides = l_getSides()
-	delay = getPerfectDelayDM(THICKNESS) * 4
-	mdiff = 1 + math.abs(1 - u_getDifficultyMult())
-	startSide = math.random(0, 10)
-	loopDir = getRandomDir()
-	for i = 0, currentSides + getHalfSides() do
-		currentSide = startSide + i * loopDir
-		wallSAcc(currentSide, 10, -1.095, 0.40, 10)
-		t_wait((delay / 2.21) * (mdiff * 1.29))
-		wallSAcc(currentSide + (getHalfSides() * loopDir), 0, 0.128, 0, 1.4)
-	end
-	t_wait(delay * 8)
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Scripts/utils.lua b/_RELEASE/Packs/hypercube/Scripts/utils.lua
deleted file mode 100644
index 300f63c..0000000
--- a/_RELEASE/Packs/hypercube/Scripts/utils.lua
+++ /dev/null
@@ -1,28 +0,0 @@
--- initialize random seed
-math.randomseed(os.time())
-math.random()
-math.random()
-math.random()
-
--- shuffle: shuffles an array
-function shuffle(t)
-	math.randomseed(os.time())
-	local iterations = #t
-	local j
-	for i = iterations, 2, -1 do
-			j = math.random(i)
-			t[i], t[j] = t[j], t[i]
-	end
-	
-	return t
-end
-
--- clamp: clamps a number between two values
-function clamp(input, min_val, max_val)
-	if input < min_val then
-		input = min_val
-	elseif input > max_val then
-		input = max_val
-	end
-	return input
-end
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Styles/acceleradiant.json b/_RELEASE/Packs/hypercube/Styles/acceleradiant.json
deleted file mode 100644
index b8ab7fb..0000000
--- a/_RELEASE/Packs/hypercube/Styles/acceleradiant.json
+++ /dev/null
@@ -1,33 +0,0 @@
-{
-	// Style data id
-	"id": "acceleradiant",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 360,
-	"hue_ping_pong": false,
-	"hue_increment": 0.5,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 1.5,
-	"pulse_increment": 0.025,
-
-	// 3D options
-	"3D_depth": 3,
-	"3D_skew": 0.17,
-	"3D_spacing": 153.5,
-	"3D_darken_multiplier": 1.5,
-	"3D_alpha_multiplier": 5.9,
-	"3D_alpha_falloff": 16.0,
-
-	// Main color
-	"main": { "main": true, "dynamic": true, "value": [255, 155, 155, 230], "pulse": [50, -75, 125, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 8.7, "value": [0, 0, 0, 0], "pulse": [45, 25, 1, 0]},
-		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 9.5, "value": [0, 0, 0, 0], "pulse": [1, 25, 45, 0]}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Styles/centrifugal.json b/_RELEASE/Packs/hypercube/Styles/centrifugal.json
deleted file mode 100644
index 90dae63..0000000
--- a/_RELEASE/Packs/hypercube/Styles/centrifugal.json
+++ /dev/null
@@ -1,33 +0,0 @@
-{
-	// Style data id
-	"id": "centrifugal",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 255,
-	"hue_ping_pong": false,
-	"hue_increment": 1.0,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 1.5,
-	"pulse_increment": 0.025,
-
-	// 3D options
-	"3D_depth": 3,
-	"3D_skew": 0.20,
-	"3D_spacing": 19.5,
-	"3D_darken_multiplier": 1.5,
-	"3D_alpha_multiplier": 5.9,
-	"3D_alpha_falloff": 66.0,
-	"3D_override_color": [76, 76, 66, 55],
-	
-	// Main color
-	"main": { "main": true, "dynamic": true, "value": [190, 190, 190, 225], "pulse": [99, 30, 165, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 3.0, "value": [0, 0, 0, 255], "pulse": [10, 0, 0, 0], "offset": 0.2, "hue_shift": 0.0}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Styles/disc-o.json b/_RELEASE/Packs/hypercube/Styles/disc-o.json
deleted file mode 100644
index 498a486..0000000
--- a/_RELEASE/Packs/hypercube/Styles/disc-o.json
+++ /dev/null
@@ -1,33 +0,0 @@
-{
-	// Style data id
-	"id": "disc-o",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 360,
-	"hue_ping_pong": true,
-	"hue_increment": 1.0,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 0.5,
-	"pulse_increment": 0.025,
-
-	// 3D options
-	"3D_depth": 7,
-	"3D_skew": 0.15,
-	"3D_spacing": 1.5,
-	"3D_darken_multiplier": 1.5,
-	"3D_alpha_multiplier": 0.5,
-	"3D_alpha_falloff": 19.0,
-	
-	// Main color
-	"main": { "main": true, "dynamic": true, "value": [0, 0, 0, 0], "pulse": [25, 25, 25, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 0.0, "value": [80, 75, 75, 255], "pulse": [15, 15, 15, 35]},
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 0.0, "value": [45, 45, 45, 255], "pulse": [22, 25, 15, 25]}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Styles/evotutorial.json b/_RELEASE/Packs/hypercube/Styles/evotutorial.json
deleted file mode 100644
index 5932c91..0000000
--- a/_RELEASE/Packs/hypercube/Styles/evotutorial.json
+++ /dev/null
@@ -1,33 +0,0 @@
-{
-	// Style data id
-	"id": "evotutorial",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 140,
-	"hue_ping_pong": true,
-	"hue_increment": 1.0,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 0.5,
-	"pulse_increment": 0.025,
-
-	// 3D options
-	"3D_depth": 7,
-	"3D_skew": 0.15,
-	"3D_spacing": 1.5,
-	"3D_darken_multiplier": 1.5,
-	"3D_alpha_multiplier": 0.5,
-	"3D_alpha_falloff": 19.0,
-	
-	// Main color
-	"main": { "main": true, "dynamic": false, "value": [45, 25, 25, 255], "pulse": [25, 25, 50, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [15, 15, 15, 0], "offset": 4.7},
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [235, 235, 235, 255], "pulse": [0, 0, 0, 0]}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Styles/g-force.json b/_RELEASE/Packs/hypercube/Styles/g-force.json
deleted file mode 100644
index bec6f3a..0000000
--- a/_RELEASE/Packs/hypercube/Styles/g-force.json
+++ /dev/null
@@ -1,33 +0,0 @@
-{
-	// Style data id
-	"id": "g-force",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 360,
-	"hue_ping_pong": true,
-	"hue_increment": 1.0,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 0.5,
-	"pulse_increment": 0.025,
-
-	// 3D options
-	"3D_depth": 7,
-	"3D_skew": 0.15,
-	"3D_spacing": 1.5,
-	"3D_darken_multiplier": 1.5,
-	"3D_alpha_multiplier": 0.5,
-	"3D_alpha_falloff": 19.0,
-	
-	// Main color
-	"main": { "main": false, "dynamic": false, "value": [245, 245, 245, 245], "pulse": [25, 25, 25, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 2.7, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]},
-		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 3.5, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Styles/incongruence.json b/_RELEASE/Packs/hypercube/Styles/incongruence.json
deleted file mode 100644
index f5d7269..0000000
--- a/_RELEASE/Packs/hypercube/Styles/incongruence.json
+++ /dev/null
@@ -1,32 +0,0 @@
-{
-	// Style data id
-	"id": "incongruence",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 360,
-	"hue_ping_pong": false,
-	"hue_increment": 0.5,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 1.5,
-	"pulse_increment": 0.025,
-
-	// 3D options
-	"3D_depth": 3,
-	"3D_skew": 0.20,
-	"3D_spacing": 253.5,
-	"3D_darken_multiplier": 1.5,
-	"3D_alpha_multiplier": 5.9,
-	"3D_alpha_falloff": 16.0,
-
-	// Main color
-	"main": { "main": true, "dynamic": true, "value": [255, 155, 155, 230], "pulse": [50, -75, 125, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Styles/massacre.json b/_RELEASE/Packs/hypercube/Styles/massacre.json
deleted file mode 100644
index acc7b25..0000000
--- a/_RELEASE/Packs/hypercube/Styles/massacre.json
+++ /dev/null
@@ -1,34 +0,0 @@
-{
-	// Style data id
-	"id": "massacre",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 360,
-	"hue_ping_pong": false,
-	"hue_increment": 1.0,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 1.8,
-	"pulse_increment": 0.027,
-
-	// 3D options
-	"3D_depth": 12,
-	"3D_skew": 0.15,
-	"3D_spacing": 2.1,
-	"3D_darken_multiplier": 1.1,
-	"3D_alpha_multiplier": 0.4,
-	"3D_alpha_falloff": 1.0,
-	"3D_override_color": [166, 166, 166, 255],
-	
-	// Main color
-	"main": { "main": true, "dynamic": false, "value": [253, 253, 200, 255], "pulse": [0, 0, 0, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [0, 73, 73, 255], "pulse": [0, 0, 0, 0]},
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [11, 11, 11, 255], "pulse": [0, 0, 0, 0]}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Styles/polyhedrug.json b/_RELEASE/Packs/hypercube/Styles/polyhedrug.json
deleted file mode 100644
index 894a5bc..0000000
--- a/_RELEASE/Packs/hypercube/Styles/polyhedrug.json
+++ /dev/null
@@ -1,33 +0,0 @@
-{
-	// Style data id
-	"id": "polyhedrug",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 360,
-	"hue_ping_pong": false,
-	"hue_increment": 0.5,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 1.5,
-	"pulse_increment": 0.025,
-
-	// 3D options
-	"3D_depth": 3,
-	"3D_skew": 0.20,
-	"3D_spacing": 453.5,
-	"3D_darken_multiplier": 1.5,
-	"3D_alpha_multiplier": 5.9,
-	"3D_alpha_falloff": 16.0,
-
-	// Main color
-	"main": { "main": true, "dynamic": true, "value": [255, 0, 0, 255], "pulse": [-80, 75, 65, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 8.7, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]},
-		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 9.5, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Styles/reppaws.json b/_RELEASE/Packs/hypercube/Styles/reppaws.json
deleted file mode 100644
index 3c38912..0000000
--- a/_RELEASE/Packs/hypercube/Styles/reppaws.json
+++ /dev/null
@@ -1,31 +0,0 @@
-{
-	// Style data id
-	"id": "reppaws",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 255,
-	"hue_ping_pong": false,
-	"hue_increment": 1.0,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 1.5,
-	"pulse_increment": 0.025,
-
-	// 3D options
-	"3D_depth": 2,
-	"3D_skew": 0.15,
-	"3D_spacing": 5.5,
-
-	// Main color
-	"main": { "main": true, "dynamic": true, "value": [0, 0, 0, 225], "pulse": [99, 30, 165, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": false, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [63, 60, 60, 255], "pulse": [10, 0, 0, 0], "offset": 4.2, "hue_shift": 25.0},
-		{ "dynamic": false, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [75, 75, 75, 255], "pulse": [0, 10, 0, 0], "offset": 4.2, "hue_shift": 50.0},
-		{ "dynamic": false, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [87, 95, 90, 255], "pulse": [0, 0, 10, 0], "offset": 4.2, "hue_shift": 75.0}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/Styles/slither.json b/_RELEASE/Packs/hypercube/Styles/slither.json
deleted file mode 100644
index 5abdda6..0000000
--- a/_RELEASE/Packs/hypercube/Styles/slither.json
+++ /dev/null
@@ -1,33 +0,0 @@
-{
-	// Style data id
-	"id": "slither",
-
-	// Hue options
-	"hue_min": 0,
-	"hue_max": 360,
-	"hue_ping_pong": true,
-	"hue_increment": 1.0,
-	
-	// Pulse options
-	"pulse_min": 0.0,
-	"pulse_max": 0.5,
-	"pulse_increment": 0.025,
-
-	// 3D options
-	"3D_depth": 7,
-	"3D_skew": 0.15,
-	"3D_spacing": 1.5,
-	"3D_darken_multiplier": 1.5,
-	"3D_alpha_multiplier": 0.5,
-	"3D_alpha_falloff": 19.0,
-	
-	// Main color
-	"main": { "main": true, "dynamic": false, "value": [230, 230, 230, 230], "pulse": [25, 25, 25, 0] },
-
-	// Background colors
-	"colors":
-	[
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 0.0, "value": [80, 125, 75, 255], "pulse": [15, 45, 15, 35]},
-		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 0.0, "value": [45, 90, 45, 255], "pulse": [22, 45, 15, 25]}
-	]
-}
\ No newline at end of file
diff --git a/_RELEASE/Packs/hypercube/pack.json b/_RELEASE/Packs/hypercube/pack.json
deleted file mode 100644
index 715bb6f..0000000
--- a/_RELEASE/Packs/hypercube/pack.json
+++ /dev/null
@@ -1,4 +0,0 @@
-{
-	"name": "hypercube",
-	"priority": -15000
-}
\ No newline at end of file
diff --git a/_RELEASE/config.json b/_RELEASE/config.json
index 71b0e92..9fd5f8f 100644
--- a/_RELEASE/config.json
+++ b/_RELEASE/config.json
@@ -4,13 +4,13 @@
 	"3D_max_depth" : 100,
 	"3D_multiplier" : 1.0,
 	"antialiasing_level" : 3,
-	"auto_restart" : false,
+	"auto_restart" : true,
 	"auto_zoom_factor" : true,
-	"beatpulse_enabled" : true,
+	"beatpulse_enabled" : false,
 	"black_and_white" : false,
 	"debug" : false,
 	"draw_text_outlines" : false,
-	"flash_enabled" : true,
+	"flash_enabled" : false,
 	"fullscreen" : true,
 	"fullscreen_auto_resolution" : false,
 	"fullscreen_height" : 1080,
@@ -23,23 +23,23 @@
 	"music_speed_mult" : 1.0,
 	"music_volume" : 30.0,
 	"no_background" : false,
-	"no_music" : false,
+	"no_music" : true,
 	"no_rotation" : false,
 	"no_sound" : false,
 	"official" : false,
-	"online" : true,
+	"online" : false,
 	"pixel_multiplier" : 1,
 	"player_focus_speed" : 4.6250,
 	"player_size" : 7.300000190734863,
 	"player_speed" : 9.449999809265137,
-	"pulse_enabled" : true,
-	"rotate_to_start" : true,
+	"pulse_enabled" : false,
+	"rotate_to_start" : false,
 	"server_local" : true,
 	"server_verbose" : true,
-	"show_fps" : true,
+	"show_fps" : false,
 	"show_messages" : true,
 	"show_tracked_variables" : true,
-	"sound_volume" : 75.0,
+	"sound_volume" : 100.0,
 	"t_down" : 
 	[
 		[ "kDown" ],
diff --git a/extlibs/mingw-std-threads b/extlibs/mingw-std-threads
index 3a5361a..d86b1c5 160000
--- a/extlibs/mingw-std-threads
+++ b/extlibs/mingw-std-threads
@@ -1 +1 @@
-Subproject commit 3a5361a3e9308ce854dd2761d2a9416e21ad489d
+Subproject commit d86b1c52af6ebf2ac54848b6426f40497ec68c52
diff --git a/extlibs/vrm_pp b/extlibs/vrm_pp
index 54ef292..ece2aa6 160000
--- a/extlibs/vrm_pp
+++ b/extlibs/vrm_pp
@@ -1 +1 @@
-Subproject commit 54ef292862029cb0265db335dd3694241d8e2079
+Subproject commit ece2aa6743c980e168bef63a4082498ca37f901d
diff --git a/src/SSVOpenHexagon/Components/CPlayer.cpp b/src/SSVOpenHexagon/Components/CPlayer.cpp
index c21e459..abe0218 100644
--- a/src/SSVOpenHexagon/Components/CPlayer.cpp
+++ b/src/SSVOpenHexagon/Components/CPlayer.cpp
@@ -129,16 +129,16 @@ namespace hg
         Vec2f pLeftCheck{getOrbitRad(tempPos, angle - ssvu::piHalf, 0.01f)};
         Vec2f pRightCheck{getOrbitRad(tempPos, angle + ssvu::piHalf, 0.01f)};
 
-        for(auto& wall : hexagonGame->walls)
+        for(const auto& wall : hexagonGame->walls)
         {
             if((movement == -1 && wall.isOverlapping(pLeftCheck)) ||
                 (movement == 1 && wall.isOverlapping(pRightCheck)))
                 angle = lastAngle;
             if(wall.isOverlapping(pos))
             {
-        		    printf("#wall crushed#\n");
-        		    fflush(stdout);
-            		wall.remove();
+        		    //printf("#wall crushed#\n");
+        		    //fflush(stdout);
+            		//wall.remove();
                 deadEffectTimer.restart();
                 //if(!Config::getInvincible()) dead = true;
                 //dead = true;
-- 
2.11.0


From 9d5a0c7f1360bb188c9b2e8871614856d8935805 Mon Sep 17 00:00:00 2001
From: Tobias Polly <uzeca@student.kit.edu>
Date: Thu, 23 Aug 2018 21:27:36 +0200
Subject: [PATCH 3/5] made level better

---
 _RELEASE/config.json                        |  2 +-
 include/SSVOpenHexagon/Core/HexagonGame.hpp |  5 +++++
 src/SSVOpenHexagon/Components/CPlayer.cpp   | 13 ++++---------
 src/SSVOpenHexagon/Components/CWall.cpp     |  1 +
 src/SSVOpenHexagon/Core/HGGraphics.cpp      |  2 ++
 src/SSVOpenHexagon/Core/HexagonGame.cpp     | 19 +++----------------
 6 files changed, 16 insertions(+), 26 deletions(-)

diff --git a/_RELEASE/config.json b/_RELEASE/config.json
index 9fd5f8f..17aa3bb 100644
--- a/_RELEASE/config.json
+++ b/_RELEASE/config.json
@@ -22,7 +22,7 @@
 	"music_speed_dm_sync" : true,
 	"music_speed_mult" : 1.0,
 	"music_volume" : 30.0,
-	"no_background" : false,
+	"no_background" : true,
 	"no_music" : true,
 	"no_rotation" : false,
 	"no_sound" : false,
diff --git a/include/SSVOpenHexagon/Core/HexagonGame.hpp b/include/SSVOpenHexagon/Core/HexagonGame.hpp
index f283923..60fae45 100644
--- a/include/SSVOpenHexagon/Core/HexagonGame.hpp
+++ b/include/SSVOpenHexagon/Core/HexagonGame.hpp
@@ -29,6 +29,7 @@ namespace hg
     private:
         HGAssets& assets;
         const LevelData* levelData;
+        int deaths;
 
         ssvs::GameState game;
         ssvs::GameWindow& window;
@@ -170,6 +171,10 @@ namespace hg
         {
             return game;
         }
+        inline int getDeaths() noexcept
+        {
+            return deaths;
+        }
         inline float getRadius() const noexcept
         {
             return status.radius;
diff --git a/src/SSVOpenHexagon/Components/CPlayer.cpp b/src/SSVOpenHexagon/Components/CPlayer.cpp
index abe0218..a3aa064 100644
--- a/src/SSVOpenHexagon/Components/CPlayer.cpp
+++ b/src/SSVOpenHexagon/Components/CPlayer.cpp
@@ -129,22 +129,17 @@ namespace hg
         Vec2f pLeftCheck{getOrbitRad(tempPos, angle - ssvu::piHalf, 0.01f)};
         Vec2f pRightCheck{getOrbitRad(tempPos, angle + ssvu::piHalf, 0.01f)};
 
-        for(const auto& wall : hexagonGame->walls)
+        for(auto& wall : hexagonGame->walls)
         {
             if((movement == -1 && wall.isOverlapping(pLeftCheck)) ||
                 (movement == 1 && wall.isOverlapping(pRightCheck)))
                 angle = lastAngle;
             if(wall.isOverlapping(pos))
             {
-        		    //printf("#wall crushed#\n");
-        		    //fflush(stdout);
-            		//wall.remove();
+        		    printf("#wall crushed#\n");
+        		    fflush(stdout);
+            		wall.remove();
                 deadEffectTimer.restart();
-                //if(!Config::getInvincible()) dead = true;
-                //dead = true;
-                moveTowards(
-                    lastPos, ssvs::zeroVec2f, 5 * hexagonGame->getSpeedMultDM());
-                pos = lastPos;
                 hexagonGame->death();
                 return;
             }
diff --git a/src/SSVOpenHexagon/Components/CWall.cpp b/src/SSVOpenHexagon/Components/CWall.cpp
index 4803487..c0d16a5 100644
--- a/src/SSVOpenHexagon/Components/CWall.cpp
+++ b/src/SSVOpenHexagon/Components/CWall.cpp
@@ -30,6 +30,7 @@ namespace hg
         vertexPositions[3] = getOrbitRad(centerPos,
             angle - div + hexagonGame->getWallAngleRight(),
             distance + thickness + hexagonGame->getWallSkewRight());
+        removed = false;
     }
 
     void CWall::draw()
diff --git a/src/SSVOpenHexagon/Core/HGGraphics.cpp b/src/SSVOpenHexagon/Core/HGGraphics.cpp
index e80d255..26a7a98 100644
--- a/src/SSVOpenHexagon/Core/HGGraphics.cpp
+++ b/src/SSVOpenHexagon/Core/HGGraphics.cpp
@@ -152,6 +152,8 @@ namespace hg
             os << "tutorial mode\n";
         else if(Config::getOfficial())
             os << "official mode\n";
+            
+        os << "deaths: " << toStr(getDeaths()) << "\n";
 
         if(Config::getDebug()) os << "debug mode\n";
 
diff --git a/src/SSVOpenHexagon/Core/HexagonGame.cpp b/src/SSVOpenHexagon/Core/HexagonGame.cpp
index 8216355..a7e7f68 100644
--- a/src/SSVOpenHexagon/Core/HexagonGame.cpp
+++ b/src/SSVOpenHexagon/Core/HexagonGame.cpp
@@ -28,6 +28,7 @@ namespace hg
     HexagonGame::HexagonGame(HGAssets& mAssets, GameWindow& mGameWindow)
         : assets(mAssets), window(mGameWindow), player{*this, ssvs::zeroVec2f}, fpsWatcher(window) 
     {
+    		deaths = 0;
         game.onUpdate += [this](FT mFT)
         {
             update(mFT);
@@ -145,20 +146,12 @@ namespace hg
         overlayCamera.setSkew(ssvs::Vec2f{1.f, 1.f});
         backgroundCamera.setSkew(ssvs::Vec2f{1.f, 1.f});
     }
+    
     void HexagonGame::death(bool mForce)
     {
-        fpsWatcher.disable();
+    		deaths++;
         assets.playSound("death.ogg", SoundPlayer::Mode::Abort);
 
-        if(!mForce && (Config::getInvincible() || levelStatus.tutorialMode))
-            return;
-        //assets.playSound("gameOver.ogg", SoundPlayer::Mode::Abort);
-
-        if(!assets.pIsLocal() && Config::isEligibleForScore())
-        {
-            Online::trySendDeath();
-        }
-
         status.flashEffect = 255;
         overlayCamera.setView(
             {{Config::getWidth() / 2.f, Config::getHeight() / 2.f},
@@ -166,12 +159,6 @@ namespace hg
         backgroundCamera.setCenter(ssvs::zeroVec2f);
         shakeCamera(effectTimelineManager, overlayCamera);
         shakeCamera(effectTimelineManager, backgroundCamera);
-
-        //status.hasDied = true;
-        //stopLevelMusic();
-        //checkAndSaveScore();
-
-        if(Config::getAutoRestart()) status.mustRestart = true;
     }
 
     void HexagonGame::incrementDifficulty()
-- 
2.11.0


From 7cfee53af6049c2e47cbb82b3171914032921880 Mon Sep 17 00:00:00 2001
From: Tobias Polly <uzeca@student.kit.edu>
Date: Mon, 19 Nov 2018 13:41:25 +0100
Subject: [PATCH 4/5] Add info to Readme

---
 README.md                               | 9 +++++++++
 src/SSVOpenHexagon/Core/HexagonGame.cpp | 2 +-
 2 files changed, 10 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index a0e7712..546398d 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,12 @@
+# This is a patched version of Open Hexagon to use in a user study.
+
+Original: https://github.com/SuperV1234/SSVOpenHexagon
+Patch file to replay the changes: phl-patch.patch
+
+This directory is already configured for building on Debian Linux. You may need to reconfigure.
+
+
+
 ## [Open Hexagon 2.0](http://www.facebook.com/OpenHexagon) - [by Vittorio Romeo](http://vittorioromeo.info)
 
 ---
diff --git a/src/SSVOpenHexagon/Core/HexagonGame.cpp b/src/SSVOpenHexagon/Core/HexagonGame.cpp
index a7e7f68..f1fabcd 100644
--- a/src/SSVOpenHexagon/Core/HexagonGame.cpp
+++ b/src/SSVOpenHexagon/Core/HexagonGame.cpp
@@ -299,7 +299,7 @@ namespace hg
     }
     void HexagonGame::setSides(unsigned int mSides)
     {
-        //assets.playSound("beep.ogg");
+        assets.playSound("beep.ogg");
         if(mSides < 3) mSides = 3;
         levelStatus.sides = mSides;
     }
-- 
2.11.0


From e4538be21c9fd4e58389aeb7fd21c84503fe6dc2 Mon Sep 17 00:00:00 2001
From: Tobias Polly <uzeca@student.kit.edu>
Date: Mon, 19 Nov 2018 14:01:27 +0100
Subject: [PATCH 5/5] Add packs

---
 _RELEASE/Packs-orig/cube/Levels/apeirogon.json     |  12 +
 _RELEASE/Packs-orig/cube/Levels/babysteps.json     |  11 +
 _RELEASE/Packs-orig/cube/Levels/commando.json      |  12 +
 _RELEASE/Packs-orig/cube/Levels/euclideanpc.json   |  12 +
 .../Packs-orig/cube/Levels/flatteringshape.json    |  12 +
 _RELEASE/Packs-orig/cube/Levels/goldenratio.json   |  12 +
 _RELEASE/Packs-orig/cube/Levels/labyrinth.json     |  12 +
 _RELEASE/Packs-orig/cube/Levels/pi.json            |  12 +
 _RELEASE/Packs-orig/cube/Levels/pointless.json     |  12 +
 .../Packs-orig/cube/Levels/seconddimension.json    |  12 +
 _RELEASE/Packs-orig/cube/Music/callMeKatla.json    |  20 ++
 _RELEASE/Packs-orig/cube/Music/captainCool.json    |  20 ++
 _RELEASE/Packs-orig/cube/Music/commandoSteve.json  |  19 ++
 .../Packs-orig/cube/Music/drFinkelfracken.json     |  21 ++
 _RELEASE/Packs-orig/cube/Music/jackRussel.json     |  21 ++
 .../Packs-orig/cube/Music/mazeOfMayonnaise.json    |  20 ++
 _RELEASE/Packs-orig/cube/Music/milkyWays.json      |  20 ++
 .../Packs-orig/cube/Music/starshipShowdown.json    |  19 ++
 .../Packs-orig/cube/Music/steampunkWarlord.json    |  20 ++
 .../Packs-orig/cube/Scripts/Levels/apeirogon.lua   |  92 +++++++
 .../Packs-orig/cube/Scripts/Levels/babysteps.lua   |  78 ++++++
 .../Packs-orig/cube/Scripts/Levels/commando.lua    |  71 +++++
 .../Packs-orig/cube/Scripts/Levels/euclideanpc.lua |  87 ++++++
 .../cube/Scripts/Levels/flatteringshape.lua        |  79 ++++++
 .../Packs-orig/cube/Scripts/Levels/goldenratio.lua |  73 +++++
 .../Packs-orig/cube/Scripts/Levels/labyrinth.lua   |  74 +++++
 _RELEASE/Packs-orig/cube/Scripts/Levels/pi.lua     |  88 ++++++
 .../Packs-orig/cube/Scripts/Levels/pointless.lua   |  78 ++++++
 .../cube/Scripts/Levels/seconddimension.lua        |  87 ++++++
 .../cube/Scripts/alternativepatterns.lua           | 119 ++++++++
 _RELEASE/Packs-orig/cube/Scripts/common.lua        | 114 ++++++++
 .../Packs-orig/cube/Scripts/commonpatterns.lua     | 196 ++++++++++++++
 _RELEASE/Packs-orig/cube/Scripts/utils.lua         |  28 ++
 _RELEASE/Packs-orig/cube/Styles/apeirogon.json     |  30 ++
 _RELEASE/Packs-orig/cube/Styles/babysteps.json     |  34 +++
 _RELEASE/Packs-orig/cube/Styles/commando.json      |  36 +++
 _RELEASE/Packs-orig/cube/Styles/dangertest.json    |  34 +++
 _RELEASE/Packs-orig/cube/Styles/euclideanpc.json   |  34 +++
 .../Packs-orig/cube/Styles/flatteringshape.json    |  30 ++
 _RELEASE/Packs-orig/cube/Styles/goldenratio.json   |  34 +++
 _RELEASE/Packs-orig/cube/Styles/labyrinth.json     |  33 +++
 _RELEASE/Packs-orig/cube/Styles/pi.json            |  34 +++
 _RELEASE/Packs-orig/cube/Styles/pointless.json     |  30 ++
 .../Packs-orig/cube/Styles/seconddimension.json    |  34 +++
 _RELEASE/Packs-orig/cube/pack.json                 |   4 +
 .../Packs-orig/hypercube/Levels/acceleradiant.json |  12 +
 .../Packs-orig/hypercube/Levels/centrifugal.json   |  12 +
 _RELEASE/Packs-orig/hypercube/Levels/disc-o.json   |  12 +
 .../Packs-orig/hypercube/Levels/evotutorial.json   |  11 +
 _RELEASE/Packs-orig/hypercube/Levels/g-force.json  |  12 +
 .../Packs-orig/hypercube/Levels/incongruence.json  |  12 +
 _RELEASE/Packs-orig/hypercube/Levels/massacre.json |  12 +
 .../Packs-orig/hypercube/Levels/polyhedrug.json    |  12 +
 _RELEASE/Packs-orig/hypercube/Levels/reppaws.json  |  12 +
 _RELEASE/Packs-orig/hypercube/Levels/slither.json  |  12 +
 _RELEASE/Packs-orig/hypercube/Music/cpumood.json   |  20 ++
 _RELEASE/Packs-orig/hypercube/Music/dischipo.json  |  20 ++
 .../Packs-orig/hypercube/Music/flirtFlirt.json     |  21 ++
 _RELEASE/Packs-orig/hypercube/Music/gmoomh.json    |  20 ++
 .../Packs-orig/hypercube/Music/johnnyDerp.json     |  20 ++
 .../Packs-orig/hypercube/Music/massacrev2.json     |  20 ++
 _RELEASE/Packs-orig/hypercube/Music/minimal.json   |  20 ++
 _RELEASE/Packs-orig/hypercube/Music/mrGawne.json   |  20 ++
 _RELEASE/Packs-orig/hypercube/Music/pep.json       |  20 ++
 _RELEASE/Packs-orig/hypercube/Music/tengil.json    |  19 ++
 .../hypercube/Scripts/Levels/acceleradiant.lua     |  92 +++++++
 .../hypercube/Scripts/Levels/centrifugal.lua       |  66 +++++
 .../Packs-orig/hypercube/Scripts/Levels/disc-o.lua | 105 +++++++
 .../hypercube/Scripts/Levels/disc-o.lua.orig       | 105 +++++++
 .../hypercube/Scripts/Levels/evotutorial.lua       | 178 ++++++++++++
 .../hypercube/Scripts/Levels/g-force.lua           | 122 +++++++++
 .../hypercube/Scripts/Levels/incongruence.lua      | 103 +++++++
 .../hypercube/Scripts/Levels/massacre.lua          | 129 +++++++++
 .../hypercube/Scripts/Levels/polyhedrug.lua        | 109 ++++++++
 .../hypercube/Scripts/Levels/reppaws.lua           |  86 ++++++
 .../hypercube/Scripts/Levels/slither.lua           | 110 ++++++++
 .../hypercube/Scripts/alternativepatterns.lua      | 119 ++++++++
 _RELEASE/Packs-orig/hypercube/Scripts/common.lua   | 114 ++++++++
 .../hypercube/Scripts/commonpatterns.lua           | 196 ++++++++++++++
 .../hypercube/Scripts/evolutionpatterns.lua        | 301 +++++++++++++++++++++
 .../Packs-orig/hypercube/Scripts/nextpatterns.lua  | 158 +++++++++++
 _RELEASE/Packs-orig/hypercube/Scripts/utils.lua    |  28 ++
 .../Packs-orig/hypercube/Styles/acceleradiant.json |  33 +++
 .../Packs-orig/hypercube/Styles/centrifugal.json   |  33 +++
 _RELEASE/Packs-orig/hypercube/Styles/disc-o.json   |  33 +++
 .../Packs-orig/hypercube/Styles/evotutorial.json   |  33 +++
 _RELEASE/Packs-orig/hypercube/Styles/g-force.json  |  33 +++
 .../Packs-orig/hypercube/Styles/incongruence.json  |  32 +++
 _RELEASE/Packs-orig/hypercube/Styles/massacre.json |  34 +++
 .../Packs-orig/hypercube/Styles/polyhedrug.json    |  33 +++
 _RELEASE/Packs-orig/hypercube/Styles/reppaws.json  |  31 +++
 _RELEASE/Packs-orig/hypercube/Styles/slither.json  |  33 +++
 _RELEASE/Packs-orig/hypercube/pack.json            |   4 +
 _RELEASE/Packs/test/Levels/apeirogon.json          |  12 +
 _RELEASE/Packs/test/Levels/babysteps.json          |  11 +
 _RELEASE/Packs/test/Levels/commando.json           |  12 +
 _RELEASE/Packs/test/Levels/euclideanpc.json        |  12 +
 _RELEASE/Packs/test/Levels/flatteringshape.json    |  12 +
 _RELEASE/Packs/test/Levels/goldenratio.json        |  12 +
 _RELEASE/Packs/test/Levels/labyrinth.json          |  12 +
 _RELEASE/Packs/test/Levels/pi.json                 |  12 +
 _RELEASE/Packs/test/Levels/pointless.json          |  12 +
 _RELEASE/Packs/test/Levels/seconddimension.json    |  12 +
 _RELEASE/Packs/test/Music/callMeKatla.json         |  20 ++
 _RELEASE/Packs/test/Music/captainCool.json         |  20 ++
 _RELEASE/Packs/test/Music/commandoSteve.json       |  19 ++
 _RELEASE/Packs/test/Music/drFinkelfracken.json     |  21 ++
 _RELEASE/Packs/test/Music/jackRussel.json          |  21 ++
 _RELEASE/Packs/test/Music/mazeOfMayonnaise.json    |  20 ++
 _RELEASE/Packs/test/Music/milkyWays.json           |  20 ++
 _RELEASE/Packs/test/Music/starshipShowdown.json    |  19 ++
 _RELEASE/Packs/test/Music/steampunkWarlord.json    |  20 ++
 _RELEASE/Packs/test/Scripts/Levels/apeirogon.lua   |  92 +++++++
 _RELEASE/Packs/test/Scripts/Levels/babysteps.lua   |  78 ++++++
 _RELEASE/Packs/test/Scripts/Levels/commando.lua    |  71 +++++
 _RELEASE/Packs/test/Scripts/Levels/euclideanpc.lua |  87 ++++++
 .../Packs/test/Scripts/Levels/flatteringshape.lua  |  79 ++++++
 _RELEASE/Packs/test/Scripts/Levels/goldenratio.lua |  73 +++++
 _RELEASE/Packs/test/Scripts/Levels/labyrinth.lua   |  74 +++++
 _RELEASE/Packs/test/Scripts/Levels/pi.lua          |  88 ++++++
 _RELEASE/Packs/test/Scripts/Levels/pointless.lua   |  79 ++++++
 .../Packs/test/Scripts/Levels/seconddimension.lua  |  87 ++++++
 .../Packs/test/Scripts/alternativepatterns.lua     | 119 ++++++++
 _RELEASE/Packs/test/Scripts/common.lua             | 114 ++++++++
 _RELEASE/Packs/test/Scripts/commonpatterns.lua     | 213 +++++++++++++++
 _RELEASE/Packs/test/Scripts/utils.lua              |  28 ++
 _RELEASE/Packs/test/Styles/apeirogon.json          |  30 ++
 _RELEASE/Packs/test/Styles/babysteps.json          |  34 +++
 _RELEASE/Packs/test/Styles/commando.json           |  36 +++
 _RELEASE/Packs/test/Styles/dangertest.json         |  34 +++
 _RELEASE/Packs/test/Styles/euclideanpc.json        |  34 +++
 _RELEASE/Packs/test/Styles/flatteringshape.json    |  30 ++
 _RELEASE/Packs/test/Styles/goldenratio.json        |  34 +++
 _RELEASE/Packs/test/Styles/labyrinth.json          |  33 +++
 _RELEASE/Packs/test/Styles/pi.json                 |  34 +++
 _RELEASE/Packs/test/Styles/pointless.json          |  30 ++
 _RELEASE/Packs/test/Styles/seconddimension.json    |  34 +++
 _RELEASE/Packs/test/pack.json                      |   4 +
 extlibs/SSVCMake                                   |   1 +
 139 files changed, 6651 insertions(+)
 create mode 100644 _RELEASE/Packs-orig/cube/Levels/apeirogon.json
 create mode 100644 _RELEASE/Packs-orig/cube/Levels/babysteps.json
 create mode 100644 _RELEASE/Packs-orig/cube/Levels/commando.json
 create mode 100644 _RELEASE/Packs-orig/cube/Levels/euclideanpc.json
 create mode 100644 _RELEASE/Packs-orig/cube/Levels/flatteringshape.json
 create mode 100644 _RELEASE/Packs-orig/cube/Levels/goldenratio.json
 create mode 100644 _RELEASE/Packs-orig/cube/Levels/labyrinth.json
 create mode 100644 _RELEASE/Packs-orig/cube/Levels/pi.json
 create mode 100644 _RELEASE/Packs-orig/cube/Levels/pointless.json
 create mode 100644 _RELEASE/Packs-orig/cube/Levels/seconddimension.json
 create mode 100644 _RELEASE/Packs-orig/cube/Music/callMeKatla.json
 create mode 100644 _RELEASE/Packs-orig/cube/Music/captainCool.json
 create mode 100644 _RELEASE/Packs-orig/cube/Music/commandoSteve.json
 create mode 100644 _RELEASE/Packs-orig/cube/Music/drFinkelfracken.json
 create mode 100644 _RELEASE/Packs-orig/cube/Music/jackRussel.json
 create mode 100644 _RELEASE/Packs-orig/cube/Music/mazeOfMayonnaise.json
 create mode 100644 _RELEASE/Packs-orig/cube/Music/milkyWays.json
 create mode 100644 _RELEASE/Packs-orig/cube/Music/starshipShowdown.json
 create mode 100644 _RELEASE/Packs-orig/cube/Music/steampunkWarlord.json
 create mode 100644 _RELEASE/Packs-orig/cube/Scripts/Levels/apeirogon.lua
 create mode 100644 _RELEASE/Packs-orig/cube/Scripts/Levels/babysteps.lua
 create mode 100644 _RELEASE/Packs-orig/cube/Scripts/Levels/commando.lua
 create mode 100644 _RELEASE/Packs-orig/cube/Scripts/Levels/euclideanpc.lua
 create mode 100644 _RELEASE/Packs-orig/cube/Scripts/Levels/flatteringshape.lua
 create mode 100644 _RELEASE/Packs-orig/cube/Scripts/Levels/goldenratio.lua
 create mode 100644 _RELEASE/Packs-orig/cube/Scripts/Levels/labyrinth.lua
 create mode 100644 _RELEASE/Packs-orig/cube/Scripts/Levels/pi.lua
 create mode 100644 _RELEASE/Packs-orig/cube/Scripts/Levels/pointless.lua
 create mode 100644 _RELEASE/Packs-orig/cube/Scripts/Levels/seconddimension.lua
 create mode 100644 _RELEASE/Packs-orig/cube/Scripts/alternativepatterns.lua
 create mode 100644 _RELEASE/Packs-orig/cube/Scripts/common.lua
 create mode 100644 _RELEASE/Packs-orig/cube/Scripts/commonpatterns.lua
 create mode 100644 _RELEASE/Packs-orig/cube/Scripts/utils.lua
 create mode 100644 _RELEASE/Packs-orig/cube/Styles/apeirogon.json
 create mode 100644 _RELEASE/Packs-orig/cube/Styles/babysteps.json
 create mode 100644 _RELEASE/Packs-orig/cube/Styles/commando.json
 create mode 100644 _RELEASE/Packs-orig/cube/Styles/dangertest.json
 create mode 100644 _RELEASE/Packs-orig/cube/Styles/euclideanpc.json
 create mode 100644 _RELEASE/Packs-orig/cube/Styles/flatteringshape.json
 create mode 100644 _RELEASE/Packs-orig/cube/Styles/goldenratio.json
 create mode 100644 _RELEASE/Packs-orig/cube/Styles/labyrinth.json
 create mode 100644 _RELEASE/Packs-orig/cube/Styles/pi.json
 create mode 100644 _RELEASE/Packs-orig/cube/Styles/pointless.json
 create mode 100644 _RELEASE/Packs-orig/cube/Styles/seconddimension.json
 create mode 100644 _RELEASE/Packs-orig/cube/pack.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Levels/acceleradiant.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Levels/centrifugal.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Levels/disc-o.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Levels/evotutorial.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Levels/g-force.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Levels/incongruence.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Levels/massacre.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Levels/polyhedrug.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Levels/reppaws.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Levels/slither.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Music/cpumood.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Music/dischipo.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Music/flirtFlirt.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Music/gmoomh.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Music/johnnyDerp.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Music/massacrev2.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Music/minimal.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Music/mrGawne.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Music/pep.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Music/tengil.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Scripts/Levels/acceleradiant.lua
 create mode 100644 _RELEASE/Packs-orig/hypercube/Scripts/Levels/centrifugal.lua
 create mode 100644 _RELEASE/Packs-orig/hypercube/Scripts/Levels/disc-o.lua
 create mode 100644 _RELEASE/Packs-orig/hypercube/Scripts/Levels/disc-o.lua.orig
 create mode 100644 _RELEASE/Packs-orig/hypercube/Scripts/Levels/evotutorial.lua
 create mode 100644 _RELEASE/Packs-orig/hypercube/Scripts/Levels/g-force.lua
 create mode 100644 _RELEASE/Packs-orig/hypercube/Scripts/Levels/incongruence.lua
 create mode 100644 _RELEASE/Packs-orig/hypercube/Scripts/Levels/massacre.lua
 create mode 100644 _RELEASE/Packs-orig/hypercube/Scripts/Levels/polyhedrug.lua
 create mode 100644 _RELEASE/Packs-orig/hypercube/Scripts/Levels/reppaws.lua
 create mode 100644 _RELEASE/Packs-orig/hypercube/Scripts/Levels/slither.lua
 create mode 100644 _RELEASE/Packs-orig/hypercube/Scripts/alternativepatterns.lua
 create mode 100644 _RELEASE/Packs-orig/hypercube/Scripts/common.lua
 create mode 100644 _RELEASE/Packs-orig/hypercube/Scripts/commonpatterns.lua
 create mode 100644 _RELEASE/Packs-orig/hypercube/Scripts/evolutionpatterns.lua
 create mode 100644 _RELEASE/Packs-orig/hypercube/Scripts/nextpatterns.lua
 create mode 100644 _RELEASE/Packs-orig/hypercube/Scripts/utils.lua
 create mode 100644 _RELEASE/Packs-orig/hypercube/Styles/acceleradiant.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Styles/centrifugal.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Styles/disc-o.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Styles/evotutorial.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Styles/g-force.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Styles/incongruence.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Styles/massacre.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Styles/polyhedrug.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Styles/reppaws.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/Styles/slither.json
 create mode 100644 _RELEASE/Packs-orig/hypercube/pack.json
 create mode 100644 _RELEASE/Packs/test/Levels/apeirogon.json
 create mode 100644 _RELEASE/Packs/test/Levels/babysteps.json
 create mode 100644 _RELEASE/Packs/test/Levels/commando.json
 create mode 100644 _RELEASE/Packs/test/Levels/euclideanpc.json
 create mode 100644 _RELEASE/Packs/test/Levels/flatteringshape.json
 create mode 100644 _RELEASE/Packs/test/Levels/goldenratio.json
 create mode 100644 _RELEASE/Packs/test/Levels/labyrinth.json
 create mode 100644 _RELEASE/Packs/test/Levels/pi.json
 create mode 100644 _RELEASE/Packs/test/Levels/pointless.json
 create mode 100644 _RELEASE/Packs/test/Levels/seconddimension.json
 create mode 100644 _RELEASE/Packs/test/Music/callMeKatla.json
 create mode 100644 _RELEASE/Packs/test/Music/captainCool.json
 create mode 100644 _RELEASE/Packs/test/Music/commandoSteve.json
 create mode 100644 _RELEASE/Packs/test/Music/drFinkelfracken.json
 create mode 100644 _RELEASE/Packs/test/Music/jackRussel.json
 create mode 100644 _RELEASE/Packs/test/Music/mazeOfMayonnaise.json
 create mode 100644 _RELEASE/Packs/test/Music/milkyWays.json
 create mode 100644 _RELEASE/Packs/test/Music/starshipShowdown.json
 create mode 100644 _RELEASE/Packs/test/Music/steampunkWarlord.json
 create mode 100644 _RELEASE/Packs/test/Scripts/Levels/apeirogon.lua
 create mode 100644 _RELEASE/Packs/test/Scripts/Levels/babysteps.lua
 create mode 100644 _RELEASE/Packs/test/Scripts/Levels/commando.lua
 create mode 100644 _RELEASE/Packs/test/Scripts/Levels/euclideanpc.lua
 create mode 100644 _RELEASE/Packs/test/Scripts/Levels/flatteringshape.lua
 create mode 100644 _RELEASE/Packs/test/Scripts/Levels/goldenratio.lua
 create mode 100644 _RELEASE/Packs/test/Scripts/Levels/labyrinth.lua
 create mode 100644 _RELEASE/Packs/test/Scripts/Levels/pi.lua
 create mode 100644 _RELEASE/Packs/test/Scripts/Levels/pointless.lua
 create mode 100644 _RELEASE/Packs/test/Scripts/Levels/seconddimension.lua
 create mode 100644 _RELEASE/Packs/test/Scripts/alternativepatterns.lua
 create mode 100644 _RELEASE/Packs/test/Scripts/common.lua
 create mode 100644 _RELEASE/Packs/test/Scripts/commonpatterns.lua
 create mode 100644 _RELEASE/Packs/test/Scripts/utils.lua
 create mode 100644 _RELEASE/Packs/test/Styles/apeirogon.json
 create mode 100644 _RELEASE/Packs/test/Styles/babysteps.json
 create mode 100644 _RELEASE/Packs/test/Styles/commando.json
 create mode 100644 _RELEASE/Packs/test/Styles/dangertest.json
 create mode 100644 _RELEASE/Packs/test/Styles/euclideanpc.json
 create mode 100644 _RELEASE/Packs/test/Styles/flatteringshape.json
 create mode 100644 _RELEASE/Packs/test/Styles/goldenratio.json
 create mode 100644 _RELEASE/Packs/test/Styles/labyrinth.json
 create mode 100644 _RELEASE/Packs/test/Styles/pi.json
 create mode 100644 _RELEASE/Packs/test/Styles/pointless.json
 create mode 100644 _RELEASE/Packs/test/Styles/seconddimension.json
 create mode 100644 _RELEASE/Packs/test/pack.json
 create mode 160000 extlibs/SSVCMake

diff --git a/_RELEASE/Packs-orig/cube/Levels/apeirogon.json b/_RELEASE/Packs-orig/cube/Levels/apeirogon.json
new file mode 100644
index 0000000..1baeb47
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Levels/apeirogon.json
@@ -0,0 +1,12 @@
+{
+	"id": "apeirogon",
+	"name": "apeirogon",
+	"description": "hardest level of difficulty",
+	"author": "vittorio romeo",	
+	"menuPriority": 40,
+	"selectable": true,
+	"styleId": "apeirogon",
+	"musicId": "milkyWays",
+	"luaFile": "Scripts/Levels/apeirogon.lua",
+	"difficultyMults": [1.25, 1.40, 0.75, 0.5, 0.35]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Levels/babysteps.json b/_RELEASE/Packs-orig/cube/Levels/babysteps.json
new file mode 100644
index 0000000..0abe143
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Levels/babysteps.json
@@ -0,0 +1,11 @@
+{
+	"id": "babysteps",
+	"name": "baby steps",
+	"description": "learn to play openhexagon",
+	"author": "vittorio romeo",
+	"menuPriority": 0,
+	"selectable": true,
+	"styleId": "babysteps",
+	"musicId": "drFinkelfracken",
+	"luaFile": "Scripts/Levels/babysteps.lua"
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Levels/commando.json b/_RELEASE/Packs-orig/cube/Levels/commando.json
new file mode 100644
index 0000000..d6a849b
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Levels/commando.json
@@ -0,0 +1,12 @@
+{
+	"id": "commando",
+	"name": "commando",
+	"description": "exponential difficulty \nfor exponential entertainment",
+	"author": "vittorio romeo",	
+	"menuPriority": 50,
+	"selectable": true,
+	"styleId": "commando",
+	"musicId": "commandoSteve",
+	"luaFile": "Scripts/Levels/commando.lua",
+	"difficultyMults": [1.25, 1.50, 0.75, 0.5, 0.25]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Levels/euclideanpc.json b/_RELEASE/Packs-orig/cube/Levels/euclideanpc.json
new file mode 100644
index 0000000..9fc846c
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Levels/euclideanpc.json
@@ -0,0 +1,12 @@
+{
+	"id": "euclideanpc",
+	"name": "euclidean plane crash",
+	"description": "special level of difficulty",
+	"author": "vittorio romeo",	
+	"menuPriority": 60,
+	"selectable": true,
+	"styleId": "euclideanpc",
+	"musicId": "steampunkWarlord",
+	"luaFile": "Scripts/Levels/euclideanpc.lua",
+	"difficultyMults": [1.25, 1.50, 0.75, 0.5, 0.25]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Levels/flatteringshape.json b/_RELEASE/Packs-orig/cube/Levels/flatteringshape.json
new file mode 100644
index 0000000..e5f8922
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Levels/flatteringshape.json
@@ -0,0 +1,12 @@
+{
+	"id": "flatteringshape",
+	"name": "flattering shape",
+	"description": "normal level of difficulty",
+	"author": "vittorio romeo",	
+	"menuPriority": 20,
+	"selectable": true,
+	"styleId": "flatteringshape",
+	"musicId": "starshipShowdown",
+	"luaFile": "Scripts/Levels/flatteringshape.lua",
+	"difficultyMults": [1.5, 2, 2.5, 0.5, 3]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Levels/goldenratio.json b/_RELEASE/Packs-orig/cube/Levels/goldenratio.json
new file mode 100644
index 0000000..654c59c
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Levels/goldenratio.json
@@ -0,0 +1,12 @@
+{
+	"id": "goldenratio",
+	"name": "golden ratio",
+	"description": "relax with the spirals",
+	"author": "vittorio romeo",	
+	"menuPriority": 90,
+	"selectable": true,
+	"styleId": "goldenratio",
+	"musicId": "captainCool",
+	"luaFile": "Scripts/Levels/goldenratio.lua",
+	"difficultyMults": [1.25, 1.50, 0.75, 0.5, 0.25]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Levels/labyrinth.json b/_RELEASE/Packs-orig/cube/Levels/labyrinth.json
new file mode 100644
index 0000000..998864b
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Levels/labyrinth.json
@@ -0,0 +1,12 @@
+{
+	"id": "labyrinth",
+	"name": "labyrinth",
+	"description": "forever trapped",
+	"author": "vittorio romeo",	
+	"menuPriority": 80,
+	"selectable": true,
+	"styleId": "labyrinth",
+	"musicId": "commandoSteve",
+	"luaFile": "Scripts/Levels/labyrinth.lua",
+	"difficultyMults": [1.25, 1.50, 0.75, 0.5, 0.25, 1.8]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Levels/pi.json b/_RELEASE/Packs-orig/cube/Levels/pi.json
new file mode 100644
index 0000000..9533009
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Levels/pi.json
@@ -0,0 +1,12 @@
+{
+	"id": "pi",
+	"name": "3.141592653589793238462643383279502884197169399375105820974944592307816406286",
+	"description": "do you like pi?",
+	"author": "vittorio romeo",	
+	"menuPriority": 70,
+	"selectable": true,
+	"styleId": "pi",
+	"musicId": "callMeKatla",
+	"luaFile": "Scripts/Levels/pi.lua",
+	"difficultyMults": [1.25, 1.50, 0.75, 0.5, 0.25, 1.8]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Levels/pointless.json b/_RELEASE/Packs-orig/cube/Levels/pointless.json
new file mode 100644
index 0000000..b3c4519
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Levels/pointless.json
@@ -0,0 +1,12 @@
+{
+	"id": "pointless",
+	"name": "pointless",
+	"description": "easiest level of difficulty",
+	"author": "vittorio romeo",
+	"menuPriority": 10,
+	"selectable": true,
+	"styleId": "pointless",
+	"musicId": "jackRussel",
+	"luaFile": "Scripts/Levels/pointless.lua",
+	"difficultyMults": [1.5, 2, 2.5, 3, 0.5, 4]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Levels/seconddimension.json b/_RELEASE/Packs-orig/cube/Levels/seconddimension.json
new file mode 100644
index 0000000..24f84aa
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Levels/seconddimension.json
@@ -0,0 +1,12 @@
+{
+	"id": "seconddimension",
+	"name": "second dimension",
+	"description": "hard level of difficulty",
+	"author": "vittorio romeo",	
+	"menuPriority": 30,
+	"selectable": true,
+	"styleId": "seconddimension",
+	"musicId": "mazeOfMayonnaise",
+	"luaFile": "Scripts/Levels/seconddimension.lua",
+	"difficultyMults": [1.4, 0.75, 0.6, 1.8]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Music/callMeKatla.json b/_RELEASE/Packs-orig/cube/Music/callMeKatla.json
new file mode 100644
index 0000000..2e6b128
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Music/callMeKatla.json
@@ -0,0 +1,20 @@
+{
+	// Music data id
+	"id": "callMeKatla",
+
+	// Music file
+	"file_name": "callMeKatla.ogg",
+
+	// Music information
+	"name": "Call me Katla, baby",
+	"album": "",
+	"author": "Dunderpatrullen VS. BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 24 },
+		{ "time": 73 },
+		{ "time": 140 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Music/captainCool.json b/_RELEASE/Packs-orig/cube/Music/captainCool.json
new file mode 100644
index 0000000..bfc1627
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Music/captainCool.json
@@ -0,0 +1,20 @@
+{
+
+	// Music data id
+	"id": "captainCool",
+	// Music file
+	"file_name": "captainCool.ogg",
+
+	// Music information
+	"name": "Captain Cool",
+	"album": "Bossfight",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 0 },
+		{ "time": 43 },
+		{ "time": 111 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Music/commandoSteve.json b/_RELEASE/Packs-orig/cube/Music/commandoSteve.json
new file mode 100644
index 0000000..93f5c77
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Music/commandoSteve.json
@@ -0,0 +1,19 @@
+{
+	// Music data id
+	"id": "commandoSteve",
+
+	// Music file
+	"file_name": "commandoSteve.ogg",
+
+	// Music information
+	"name": "Commando Steve",
+	"album": "Caps On, Hats Off",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 61 },
+		{ "time": 88 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Music/drFinkelfracken.json b/_RELEASE/Packs-orig/cube/Music/drFinkelfracken.json
new file mode 100644
index 0000000..be0568f
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Music/drFinkelfracken.json
@@ -0,0 +1,21 @@
+{
+	// Music data id
+	"id": "drFinkelfracken",
+
+	// Music file
+	"file_name": "drFinkelfracken.ogg",
+
+	// Music information
+	"name": "Dr. Finkelfracken's Cure",
+	"album": "Nice Catch Biggy!",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 0 },
+		{ "time": 18 },
+		{ "time": 68 },
+		{ "time": 91 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Music/jackRussel.json b/_RELEASE/Packs-orig/cube/Music/jackRussel.json
new file mode 100644
index 0000000..4f3c394
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Music/jackRussel.json
@@ -0,0 +1,21 @@
+{
+	// Music data id
+	"id": "jackRussel",
+
+	// Music file
+	"file_name": "jackRussel.ogg",
+
+	// Music information
+	"name": "Jack Russel",
+	"album": "Caps On, Hats Off",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 32 },
+		{ "time": 47 },
+		{ "time": 98 },
+		{ "time": 125 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Music/mazeOfMayonnaise.json b/_RELEASE/Packs-orig/cube/Music/mazeOfMayonnaise.json
new file mode 100644
index 0000000..be24fe6
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Music/mazeOfMayonnaise.json
@@ -0,0 +1,20 @@
+{
+	// Music data id
+	"id": "mazeOfMayonnaise",
+
+	// Music file
+	"file_name": "mazeOfMayonnaise.ogg",
+
+	// Music information
+	"name": "The Maze of Mayonnaise",
+	"album": "Caps On, Hats Off",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 35 },
+		{ "time": 52 },
+		{ "time": 93 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Music/milkyWays.json b/_RELEASE/Packs-orig/cube/Music/milkyWays.json
new file mode 100644
index 0000000..786c0e1
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Music/milkyWays.json
@@ -0,0 +1,20 @@
+{
+	// Music data id
+	"id": "milkyWays",
+
+	// Music file
+	"file_name": "milkyWays.ogg",
+
+	// Music information
+	"name": "Milky Ways",
+	"album": "Caps On, Hats Off",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 16 },
+		{ "time": 37 },
+		{ "time": 81 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Music/starshipShowdown.json b/_RELEASE/Packs-orig/cube/Music/starshipShowdown.json
new file mode 100644
index 0000000..d1773a8
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Music/starshipShowdown.json
@@ -0,0 +1,19 @@
+{
+	// Music data id
+	"id": "starshipShowdown",
+
+	// Music file
+	"file_name": "starshipShowdown.ogg",
+
+	// Music information
+	"name": "Starship Showdown",
+	"album": "Caps On, Hats Off",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 26 },
+		{ "time": 66 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Music/steampunkWarlord.json b/_RELEASE/Packs-orig/cube/Music/steampunkWarlord.json
new file mode 100644
index 0000000..df69542
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Music/steampunkWarlord.json
@@ -0,0 +1,20 @@
+{
+	// Music data id
+	"id": "steampunkWarlord",
+
+	// Music file
+	"file_name": "steampunkWarlord.ogg",
+
+	// Music information
+	"name": "Steampunk Warlord",
+	"album": "Caps On, Hats Off",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 74 },
+		{ "time": 98 },		
+		{ "time": 174 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Scripts/Levels/apeirogon.lua b/_RELEASE/Packs-orig/cube/Scripts/Levels/apeirogon.lua
new file mode 100644
index 0000000..95bcd8e
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Scripts/Levels/apeirogon.lua
@@ -0,0 +1,92 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then pAltBarrage(math.random(2, 3), 2) 
+	elseif mKey == 1 then pBarrageSpiral(3, 0.6, 1)
+	elseif mKey == 2 then pInverseBarrage(0)
+	elseif mKey == 3 then pTunnel(math.random(1, 3))
+	elseif mKey == 4 then pMirrorWallStrip(1, 0)
+	elseif mKey == 5 then pWallExVortex(0, math.random(1, 2), 1)
+	elseif mKey == 6 then pDMBarrageSpiral(math.random(4, 7), 0.4, 1)
+	elseif mKey == 7 then pRandomBarrage(math.random(2, 5), 2.25)
+	elseif mKey == 8 then pMirrorSpiralDouble(math.random(4, 6), 0)
+	elseif mKey == 9 then pMirrorSpiral(math.random(2, 4), 0)
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 7, 8, 9, 9 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(3.05)
+	l_setSpeedInc(0.7)
+	l_setRotationSpeed(0.3)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.04)
+	l_setDelayMult(1.07)
+	l_setDelayInc(0.0)
+	l_setFastSpin(71.0)
+	l_setSides(6)
+	l_setSidesMin(5)
+	l_setSidesMax(7)
+	l_setIncTime(15)
+	l_setMaxInc(2)
+
+	l_setPulseMin(64)
+	l_setPulseMax(84)
+	l_setPulseSpeed(2.0)
+	l_setPulseSpeedR(1.5)
+	l_setPulseDelayMax(9)
+
+	l_setBeatPulseMax(15)
+	l_setBeatPulseDelayMax(21.8)
+
+	enableSwapIfDMGreaterThan(1)
+	disableIncIfDMGreaterThan(1)
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	addPattern(keys[index])
+	index = index + 1
+	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- continuous direction change (even if not on level increment)
+dirChangeTime = 100
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+	dirChangeTime = dirChangeTime - mFrameTime;
+	if dirChangeTime < 0 then
+		-- do not change direction while fast spinning
+		if u_isFastSpinning() == false then
+			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
+			dirChangeTime = 300
+		end
+	end 
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Scripts/Levels/babysteps.lua b/_RELEASE/Packs-orig/cube/Scripts/Levels/babysteps.lua
new file mode 100644
index 0000000..2ecaf3f
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Scripts/Levels/babysteps.lua
@@ -0,0 +1,78 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+	if mKey == 0 then pBarrageSpiral(math.random(1, 2), 1, 1) 
+	elseif mKey == 1 then pInverseBarrage(0)
+	elseif mKey == 2 then pAltBarrage(math.random(1, 3), 2)
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 1, 2 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(1.85)
+	l_setSpeedInc(0.05)
+	l_setRotationSpeed(0.04)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.04)
+	l_setDelayMult(1.0)
+	l_setDelayInc(0.0)
+	l_setFastSpin(0.0)
+	l_setSides(6)
+	l_setSidesMin(6)
+	l_setSidesMax(6)
+	l_setIncTime(15)
+	l_setTutorialMode(true)
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+	m_messageAddImportant("welcome to open hexagon 2", 130)
+	m_messageAddImportant("use left/right to rotate", 130)
+	m_messageAddImportant("avoid the walls!", 130)
+	e_eventStopTimeS(6) e_eventWaitS(6)
+	
+	e_eventStopTimeS(3) e_eventWaitUntilS(12)
+	m_messageAddImportant("great job!", 130)
+	m_messageAddImportant("after a while, things get harder", 130)
+	m_messageAddImportant("get to 45 seconds to win!", 130)
+
+	e_eventWaitUntilS(42)
+	m_messageAddImportant("well done!", 130)
+	m_messageAddImportant("now play some real levels!", 138)
+
+	e_eventWaitUntilS(45)
+	u_eventKill()
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	addPattern(keys[index])
+	index = index + 1
+	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end	
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Scripts/Levels/commando.lua b/_RELEASE/Packs-orig/cube/Scripts/Levels/commando.lua
new file mode 100644
index 0000000..33db56a
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Scripts/Levels/commando.lua
@@ -0,0 +1,71 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+            
+extra = 0
+level = 1
+incrementTime = 5
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()	
+	m_messageAddImportant("level: "..(extra + 1).." / time: "..incrementTime, 170)
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	rWallEx(getRandomSide(), extra)
+	t_wait(getPerfectDelayDM(THICKNESS) * 6)
+end
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(2.25)
+	l_setSpeedInc(0.0)
+	l_setRotationSpeed(0.0)
+	l_setRotationSpeedMax(0.0)
+	l_setRotationSpeedInc(0.0)
+	l_setDelayMult(1.0)
+	l_setDelayInc(0.0)
+	l_setFastSpin(0.0)
+	l_setSides(4)
+	l_setSidesMin(0)
+	l_setSidesMax(0)
+	l_setIncTime(5)
+
+	l_setPulseMin(75)
+	l_setPulseMax(91)
+	l_setPulseSpeed(2)
+	l_setPulseSpeedR(1)
+	l_setPulseDelayMax(0.7)
+
+	l_setBeatPulseMax(17)
+	l_setBeatPulseDelayMax(23.8)
+	
+	l_addTracked("level", "level")
+	l_enableRndSideChanges(false)
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()	
+	u_playSound("beep.ogg")
+	u_playSound("VeeEndurance_test.ogg")
+	
+	extra = extra + 1
+	level = extra + 1
+	incrementTime = incrementTime + 2
+	
+	l_setSides(l_getSides() + 2)
+	l_setIncTime(incrementTime)
+		
+	m_messageAddImportant("level: "..(extra + 1).." / time: "..incrementTime, 170)
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Scripts/Levels/euclideanpc.lua b/_RELEASE/Packs-orig/cube/Scripts/Levels/euclideanpc.lua
new file mode 100644
index 0000000..8584081
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Scripts/Levels/euclideanpc.lua
@@ -0,0 +1,87 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey ==  0 then pAltBarrage(math.random(2, 4), 2) 
+	elseif mKey ==  1 then pMirrorSpiral(math.random(3, 6), 0)
+	elseif mKey ==  2 then pBarrageSpiral(math.random(0, 3), 1, 1)
+	elseif mKey ==  3 then pBarrageSpiral(math.random(0, 2), 1.2, 2)
+	elseif mKey ==  4 then pBarrageSpiral(2, 0.7, 1)
+	elseif mKey ==  5 then pInverseBarrage(0)
+	elseif mKey ==  6 then pTunnel(math.random(1, 3))
+	elseif mKey ==  7 then pMirrorWallStrip(1, 0)
+	elseif mKey ==  8 then pWallExVortex(0, 1, 1)
+	elseif mKey ==  9 then pDMBarrageSpiral(math.random(4, 7), 0.4, 1)
+	elseif mKey == 10 then pRandomBarrage(math.random(2, 4), 2.25)
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7, 8, 9, 10, 10, 10 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(2.7)
+	l_setSpeedInc(0.0)
+	l_setRotationSpeed(0.25)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.04)
+	l_setDelayMult(1.0)
+	l_setDelayInc(0.0)
+	l_setFastSpin(85.0)
+	l_setSides(8)
+	l_setSidesMin(8)
+	l_setSidesMax(8)
+	l_setIncTime(15)
+	l_setMaxInc(6)
+
+	l_setPulseMin(60)
+	l_setPulseMax(87)
+	l_setPulseSpeed(1.2)
+	l_setPulseSpeedR(1)
+	l_setPulseDelayMax(12.9)
+
+	l_setBeatPulseMax(17)
+	l_setBeatPulseDelayMax(24.8)
+
+	enableSwapIfDMGreaterThan(1)
+	disableIncIfDMGreaterThan(1)
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+	e_eventWaitS(15)
+	m_messageAdd("whoa!", 120)
+	e_eventWaitS(45)
+	m_messageAddImportant("may the mayhem begin!", 130)
+	s_setPulseInc(0.15)
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	addPattern(keys[index])
+	index = index + 1
+	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end	
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Scripts/Levels/flatteringshape.lua b/_RELEASE/Packs-orig/cube/Scripts/Levels/flatteringshape.lua
new file mode 100644
index 0000000..3be03d6
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Scripts/Levels/flatteringshape.lua
@@ -0,0 +1,79 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then pAltBarrage(math.random(2, 4), 2) 
+	elseif mKey == 1 then pMirrorSpiral(math.random(3, 6), 0)
+	elseif mKey == 2 then pBarrageSpiral(math.random(0, 3), 1, 1)
+	elseif mKey == 3 then pBarrageSpiral(math.random(0, 2), 1.2, 2)
+	elseif mKey == 4 then pBarrageSpiral(2, 0.7, 1)
+	elseif mKey == 5 then pInverseBarrage(0)
+	elseif mKey == 6 then pTunnel(math.random(1, 3))
+	elseif mKey == 7 then pMirrorWallStrip(1, 0)
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 0, 1, 1, 2, 2, 3, 4, 5, 5, 6, 7, 7 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(1.74)
+	l_setSpeedInc(0.18)
+	l_setRotationSpeed(0.13)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.04)
+	l_setDelayMult(1.0)
+	l_setDelayInc(-0.03)
+	l_setFastSpin(0.0)
+	l_setSides(6)
+	l_setSidesMin(5)
+	l_setSidesMax(6)
+	l_setIncTime(15)
+	l_setMaxInc(8)
+
+	l_setPulseMin(75)
+	l_setPulseMax(91)
+	l_setPulseSpeed(1.5)
+	l_setPulseSpeedR(0.6)
+	l_setPulseDelayMax(9)
+
+	l_setBeatPulseMax(17)
+	l_setBeatPulseDelayMax(23.8)
+
+	enableSwapIfDMGreaterThan(2)
+	disableIncIfDMGreaterThan(2.5)
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	addPattern(keys[index])
+	index = index + 1
+ 	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Scripts/Levels/goldenratio.lua b/_RELEASE/Packs-orig/cube/Scripts/Levels/goldenratio.lua
new file mode 100644
index 0000000..eeb0872
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Scripts/Levels/goldenratio.lua
@@ -0,0 +1,73 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+	if mKey == 0 then pBarrageSpiral(math.random(5, 9), 0.41, 1)
+	elseif mKey == 1 then pMirrorSpiralDouble(math.random(8, 10), 0)
+	elseif mKey == 2 then pMirrorSpiral(math.random(2, 5), 0)
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 0, 1, 1, 2 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(1.7)
+	l_setSpeedInc(0.1)
+	l_setRotationSpeed(0.0)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.1)
+	l_setDelayMult(1.0)
+	l_setDelayInc(0.0)
+	l_setFastSpin(50.0)
+	l_setSides(6)
+	l_setSidesMin(5)
+	l_setSidesMax(7)
+	l_setIncTime(10)
+	l_setMaxInc(6)
+
+	l_setPulseMin(60)
+	l_setPulseMax(87)
+	l_setPulseSpeed(1.2)
+	l_setPulseSpeedR(1)
+	l_setPulseDelayMax(12.9)
+
+	l_setBeatPulseMax(17)
+	l_setBeatPulseDelayMax(26.2)
+
+	l_setWallSkewRight(-20)
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()
+	addPattern(keys[index])
+	index = index + 1
+
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Scripts/Levels/labyrinth.lua b/_RELEASE/Packs-orig/cube/Scripts/Levels/labyrinth.lua
new file mode 100644
index 0000000..cda8f24
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Scripts/Levels/labyrinth.lua
@@ -0,0 +1,74 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+level = 0
+levelTracked = 1
+incrementTime = 3
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()	
+	m_messageAddImportant("level: "..(level + 1).." / time: "..incrementTime, 170)
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()
+	cBarrage(getRandomSide())
+	t_wait(getPerfectDelayDM(THICKNESS) * 6.55)
+end
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(2.25)
+	l_setSpeedInc(0.0)
+	l_setRotationSpeed(0.0)
+	l_setRotationSpeedMax(0.0)
+	l_setRotationSpeedInc(0.0)
+	l_setDelayMult(1.0)
+	l_setDelayInc(0.0)
+	l_setFastSpin(0.0)
+	l_setSides(3)
+	l_setSidesMin(0)
+	l_setSidesMax(0)
+	l_setIncTime(5)
+
+	l_setPulseMin(58)
+	l_setPulseMax(90)
+	l_setPulseSpeed(2.2)
+	l_setPulseSpeedR(0.65)
+	l_setPulseDelayMax(1)
+
+	l_setBeatPulseMax(17)
+	l_setBeatPulseDelayMax(23.8)
+
+	l_setRadiusMin(40)
+	l_addTracked("levelTracked", "level")
+	l_enableRndSideChanges(false)
+
+	enableSwapIfDMGreaterThan(1.5)
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()	
+	u_playSound("beep.ogg")
+	u_playSound("VeeEndurance_test.ogg")
+	
+	level = level + 1
+	levelTracked = level + 1
+	incrementTime = incrementTime + 2
+	
+	l_setSides(l_getSides() + 1)
+	l_setIncTime(incrementTime)
+		
+	m_messageAddImportant("level: "..(level + 1).." / time: "..incrementTime, 170)
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Scripts/Levels/pi.lua b/_RELEASE/Packs-orig/cube/Scripts/Levels/pi.lua
new file mode 100644
index 0000000..d2dc98b
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Scripts/Levels/pi.lua
@@ -0,0 +1,88 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then cWallEx(math.random(0, l_getSides()), math.random(1, 2)) t_wait(getPerfectDelay(THICKNESS) * 2.5)
+	elseif mKey == 1 then pMirrorSpiralDouble(math.random(1, 2), 4)
+	elseif mKey == 2 then rWallEx(math.random(0, l_getSides()), math.random(1, 2)) t_wait(getPerfectDelay(THICKNESS) * 2.8)
+	elseif mKey == 3 then pMirrorWallStrip(1, 2)
+	elseif mKey == 4 then rWallEx(math.random(0, l_getSides()), 1) t_wait(getPerfectDelay(THICKNESS) * 2.3)
+	elseif mKey == 5 then cWallEx(math.random(0, l_getSides()), 7) t_wait(getPerfectDelay(THICKNESS) * 2.7)
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5 }
+keys = shuffle(keys)
+index = 0
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	addPattern(keys[index])
+	index = index + 1
+	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(3.4)
+	l_setSpeedInc(0.10)
+	l_setRotationSpeed(0.25)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.04)
+	l_setDelayMult(1.0)
+	l_setDelayInc(-0.01)
+	l_setFastSpin(80.0)
+	l_setSides(24)
+	l_setSidesMin(20)
+	l_setSidesMax(28)
+	l_setIncTime(15)
+	l_setMaxInc(4)
+
+	l_setPulseMin(68)
+	l_setPulseMax(80)
+	l_setPulseSpeed(3.6)
+	l_setPulseSpeedR(1.4)
+	l_setPulseDelayMax(7)
+
+	l_setBeatPulseMax(15)
+	l_setBeatPulseDelayMax(21.8)
+
+	enableSwapIfDMGreaterThan(1)
+	disableIncIfDMGreaterThan(1.5)
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- continuous direction change (even if not on level increment)
+dirChangeTime = 150
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+	dirChangeTime = dirChangeTime - mFrameTime;
+	if dirChangeTime < 0 then
+		-- do not change direction while fast spinning
+		if u_isFastSpinning() == false then
+			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
+			dirChangeTime = 100
+		end
+	end 
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Scripts/Levels/pointless.lua b/_RELEASE/Packs-orig/cube/Scripts/Levels/pointless.lua
new file mode 100644
index 0000000..d52e76e
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Scripts/Levels/pointless.lua
@@ -0,0 +1,78 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then pAltBarrage(math.random(2, 4), 2) 
+	elseif mKey == 1 then pMirrorSpiral(math.random(2, 5), getHalfSides() - 3)
+	elseif mKey == 2 then pBarrageSpiral(math.random(0, 3), 1, 1)
+	elseif mKey == 3 then pInverseBarrage(0)
+	elseif mKey == 4 then pTunnel(math.random(1, 3))
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 0, 1, 1, 2, 2, 3, 3, 4 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(1.55)
+	l_setSpeedInc(0.125)
+	l_setRotationSpeed(0.07)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.04)
+	l_setDelayMult(1.0)
+	l_setDelayInc(-0.01)
+	l_setFastSpin(0.0)
+	l_setSides(6)
+	l_setSidesMin(5)
+	l_setSidesMax(6)
+	l_setIncTime(15)
+	l_setMaxInc(8)
+
+	l_setPulseMin(75)
+	l_setPulseMax(91)
+	l_setPulseSpeed(1.2)
+	l_setPulseSpeedR(1)
+	l_setPulseDelayMax(23.9)
+
+	l_setBeatPulseMax(17)
+	l_setBeatPulseDelayMax(24.8)
+
+	enableSwapIfDMGreaterThan(2.5)
+	disableIncIfDMGreaterThan(3)
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+	m_messageAdd("tutorials are over", 130)
+	m_messageAdd("good luck getting high scores!", 130)
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	addPattern(keys[index])
+	index = index + 1
+	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Scripts/Levels/seconddimension.lua b/_RELEASE/Packs-orig/cube/Scripts/Levels/seconddimension.lua
new file mode 100644
index 0000000..e6ecf5e
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Scripts/Levels/seconddimension.lua
@@ -0,0 +1,87 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey ==  0 then pAltBarrage(math.random(2, 4), 2) 
+	elseif mKey ==  1 then pMirrorSpiral(math.random(3, 6), 0)
+	elseif mKey ==  2 then pBarrageSpiral(math.random(0, 3), 1, 1)
+	elseif mKey ==  3 then pBarrageSpiral(math.random(0, 2), 1.2, 2)
+	elseif mKey ==  4 then pBarrageSpiral(2, 0.7, 1)
+	elseif mKey ==  5 then pInverseBarrage(0)
+	elseif mKey ==  6 then pTunnel(math.random(1, 3))
+	elseif mKey ==  7 then pMirrorWallStrip(1, 0)
+	elseif mKey ==  8 then pWallExVortex(0, 1, 1)
+	elseif mKey ==  9 then pDMBarrageSpiral(math.random(4, 7), 0.4, 1)
+	elseif mKey == 10 then pRandomBarrage(math.random(2, 4), 2.25)
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7, 8, 9, 10, 10, 10 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(2.65)
+	l_setSpeedInc(0.1)
+	l_setRotationSpeed(0.2)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.05)
+	l_setDelayMult(1.1)
+	l_setDelayInc(-0.01)
+	l_setFastSpin(70.0)
+	l_setSides(6)
+	l_setSidesMin(5)
+	l_setSidesMax(7)
+	l_setIncTime(15)
+	l_setMaxInc(4)
+
+	l_setPulseMin(70)
+	l_setPulseMax(90)
+	l_setPulseSpeed(1.0)
+	l_setPulseSpeedR(0.6)
+	l_setPulseDelayMax(0)
+
+	l_setBeatPulseMax(17)
+	l_setBeatPulseDelayMax(23.8)
+
+	enableSwapIfDMGreaterThan(1.4)
+	disableIncIfDMGreaterThan(1.4)
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+	e_eventWaitS(16)
+	m_messageAdd("whoa!", 120)
+	e_eventWaitS(45)
+	m_messageAddImportant("may the mayhem begin!", 130)
+	s_setPulseInc(0.15)
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	addPattern(keys[index])
+	index = index + 1
+	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end	
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Scripts/alternativepatterns.lua b/_RELEASE/Packs-orig/cube/Scripts/alternativepatterns.lua
new file mode 100644
index 0000000..4cb9108
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Scripts/alternativepatterns.lua
@@ -0,0 +1,119 @@
+u_execScript("common.lua")
+
+function pAltMirrorSpiral(mTimes, mExtra)
+	oldThickness = THICKNESS
+	THICKNESS = getPerfectThickness(THICKNESS)
+	delay = getPerfectDelay(THICKNESS)
+	startSide = getRandomSide()
+	loopDir = getRandomDir()	
+	for k = 1, #mTimes do
+		for i = 1, mTimes[k] do
+			rWallEx(startSide, mExtra)
+			if (k % 2) == 0 then
+				startSide = startSide + loopDir
+			else
+				startSide = startSide - loopDir
+			end
+			t_wait(delay)
+		end 
+	end
+
+	THICKNESS = oldThickness
+	
+	t_wait(getPerfectDelay(THICKNESS) * 6.5)
+end
+
+function randomArray(mNumber,mLower,mUpper)
+	a = {}
+	for k = 1, mNumber do
+		a[k] = math.random(mLower,mUpper)
+	end
+	return a
+end
+
+function pAltTunnel(mTimes,mFree)
+	oldThickness = THICKNESS
+	myThickness = getPerfectThickness(THICKNESS)
+	delay = getPerfectDelay(myThickness) * 5
+	startSide = getRandomSide()
+	loopDir = getRandomDir()
+	
+	THICKNESS = myThickness
+	
+	for i = 0, mTimes do
+		if i < mTimes then
+			w_wall(startSide, myThickness + 5 * l_getSpeedMult() * delay)
+		end
+		
+		cBarrageN(startSide + loopDir,mFree)
+		t_wait(delay)
+		
+		loopDir = loopDir * -1
+	end
+	
+	THICKNESS = oldThickness
+end
+
+function cycle(mSides)
+	eArray = {}
+	j = getRandomSide()
+	for i = 1, mSides do 
+		eArray[i] = (i + j) % mSides + 1
+	end
+	return eArray
+end
+
+function pLadder(mTimes,mArray,myThickness)
+
+	delay = getPerfectDelay(myThickness)
+
+	local eArray = {}
+	l = 1
+	s = #mArray/l_getSides()
+	t = math.random(0,100)
+
+	for i = 1, mTimes do
+		q = (i+t) % s + 1
+		for k = 1, l_getSides() do
+			if(mArray[(q-1)*l_getSides() + k] ~= 0) then
+				eArray[l] = 1
+			else
+				eArray[l] = 0
+			end
+			l = l + 1
+		end
+		
+		if i ~= mTimes then
+			for j = 1, 3 do
+				for k = 1,l_getSides() do
+					if(mArray[(q-1)*l_getSides() + k] == 2) then
+						eArray[l] = 1
+					else
+						eArray[l] = 0
+					end
+					l = l + 1
+				end
+			end
+		end
+	end
+
+	patternizer(eArray,myThickness)
+	t_wait(delay*2)
+	
+end
+
+function patternizer(mArray,myThickness)
+	delay = getPerfectDelay(myThickness)
+	eArray = cycle(l_getSides())
+
+	j = math.floor((#mArray) / l_getSides())
+	
+	for i = 1, j do
+		for k = 1, l_getSides() do
+			if mArray[(i - 1)*l_getSides() + k] == 1 then
+				w_wall(eArray[k], myThickness)
+			end
+		end
+		t_wait(delay)
+	end
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Scripts/common.lua b/_RELEASE/Packs-orig/cube/Scripts/common.lua
new file mode 100644
index 0000000..975a00d
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Scripts/common.lua
@@ -0,0 +1,114 @@
+-- common variables
+THICKNESS = 40.0;
+
+function enableSwapIfDMGreaterThan(mDM)
+	if(u_getDifficultyMult() > mDM) then
+		m_messageAdd(" difficulty > " ..mDM.. "\nswap enabled!", 65)
+		l_setSwapEnabled(true)
+	end	
+end
+
+function disableIncIfDMGreaterThan(mDM)
+	if(u_getDifficultyMult() > mDM) then
+		m_messageAdd(" difficulty > " ..mDM.. "\nincrement disabled!", 65)
+		l_setIncEnabled(false)
+	end	
+end
+
+-- getHalfSides: returns half the number of sides (integer)
+function getHalfSides() return math.ceil(l_getSides() / 2) end
+
+-- getRandomSide: returns random mSide
+function getRandomSide() return math.random(0, l_getSides() - 1) end
+
+-- getRandomDir: returns either 1 or -1
+function getRandomDir()
+	if math.random(0, 100) > 50 then return 1 end
+	return -1
+end
+
+-- getPerfectDelay: returns time to wait for two walls to be next to each other
+function getPerfectDelay(mThickness) return mThickness / (5.02 * u_getSpeedMultDM()) * u_getDelayMultDM() end
+
+-- getPerfectDelayDM: returns getPerfectDelay calculated with difficulty mutliplier
+function getPerfectDelayDM(mThickness) return mThickness / (5.02 * u_getSpeedMultDM()) * u_getDelayMultDM() end
+
+-- getPerfectThickness: returns a good THICKNESS value in relation to human reflexes
+function getPerfectThickness(mThickness) return mThickness * u_getSpeedMultDM() end
+
+-- getSideDistance: returns shortest distance from a side to another
+function getSideDistance(mSide1, mSide2)
+	start = mSide1	
+	rightSteps = 0
+	while start ~= mSide2 do
+		rightSteps = rightSteps + 1
+		start = start + 1
+		if start > l_getSides() - 1 then start = 0 end
+	end
+	
+	start = mSide1	
+	leftSteps = 0
+	while start ~= mSide2 do
+		leftSteps = leftSteps + 1
+		start = start - 1
+		if start < 0 then start = l_getSides() - 1 end
+	end
+	
+	if rightSteps < leftSteps then return rightSteps end
+	return leftSteps
+end
+
+-- cWall: creates a wall with the common THICKNESS
+function cWall(mSide) w_wall(mSide, THICKNESS) end
+
+-- oWall: creates a wall opposite to the mSide passed
+function oWall(mSide) cWall(mSide + getHalfSides()) end
+
+-- rWall: union of cwall and owall (created 2 walls facing each other)
+function rWall(mSide)
+	cWall(mSide)
+	oWall(mSide)
+end
+
+-- cWallEx: creates a wall with mExtra walls attached to it 
+function cWallEx(mSide, mExtra)
+	cWall(mSide);
+	loopDir = 1;
+	
+	if mExtra < 0 then loopDir = -1 end
+	for i = 0, mExtra, loopDir do cWall(mSide + i) end
+end
+
+-- oWallEx: creates a wall with mExtra walls opposite to mSide
+function oWallEx(mSide, mExtra)
+	cWallEx(mSide + getHalfSides(), mExtra)
+end
+
+-- rWallEx: union of cwallex and owallex
+function rWallEx(mSide, mExtra)
+	cWallEx(mSide, mExtra)
+	oWallEx(mSide, mExtra)
+end
+
+-- cBarrageN: spawns a barrage of walls, with a free mSide plus mNeighbors
+function cBarrageN(mSide, mNeighbors)
+	for i = mNeighbors, l_getSides() - 2 - mNeighbors, 1 do
+		cWall(mSide + i + 1)
+	end
+end
+
+-- cBarrage: spawns a barrage of walls, with a single free mSide
+function cBarrage(mSide) cBarrageN(mSide, 0) end
+
+-- cBarrageOnlyN: spawns a barrage of wall, with only free mNeighbors
+function cBarrageOnlyN(mSide, mNeighbors)
+	cWall(mSide)
+	cBarrageN(mSide, mNeighbors)
+end
+
+-- cAltBarrage: spawns a barrage of alternate walls
+function cAltBarrage(mSide, mStep)
+	for i = 0, l_getSides() / mStep, 1 do
+		cWall(mSide + i * mStep)
+	end
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Scripts/commonpatterns.lua b/_RELEASE/Packs-orig/cube/Scripts/commonpatterns.lua
new file mode 100644
index 0000000..0041013
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Scripts/commonpatterns.lua
@@ -0,0 +1,196 @@
+u_execScript("common.lua")
+
+-- pAltBarrage: spawns a series of cAltBarrage
+function pAltBarrage(mTimes, mStep)
+	delay = getPerfectDelayDM(THICKNESS) * 5.6
+	
+	for i = 0, mTimes do
+		cAltBarrage(i, mStep)
+		t_wait(delay)
+	end
+	
+	t_wait(delay)
+end
+
+-- pMirrorSpiral: spawns a spiral of rWallEx
+function pMirrorSpiral(mTimes, mExtra)
+	oldThickness = THICKNESS
+	THICKNESS = getPerfectThickness(THICKNESS)
+	delay = getPerfectDelay(THICKNESS)
+	startSide = getRandomSide()
+	loopDir = getRandomDir()	
+	j = 0
+	
+	for i = 0, mTimes do
+		rWallEx(startSide + j, mExtra)
+		j = j + loopDir
+		t_wait(delay)
+	end
+	
+	THICKNESS = oldThickness
+	
+	t_wait(getPerfectDelayDM(THICKNESS) * 6.5)
+end
+
+-- pMirrorSpiralDouble: spawns a spiral of rWallEx where you need to change direction
+function pMirrorSpiralDouble(mTimes, mExtra)
+	oldThickness = THICKNESS
+	THICKNESS = getPerfectThickness(THICKNESS)
+	delay = getPerfectDelayDM(THICKNESS)
+	startSide = getRandomSide()
+	currentSide = startSide
+	loopDir = getRandomDir()	
+	j = 0
+	
+	for i = 0, mTimes do
+		rWallEx(startSide + j, mExtra)
+		j = j + loopDir
+		t_wait(delay)
+	end
+	
+	rWallEx(startSide + j, mExtra)
+	t_wait(delay * 0.9)
+	
+	rWallEx(startSide + j, mExtra)
+	t_wait(delay * 0.9)
+	
+	loopDir = loopDir * -1
+	
+	for i = 0, mTimes + 1 do
+		currentSide = currentSide + loopDir;
+		rWallEx(currentSide + j - 1, mExtra)
+		j = j + loopDir
+		t_wait(delay)
+	end
+	
+	THICKNESS = oldThickness
+	t_wait(getPerfectDelayDM(THICKNESS) * 7.5)
+end
+
+-- pBarrageSpiral: spawns a spiral of cBarrage
+function pBarrageSpiral(mTimes, mDelayMult, mStep)
+	delay = getPerfectDelayDM(THICKNESS) * 5.6 * mDelayMult
+	startSide = getRandomSide()
+	loopDir = mStep * getRandomDir()	
+	j = 0
+	
+	for i = 0, mTimes do
+		cBarrage(startSide + j)
+		j = j + loopDir
+		t_wait(delay)
+		if(l_getSides() < 6) then t_wait(delay * 0.6) end
+	end
+	
+	t_wait(getPerfectDelayDM(THICKNESS) * 6.1)
+end
+
+-- pDMBarrageSpiral: spawns a spiral of cBarrage, with static delay
+function pDMBarrageSpiral(mTimes, mDelayMult, mStep)
+	delay = (getPerfectDelayDM(THICKNESS) * 5.42) * (mDelayMult / (u_getDifficultyMult() ^ 0.4)) * (u_getSpeedMultDM() ^ 0.35)
+	startSide = getRandomSide()
+	loopDir = mStep * getRandomDir()	
+	j = 0
+	
+	for i = 0, mTimes do
+		cBarrage(startSide + j)
+		j = j + loopDir
+		t_wait(delay)
+		if(l_getSides() < 6) then t_wait(delay * 0.49) end
+	end
+	
+	t_wait(getPerfectDelayDM(THICKNESS) * (6.7 * (u_getDifficultyMult() ^ 0.7)))
+end
+
+-- pWallExVortex: spawns left-left right-right spiral patters
+function pWallExVortex(mTimes, mStep, mExtraMult)
+	delay = getPerfectDelayDM(THICKNESS) * 5.0 
+	startSide = getRandomSide()
+	loopDir = getRandomDir()
+	currentSide = startSide
+	
+	for j = 0, mTimes do
+		for i = 0, mStep do
+			currentSide = currentSide + loopDir
+			rWallEx(currentSide, loopDir * mExtraMult)
+			t_wait(delay)
+		end
+		
+		loopDir = loopDir * -1
+		
+		for i = 0, mStep + 1 do
+			currentSide = currentSide + loopDir;
+			rWallEx(currentSide, loopDir * mExtraMult)
+			t_wait(delay)
+		end
+	end
+	
+	t_wait(getPerfectDelayDM(THICKNESS) * 5.5)
+end
+
+-- pInverseBarrage: spawns two barrages who force you to turn 180 degrees
+function pInverseBarrage(mTimes)
+	delay = getPerfectDelayDM(THICKNESS) * 9.9
+	startSide = getRandomSide()
+	
+	for i = 0, mTimes do
+		cBarrage(startSide)
+		t_wait(delay)
+		if(l_getSides() < 6) then t_wait(delay * 0.8) end
+		cBarrage(startSide + getHalfSides())
+		t_wait(delay)
+	end
+	
+	t_wait(getPerfectDelayDM(THICKNESS) * 2.5)
+end
+
+-- pRandomBarrage: spawns barrages with random side, and waits humanly-possible times depending on the sides distance
+function pRandomBarrage(mTimes, mDelayMult)
+	side = getRandomSide()
+	oldSide = 0
+	
+	for i = 0, mTimes do	
+		cBarrage(side)
+		oldSide = side
+		side = getRandomSide()
+		t_wait(getPerfectDelayDM(THICKNESS) * (2 + (getSideDistance(side, oldSide)*mDelayMult)))
+	end
+	
+	t_wait(getPerfectDelayDM(THICKNESS) * 5.6)
+end
+
+-- pMirrorWallStrip: spawns rWalls close to one another on the same side
+function pMirrorWallStrip(mTimes, mExtra)
+	delay = getPerfectDelayDM(THICKNESS) * 3.65
+	startSide = getRandomSide()
+	
+	for i = 0, mTimes do
+		rWallEx(startSide, mExtra)
+		t_wait(delay)
+	end
+	
+	t_wait(getPerfectDelayDM(THICKNESS) * 5.00)
+end
+
+-- pTunnel: forces you to circle around a very thick wall
+function pTunnel(mTimes)
+	oldThickness = THICKNESS
+	myThickness = getPerfectThickness(THICKNESS)
+	delay = getPerfectDelay(myThickness) * 5
+	startSide = getRandomSide()
+	loopDir = getRandomDir()
+	
+	THICKNESS = myThickness
+	
+	for i = 0, mTimes do
+		if i < mTimes then
+			w_wall(startSide, myThickness + 5 * u_getSpeedMultDM() * delay)
+		end
+		
+		cBarrage(startSide + loopDir)
+		t_wait(delay)
+		
+		loopDir = loopDir * -1
+	end
+	
+	THICKNESS = oldThickness
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Scripts/utils.lua b/_RELEASE/Packs-orig/cube/Scripts/utils.lua
new file mode 100644
index 0000000..300f63c
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Scripts/utils.lua
@@ -0,0 +1,28 @@
+-- initialize random seed
+math.randomseed(os.time())
+math.random()
+math.random()
+math.random()
+
+-- shuffle: shuffles an array
+function shuffle(t)
+	math.randomseed(os.time())
+	local iterations = #t
+	local j
+	for i = iterations, 2, -1 do
+			j = math.random(i)
+			t[i], t[j] = t[j], t[i]
+	end
+	
+	return t
+end
+
+-- clamp: clamps a number between two values
+function clamp(input, min_val, max_val)
+	if input < min_val then
+		input = min_val
+	elseif input > max_val then
+		input = max_val
+	end
+	return input
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Styles/apeirogon.json b/_RELEASE/Packs-orig/cube/Styles/apeirogon.json
new file mode 100644
index 0000000..3436509
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Styles/apeirogon.json
@@ -0,0 +1,30 @@
+{
+	// Style data id
+	"id": "apeirogon",
+
+	// Hue options
+	"hue_min": 149,
+	"hue_max": 360,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.8,
+	"pulse_increment": 0.027,
+
+	// 3D options
+	"3D_depth": 8,
+	"3D_skew": 0.15,
+	"3D_spacing": 1.5,
+	
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [253, 253, 253, 255], "pulse": [0, 0, 0, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [90, 90, 90, 255], "pulse": [75, 15, 15, 0]},
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [60, 60, 60, 255], "pulse": [0, 0, 0, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Styles/babysteps.json b/_RELEASE/Packs-orig/cube/Styles/babysteps.json
new file mode 100644
index 0000000..d296881
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Styles/babysteps.json
@@ -0,0 +1,34 @@
+{
+	// Style data id
+	"id": "babysteps",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 360,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 4,
+	"3D_skew": 0.15,
+	"3D_spacing": 2.5,
+	"3D_darken_multiplier": 1.1,
+	"3D_alpha_multiplier": 0.4,
+	"3D_alpha_falloff": 15.0,
+	"3D_override_color": [85, 95, 155, 255],
+	
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [0, 0, 0, 255], "pulse": [0, 0, 0, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [240, 240, 240, 255], "pulse": [0, 0, 0, 0]},
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [200, 200, 200, 255], "pulse": [0, 0, 25, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Styles/commando.json b/_RELEASE/Packs-orig/cube/Styles/commando.json
new file mode 100644
index 0000000..187ff16
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Styles/commando.json
@@ -0,0 +1,36 @@
+{
+	// Style data id
+	"id": "commando",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 255,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": -1.5,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+	
+	// 3D options
+	"3D_depth": 7,
+	"3D_skew": 0.20,
+	"3D_spacing": 1.3,
+	"3D_darken_multiplier": 1.6,
+	"3D_alpha_multiplier": 1,
+	"3D_alpha_falloff": 0.1,
+	"3D_override_color": [125, 185, 125, 255],
+
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [28, 20, 13, 225], "pulse": [0, 0, 0, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [242, 233, 225, 255], "pulse": [0, 0, 0, 0] },
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [203, 232, 107, 255], "pulse": [-70, 0, 0, 0] },
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [255, 255, 255, 255], "pulse": [0, 0, 0, 0] },
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [203, 232, 107, 255], "pulse": [-70, 0, 0, 0] }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Styles/dangertest.json b/_RELEASE/Packs-orig/cube/Styles/dangertest.json
new file mode 100644
index 0000000..b9a92c9
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Styles/dangertest.json
@@ -0,0 +1,34 @@
+{
+	// Style data id
+	"id": "dangertest",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 360,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+
+	// 3D options
+	"3D_depth": 5,
+	"3D_skew": 0.15,
+	"3D_spacing": 1.5,
+	"3D_darken_multiplier": 1.5,
+	"3D_alpha_multiplier": 0.5,
+	"3D_alpha_falloff": 15.0,
+	"3D_override_color": [45, 45, 45, 255],
+
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+	
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [253, 253, 253, 255], "pulse": [0, 0, 0, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [73, 73, 0, 255], "pulse": [0, 0, 0, 0]},
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [11, 11, 11, 255], "pulse": [0, 0, 0, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Styles/euclideanpc.json b/_RELEASE/Packs-orig/cube/Styles/euclideanpc.json
new file mode 100644
index 0000000..6c1447f
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Styles/euclideanpc.json
@@ -0,0 +1,34 @@
+{
+	// Style data id
+	"id": "euclideanpc",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 360,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 12,
+	"3D_skew": 0.15,
+	"3D_spacing": 2.1,
+	"3D_darken_multiplier": 1.1,
+	"3D_alpha_multiplier": 0.4,
+	"3D_alpha_falloff": 1.0,
+	"3D_override_color": [166, 166, 166, 255],
+	
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [253, 253, 253, 255], "pulse": [0, 0, 0, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [73, 73, 0, 255], "pulse": [0, 0, 0, 0]},
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [11, 11, 11, 255], "pulse": [0, 0, 0, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Styles/flatteringshape.json b/_RELEASE/Packs-orig/cube/Styles/flatteringshape.json
new file mode 100644
index 0000000..cf8b59a
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Styles/flatteringshape.json
@@ -0,0 +1,30 @@
+{
+	// Style data id
+	"id": "flatteringshape",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 160,
+	"hue_ping_pong": true,
+	"hue_increment": 0.7,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 2.0,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 7,
+	"3D_skew": 0.15,
+	"3D_spacing": 1.2,
+	
+	// Main color
+	"main": { "main": true, "dynamic": true, "value": [255, 0, 0, 255], "pulse": [0, 50, 0, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 2.7, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]},
+		{ "dynamic": false, "dynamic_offset": true, "dynamic_darkness": 2.5, "value": [45, 60, 45, 255], "pulse": [25, 25, 25, 0], "offset": 5.0}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Styles/goldenratio.json b/_RELEASE/Packs-orig/cube/Styles/goldenratio.json
new file mode 100644
index 0000000..6e9a34b
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Styles/goldenratio.json
@@ -0,0 +1,34 @@
+{
+	// Style data id
+	"id": "goldenratio",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 255,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 8,
+	"3D_skew": 0.15,
+	"3D_spacing": 1.5,
+	
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [0, 0, 0, 225], "pulse": [25, 50, 75, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 25.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 50.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 75.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 100.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 125.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 150.0}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Styles/labyrinth.json b/_RELEASE/Packs-orig/cube/Styles/labyrinth.json
new file mode 100644
index 0000000..b4d6c9c
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Styles/labyrinth.json
@@ -0,0 +1,33 @@
+{
+	// Style data id
+	"id": "labyrinth",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 255,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": -1.9,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 4,
+	"3D_skew": 0.20,
+	"3D_spacing": 2.6,
+
+	
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [255, 255, 255, 225], "pulse": [0, 0, 0, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [12, 24, 30, 255], 	"pulse": [0, 0, 0, 0] },
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [73, 31, 92, 255], 	"pulse": [0, 0, -30, 0] },
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [25, 25, 25, 255], 	"pulse": [0, 0, 0, 0] },
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [73, 31, 92, 255], 	"pulse": [0, 0, -30, 0] }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Styles/pi.json b/_RELEASE/Packs-orig/cube/Styles/pi.json
new file mode 100644
index 0000000..f9b6484
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Styles/pi.json
@@ -0,0 +1,34 @@
+{
+	// Style data id
+	"id": "pi",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 255,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 4,
+	"3D_skew": 0.15,
+	"3D_spacing": 4.5,
+	
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [0, 0, 0, 225], "pulse": [99, 30, 165, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 74, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 25.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 50.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 115, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 75.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 98, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 100.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [250, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 125.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [163, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 150.0}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Styles/pointless.json b/_RELEASE/Packs-orig/cube/Styles/pointless.json
new file mode 100644
index 0000000..2c535b7
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Styles/pointless.json
@@ -0,0 +1,30 @@
+{
+	// Style data id
+	"id": "pointless",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 360,
+	"hue_ping_pong": false,
+	"hue_increment": 0.7,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 8,
+	"3D_skew": 0.15,
+	"3D_spacing": 1.5,
+	
+	// Main color
+	"main": { "main": true, "dynamic": true, "value": [255, 0, 0, 255], "pulse": [-80, 75, 65, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 2.7, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]},
+		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 3.5, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/Styles/seconddimension.json b/_RELEASE/Packs-orig/cube/Styles/seconddimension.json
new file mode 100644
index 0000000..6a689d0
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/Styles/seconddimension.json
@@ -0,0 +1,34 @@
+{
+	// Style data id
+	"id": "seconddimension",
+
+	// Hue options
+	"hue_min": 200,
+	"hue_max": 340,
+	"hue_ping_pong": true,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 7,
+	"3D_skew": 0.15,
+	"3D_spacing": 1.5,
+	"3D_darken_multiplier": 1.5,
+	"3D_alpha_multiplier": 0.5,
+	"3D_alpha_falloff": 19.0,
+	"3D_override_color": [45, 45, 45, 255],
+	
+	// Main color
+	"main": { "main": true, "dynamic": true, "value": [0, 0, 0, 255], "pulse": [0, 0, 0, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [15, 15, 15, 0], "offset": 4.7},
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [235, 235, 235, 255], "pulse": [0, 0, 0, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/cube/pack.json b/_RELEASE/Packs-orig/cube/pack.json
new file mode 100644
index 0000000..b7eefc9
--- /dev/null
+++ b/_RELEASE/Packs-orig/cube/pack.json
@@ -0,0 +1,4 @@
+{
+	"name": "cube",
+	"priority": -1000
+} 
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Levels/acceleradiant.json b/_RELEASE/Packs-orig/hypercube/Levels/acceleradiant.json
new file mode 100644
index 0000000..71955ab
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Levels/acceleradiant.json
@@ -0,0 +1,12 @@
+{
+	"id": "acceleradiant",
+	"name": "acceleradiant",
+	"description": "dunno lol",
+	"author": "vittorio romeo",	
+	"menuPriority": 20,
+	"selectable": true,
+	"styleId": "acceleradiant",
+	"musicId": "mrGawne",
+	"luaFile": "Scripts/Levels/acceleradiant.lua",
+	"difficultyMults": [0.85, 1.25, 1.4, 1.8]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Levels/centrifugal.json b/_RELEASE/Packs-orig/hypercube/Levels/centrifugal.json
new file mode 100644
index 0000000..a08075d
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Levels/centrifugal.json
@@ -0,0 +1,12 @@
+{
+	"id": "centrifugal",
+	"name": "centrifugal force",
+	"description": "insert cool description here",
+	"author": "vittorio romeo",	
+	"menuPriority": 71,
+	"selectable": true,
+	"styleId": "centrifugal",
+	"musicId": "tengil",
+	"luaFile": "Scripts/Levels/centrifugal.lua",
+	"difficultyMults": [1.2, 1.4, 1.6, 0.6, 0.3]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Levels/disc-o.json b/_RELEASE/Packs-orig/hypercube/Levels/disc-o.json
new file mode 100644
index 0000000..6476a0e
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Levels/disc-o.json
@@ -0,0 +1,12 @@
+{
+	"id": "disc-o",
+	"name": "disc-o",
+	"description": "dance!",
+	"author": "vittorio romeo",	
+	"menuPriority": 10,
+	"selectable": true,
+	"styleId": "disc-o",
+	"musicId": "dischipo",
+	"luaFile": "Scripts/Levels/disc-o.lua",
+	"difficultyMults": [1.6, 2.2, 2.8, 0.6, 0.4]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Levels/evotutorial.json b/_RELEASE/Packs-orig/hypercube/Levels/evotutorial.json
new file mode 100644
index 0000000..b0f3da7
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Levels/evotutorial.json
@@ -0,0 +1,11 @@
+{
+	"id": "evotutorial",
+	"name": "evotutorial",
+	"description": "learn new game mechanics here!",
+	"author": "vittorio romeo",	
+	"menuPriority": 0,
+	"selectable": true,
+	"styleId": "evotutorial",
+	"musicId": "gmoomh",
+	"luaFile": "Scripts/Levels/evotutorial.lua"
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Levels/g-force.json b/_RELEASE/Packs-orig/hypercube/Levels/g-force.json
new file mode 100644
index 0000000..cd8afea
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Levels/g-force.json
@@ -0,0 +1,12 @@
+{
+	"id": "g-force",
+	"name": "g-force",
+	"description": "beware the acceleration",
+	"author": "vittorio romeo",	
+	"menuPriority": 30,
+	"selectable": true,
+	"styleId": "g-force",
+	"musicId": "cpumood",
+	"luaFile": "Scripts/Levels/g-force.lua",
+	"difficultyMults": [1.6, 2.2, 2.8, 0.4, 0.6]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Levels/incongruence.json b/_RELEASE/Packs-orig/hypercube/Levels/incongruence.json
new file mode 100644
index 0000000..d3cb401
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Levels/incongruence.json
@@ -0,0 +1,12 @@
+{
+	"id": "incongruence",
+	"name": "incongruence",
+	"description": "choose your side...",
+	"author": "vittorio romeo",	
+	"menuPriority": 40,
+	"selectable": true,
+	"styleId": "incongruence",
+	"musicId": "flirtFlirt",
+	"luaFile": "Scripts/Levels/incongruence.lua",
+	"difficultyMults": [0.75, 1.25, 1.5, 1.8]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Levels/massacre.json b/_RELEASE/Packs-orig/hypercube/Levels/massacre.json
new file mode 100644
index 0000000..659747a
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Levels/massacre.json
@@ -0,0 +1,12 @@
+{
+	"id": "massacre",
+	"name": "massacre",
+	"description": "you >will< die",
+	"author": "vittorio romeo",	
+	"menuPriority": 80,
+	"selectable": true,
+	"styleId": "massacre",
+	"musicId": "massacrev2",
+	"luaFile": "Scripts/Levels/massacre.lua",
+	"difficultyMults": [1.3, 1.6, 0.3, 0.6]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Levels/polyhedrug.json b/_RELEASE/Packs-orig/hypercube/Levels/polyhedrug.json
new file mode 100644
index 0000000..e401541
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Levels/polyhedrug.json
@@ -0,0 +1,12 @@
+{
+	"id": "polyhedrug",
+	"name": "polyhedrug",
+	"description": "ready to experience something different?",
+	"author": "vittorio romeo",	
+	"menuPriority": 60,
+	"selectable": true,
+	"styleId": "polyhedrug",
+	"musicId": "johnnyDerp",
+	"luaFile": "Scripts/Levels/polyhedrug.lua",
+	"difficultyMults": [0.75, 1.25, 1.5, 1.8]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Levels/reppaws.json b/_RELEASE/Packs-orig/hypercube/Levels/reppaws.json
new file mode 100644
index 0000000..e17e9ce
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Levels/reppaws.json
@@ -0,0 +1,12 @@
+{
+	"id": "reppaws",
+	"name": "reppaws",
+	"description": "180 degrees of awesomeness",
+	"author": "vittorio romeo",	
+	"menuPriority": 70,
+	"selectable": true,
+	"styleId": "reppaws",
+	"musicId": "minimal",
+	"luaFile": "Scripts/Levels/reppaws.lua",
+	"difficultyMults": [1.2, 1.4, 1.6, 0.6, 0.3]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Levels/slither.json b/_RELEASE/Packs-orig/hypercube/Levels/slither.json
new file mode 100644
index 0000000..a544e7b
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Levels/slither.json
@@ -0,0 +1,12 @@
+{
+	"id": "slither",
+	"name": "slither",
+	"description": "sssssss",
+	"author": "vittorio romeo",	
+	"menuPriority": 50,
+	"selectable": true,
+	"styleId": "slither",
+	"musicId": "pep",
+	"luaFile": "Scripts/Levels/slither.lua",
+	"difficultyMults": [0.5, 2, 3]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Music/cpumood.json b/_RELEASE/Packs-orig/hypercube/Music/cpumood.json
new file mode 100644
index 0000000..1c926ff
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Music/cpumood.json
@@ -0,0 +1,20 @@
+{
+	// Music data id
+	"id": "cpumood",
+
+	// Music file
+	"file_name": "cpumood.ogg",
+
+	// Music information
+	"name": "CPU Mood",
+	"album": "",
+	"author": "Fantomenk",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 9 },
+		{ "time": 100 },
+		{ "time": 204 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Music/dischipo.json b/_RELEASE/Packs-orig/hypercube/Music/dischipo.json
new file mode 100644
index 0000000..ffed198
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Music/dischipo.json
@@ -0,0 +1,20 @@
+{
+	// Music data id
+	"id": "dischipo",
+
+	// Music file
+	"file_name": "gmoomh.ogg",
+
+	// Music information
+	"name": "Dischipo",
+	"album": "",
+	"author": "Fantomenk",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 15 },
+		{ "time": 54 },
+		{ "time": 127 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Music/flirtFlirt.json b/_RELEASE/Packs-orig/hypercube/Music/flirtFlirt.json
new file mode 100644
index 0000000..04bc11c
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Music/flirtFlirt.json
@@ -0,0 +1,21 @@
+{
+	// Music data id
+	"id": "flirtFlirt",
+
+	// Music file
+	"file_name": "flirtFlirt.ogg",
+
+	// Music information
+	"name": "Flirt Flirt Oh It Hurts",
+	"album": "Caps On, Hats Off",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 17 },
+		{ "time": 39 },
+		{ "time": 86 },
+		{ "time": 165 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Music/gmoomh.json b/_RELEASE/Packs-orig/hypercube/Music/gmoomh.json
new file mode 100644
index 0000000..81350f2
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Music/gmoomh.json
@@ -0,0 +1,20 @@
+{
+	// Music data id
+	"id": "gmoomh",
+
+	// Music file
+	"file_name": "gmoomh.ogg",
+
+	// Music information
+	"name": "Getting melodies out of my head",
+	"album": "",
+	"author": "Fantomenk",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 2 },
+		{ "time": 65 },
+		{ "time": 123 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Music/johnnyDerp.json b/_RELEASE/Packs-orig/hypercube/Music/johnnyDerp.json
new file mode 100644
index 0000000..c2bc30f
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Music/johnnyDerp.json
@@ -0,0 +1,20 @@
+{
+	// Music data id
+	"id": "johnnyDerp",
+
+	// Music file
+	"file_name": "johnnyDerp.ogg",
+
+	// Music information
+	"name": "Johnny Derp",
+	"album": "",
+	"author": "Dunderpatrullen VS. BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 7 },
+		{ "time": 46 },
+		{ "time": 145 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Music/massacrev2.json b/_RELEASE/Packs-orig/hypercube/Music/massacrev2.json
new file mode 100644
index 0000000..178acfc
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Music/massacrev2.json
@@ -0,0 +1,20 @@
+{
+	// Music data id
+	"id": "massacrev2",
+
+	// Music file
+	"file_name": "massacrev2.ogg",
+
+	// Music information
+	"name": "Massacre (version 2)",
+	"album": "",
+	"author": "Fantomenk",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 15 },
+		{ "time": 83 },
+		{ "time": 160 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Music/minimal.json b/_RELEASE/Packs-orig/hypercube/Music/minimal.json
new file mode 100644
index 0000000..8d1390b
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Music/minimal.json
@@ -0,0 +1,20 @@
+{
+	// Music data id
+	"id": "minimal",
+
+	// Music file
+	"file_name": "minimal.ogg",
+
+	// Music information
+	"name": "Minimal",
+	"album": "",
+	"author": "Fantomenk",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 13 },
+		{ "time": 27 },
+		{ "time": 75 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Music/mrGawne.json b/_RELEASE/Packs-orig/hypercube/Music/mrGawne.json
new file mode 100644
index 0000000..e216472
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Music/mrGawne.json
@@ -0,0 +1,20 @@
+{
+	// Music data id
+	"id": "mrGawne",
+
+	// Music file
+	"file_name": "mrGawne.ogg",
+
+	// Music information
+	"name": "Be Gone Mr. Gawne",
+	"album": "Caps On, Hats Off",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 18 },
+		{ "time": 42 },
+		{ "time": 90 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Music/pep.json b/_RELEASE/Packs-orig/hypercube/Music/pep.json
new file mode 100644
index 0000000..4790e03
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Music/pep.json
@@ -0,0 +1,20 @@
+{
+	// Music data id
+	"id": "pep",
+
+	// Music file
+	"file_name": "pep.ogg",
+
+	// Music information
+	"name": "Platforms and Pitfalls",
+	"album": "",
+	"author": "Fantomenk",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 13 },
+		{ "time": 72 },
+		{ "time": 110 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Music/tengil.json b/_RELEASE/Packs-orig/hypercube/Music/tengil.json
new file mode 100644
index 0000000..998b744
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Music/tengil.json
@@ -0,0 +1,19 @@
+{
+	// Music data id
+	"id": "tengil",
+
+	// Music file
+	"file_name": "tengil.ogg",
+
+	// Music information
+	"name": "Tengil",
+	"album": "",
+	"author": "Fantomenk",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 57 },
+		{ "time": 145 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Scripts/Levels/acceleradiant.lua b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/acceleradiant.lua
new file mode 100644
index 0000000..f608d57
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/acceleradiant.lua
@@ -0,0 +1,92 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+u_execScript("nextpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then pACBarrage()
+	elseif mKey == 1 then pACBarrageMulti()
+	elseif mKey == 2 then pACBarrageMultiAltDir()
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(2.25)
+	l_setSpeedInc(0.045)
+	l_setRotationSpeed(0.27)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.045)
+	l_setDelayMult(1.1)
+	l_setDelayInc(-0.01)
+	l_setFastSpin(71.0)
+	l_setSides(6)
+	l_setSidesMin(5)
+	l_setSidesMax(7)
+	l_setIncTime(15)
+	l_setMaxInc(4)
+
+	l_setPulseMin(64)
+	l_setPulseMax(84)
+	l_setPulseSpeed(1.05)
+	l_setPulseSpeedR(1.34)
+	l_setPulseDelayMax(7)
+
+	l_setBeatPulseMax(15)
+	l_setBeatPulseDelayMax(21.8)
+
+	enableSwapIfDMGreaterThan(1.4)
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	addPattern(keys[index])
+	index = index + 1
+	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- continuous direction change (even if not on level increment)
+dirChangeTime = 400
+hueIMin = 0.0
+hueIMax = 22.0
+hueIStep = 0.0065
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+	dirChangeTime = dirChangeTime - mFrameTime;
+	if dirChangeTime < 0 then
+		-- do not change direction while fast spinning
+		if u_isFastSpinning() == false then
+			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
+			dirChangeTime = 400
+		end
+	end 
+
+	s_setHueInc(s_getHueInc() + hueIStep)
+	if(s_getHueInc() > hueIMax) then hueIStep = hueIStep * -1 end
+	if(s_getHueInc() < hueIMin) then hueIStep = hueIStep * -1 end
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Scripts/Levels/centrifugal.lua b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/centrifugal.lua
new file mode 100644
index 0000000..5efde07
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/centrifugal.lua
@@ -0,0 +1,66 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+u_execScript("nextpatterns.lua")
+u_execScript("evolutionpatterns.lua")
+
+curveSpeed = 1
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(2.91)
+	l_setSpeedInc(0.0)
+	l_setRotationSpeed(0.0)
+	l_setRotationSpeedMax(0.0)
+	l_setRotationSpeedInc(0.0)
+	l_setDelayMult(1.35)
+	l_setDelayInc(0.0)
+	l_setFastSpin(0.0)
+	l_setSides(15)
+	l_setSidesMin(15)
+	l_setSidesMax(15)
+	l_setIncTime(10)
+
+	l_setWallSkewLeft(0)
+
+	l_setPulseMin(60)
+	l_setPulseMax(60)
+	l_setPulseSpeed(0)
+	l_setPulseSpeedR(0)
+	l_setPulseDelayMax(6.8)
+
+	l_setBeatPulseMax(20)
+	l_setBeatPulseDelayMax(27.2)
+
+	l_setSwapEnabled(true)
+	l_addTracked("curveSpeed", "curve speed")
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	hmcSimpleBarrageSNeigh(getRandomSide(), getRandomDir() * curveSpeed, 2) 
+	t_wait(getPerfectDelayDM(THICKNESS) * 6.22)
+end
+
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+	if curveSpeed < 3 then
+		curveSpeed = curveSpeed + 0.4
+		m_messageAddImportant("Curve speed: "..curveSpeed, 120)
+	end
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Scripts/Levels/disc-o.lua b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/disc-o.lua
new file mode 100644
index 0000000..b02a574
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/disc-o.lua
@@ -0,0 +1,105 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+u_execScript("nextpatterns.lua")
+u_execScript("evolutionpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then pAltBarrage(math.random(1, 3), 2) 
+	elseif mKey == 1 then pMirrorSpiral(math.random(2, 4), 0)
+	elseif mKey == 2 then pBarrageSpiral(math.random(0, 3), 1, 1)
+	elseif mKey == 3 then pBarrageSpiral(math.random(0, 2), 1.2, 2)
+	elseif mKey == 4 then pBarrageSpiral(2, 0.7, 1)
+	elseif mKey == 5 then pInverseBarrage(0)
+	elseif mKey == 6 then hmcDefBarrageSpiral()
+	elseif mKey == 7 then pMirrorWallStrip(1, 0)
+	elseif mKey == 8 then hmcDefSpinner()
+	elseif mKey == 9 then hmcDefBarrage()
+	elseif mKey == 10 then hmcDef2Cage()
+	elseif mKey == 11 then hmcDefBarrageSpiralSpin()
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 10, 8, 8, 9, 9, 9, 9, 6, 11, 11, 10, 10 }
+keys = shuffle(keys)
+index = 0
+
+specials = { "cage", "spinner", "barrage" }
+special = "none"
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(1.1)
+	l_setSpeedInc(0.1)
+	l_setRotationSpeed(0.2)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.035)
+	l_setDelayMult(1.2)
+	l_setDelayInc(0.0)
+	l_setFastSpin(0.0)
+	l_setSides(6)
+	l_setSidesMin(6)
+	l_setSidesMax(6)
+	l_setIncTime(15)
+	l_setMaxInc(6)
+
+	l_setPulseMin(77)
+	l_setPulseMax(95)
+	l_setPulseSpeed(1.95)
+	l_setPulseSpeedR(0.51)
+	l_setPulseDelayMax(13)
+
+	l_setBeatPulseMax(17)
+	l_setBeatPulseDelayMax(27.8)
+
+	l_setSwapEnabled(true)
+	l_addTracked("special", "special")
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	if special == "none" then
+		addPattern(keys[index])
+		index = index + 1
+ 	
+		if index - 1 == #keys then
+			index = 1
+		end
+	elseif special == "cage" then
+		addPattern(10)
+	elseif special == "spinner" then
+		addPattern(8)
+	elseif special == "barrage" then
+		addPattern(9)
+	end
+end
+
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+	specials = shuffle(specials)
+
+	if special == "none" then
+		special = specials[1]
+		m_messageAddImportant("Special: "..special, 120)
+	else
+		special = "none"
+	end
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end
diff --git a/_RELEASE/Packs-orig/hypercube/Scripts/Levels/disc-o.lua.orig b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/disc-o.lua.orig
new file mode 100644
index 0000000..b50c201
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/disc-o.lua.orig
@@ -0,0 +1,105 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+u_execScript("nextpatterns.lua")
+u_execScript("evolutionpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then pAltBarrage(math.random(1, 3), 2) 
+	elseif mKey == 1 then pMirrorSpiral(math.random(2, 4), 0)
+	elseif mKey == 2 then pBarrageSpiral(math.random(0, 3), 1, 1)
+	elseif mKey == 3 then pBarrageSpiral(math.random(0, 2), 1.2, 2)
+	elseif mKey == 4 then pBarrageSpiral(2, 0.7, 1)
+	elseif mKey == 5 then pInverseBarrage(0)
+	elseif mKey == 6 then hmcDefBarrageSpiral()
+	elseif mKey == 7 then pMirrorWallStrip(1, 0)
+	elseif mKey == 8 then hmcDefSpinner()
+	elseif mKey == 9 then hmcDefBarrage()
+	elseif mKey == 10 then hmcDef2Cage()
+	elseif mKey == 11 then hmcDefBarrageSpiralSpin()
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 10, 8, 8, 9, 9, 9, 9, 6, 11, 11, 10, 10 }
+keys = shuffle(keys)
+index = 0
+
+specials = { "cage", "spinner", "barrage" }
+special = "none"
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(1.7)
+	l_setSpeedInc(0.15)
+	l_setRotationSpeed(0.1)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.035)
+	l_setDelayMult(1.2)
+	l_setDelayInc(0.0)
+	l_setFastSpin(0.0)
+	l_setSides(6)
+	l_setSidesMin(6)
+	l_setSidesMax(6)
+	l_setIncTime(15)
+	l_setMaxInc(6)
+
+	l_setPulseMin(77)
+	l_setPulseMax(95)
+	l_setPulseSpeed(1.95)
+	l_setPulseSpeedR(0.51)
+	l_setPulseDelayMax(13)
+
+	l_setBeatPulseMax(17)
+	l_setBeatPulseDelayMax(27.8)
+
+	l_setSwapEnabled(true)
+	l_addTracked("special", "special")
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	if special == "none" then
+		addPattern(keys[index])
+		index = index + 1
+ 	
+		if index - 1 == #keys then
+			index = 1
+		end
+	elseif special == "cage" then
+		addPattern(10)
+	elseif special == "spinner" then
+		addPattern(8)
+	elseif special == "barrage" then
+		addPattern(9)
+	end
+end
+
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+	specials = shuffle(specials)
+
+	if special == "none" then
+		special = specials[1]
+		m_messageAddImportant("Special: "..special, 120)
+	else
+		special = "none"
+	end
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Scripts/Levels/evotutorial.lua b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/evotutorial.lua
new file mode 100644
index 0000000..a4c6f96
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/evotutorial.lua
@@ -0,0 +1,178 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+u_execScript("nextpatterns.lua")
+u_execScript("evolutionpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then cBarrage(0)
+	elseif mKey == 1 then hmcBarrageN(0, 0, 0, 0.05, -3.8, 2.7, true); t_wait(55)
+	elseif mKey == 2 then hmcBarrageN(0, 0, 0, -0.05, -2.7, 3.8, true); t_wait(55)
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 1, 1, 2, 2 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(1.1)
+	l_setSpeedInc(0.045)
+	l_setRotationSpeed(0.1)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.045)
+	l_setDelayMult(1.0)
+	l_setDelayInc(0.0)
+	l_setFastSpin(71.0)
+	l_setSides(6)
+	l_setSidesMin(5)
+	l_setSidesMax(7)
+	l_setIncTime(0)
+
+	l_setWallSkewLeft(18)
+
+	l_setPulseMin(64)
+	l_setPulseMax(84)
+	l_setPulseSpeed(1.05)
+	l_setPulseSpeedR(1.35)
+	l_setPulseDelayMax(7)
+
+	l_setBeatPulseMax(15)
+	l_setBeatPulseDelayMax(110)
+
+	l_setSwapEnabled(true)
+
+	l_setTutorialMode(true)
+	l_setIncEnabled(false)
+end
+
+swappedOnce = false
+
+-- onCursorSwap is executed whenever the player executes a successful 180° swap
+function onCursorSwap()
+	if swappedOnce == false then
+		u_log("swap detected!")
+		swappedOnce = true
+	end
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+	m_messageAddImportant("welcome to the evolution tutorial", 120)
+	m_messageAddImportant("today you'll be introduced to...", 120)
+	m_messageAddImportant("1. swapping!", 100)
+	m_messageAddImportant("2. curving walls!", 100)
+	m_messageAddImportant("", 120)
+	m_messageAddImportant("press space or middle mouse button\nto swap", 250)
+	m_messageAddImportant("it allows you to rotate 180 degrees!", 200)
+	m_messageAddImportant("", 120)
+
+	m_messageAddImportant("now: curving walls", 120)
+	m_messageAddImportant("they can be simple...", 120)
+	m_messageAddImportant("", 120 * 3 + 80)
+
+	t_wait(135 * 8)
+	hmcSimpleBarrage(1)
+	t_wait(100)
+	hmcSimpleBarrage(-1)
+	t_wait(50)
+	hmcSimpleBarrage(1)
+	t_wait(100)
+	hmcSimpleBarrage(-2.5)
+	t_wait(80)
+	hmcSimpleBarrage(2.5)
+	t_wait(80)
+	hmcSimpleBarrage(3)
+
+	t_wait(50)
+	m_messageAddImportant("...in various patterns...", 130)
+	m_messageAddImportant("", 120 * 5 + 80)
+	t_wait(130)
+
+	hmcSimpleTwirl(5, 1, 0)
+	t_wait(50)
+	hmcSimpleTwirl(5, -2.5, 0.3)
+
+	m_messageAddImportant("...or can accellerate!", 130)
+	m_messageAddImportant("", 120 * 4 + 40)
+	t_wait(130)
+
+	hmcBarrage(0, 0.05, -1.5, 3, true)
+	t_wait(80)
+	hmcBarrage(0, -0.05, -3, 3, true)
+	t_wait(100)
+	hmcBarrage(0, 0.1, -2, 2, true)
+	t_wait(100)
+	hmcBarrage(0, 0.1, -3, 3, true)
+	t_wait(200)
+
+	m_messageAddImportant("they can also do crazy stuff!", 130)
+	m_messageAddImportant("", 120 * 8 + 50)
+
+	hmcSimpleCage(2.5, 1)
+	t_wait(80)
+	hmcSimpleCage(2.5, -1)
+	t_wait(100)
+	hmcSimpleCage(2.5, 1)
+	hmcSimpleCage(2.5, 1)
+	t_wait(100)
+	hmcSimpleCage(2.5, 1)
+	hmcSimpleCage(2.5, -1)
+	t_wait(100)
+	hmcSimpleSpinner(1)
+	t_wait(100)
+	hmcSimpleSpinner(-2)
+	t_wait(100)
+	hmcSimpleSpinner(3)
+	t_wait(100)
+	hmcSimpleCage(1.5, 1)
+	hmcSimpleCage(2.5, 1)
+	t_wait(100)
+	hmcSimpleCage(1.5, 1)
+	hmcSimpleCage(2.5, -1)
+	t_wait(100)
+	hmcSimpleSpinner(1)
+	hmcSimpleSpinner(1.2)
+	t_wait(100)
+	hmcSimpleSpinner(1)
+	hmcSimpleSpinner(-1.2)
+	t_wait(700)
+
+	m_messageAddImportant("well done!", 130)
+	m_messageAddImportant("now play some real levels!", 138)
+
+	u_kill()
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- continuous direction change (even if not on level increment)
+dirChangeTime = 600
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+	dirChangeTime = dirChangeTime - mFrameTime;
+	if dirChangeTime < 0 then
+		-- do not change direction while fast spinning
+		if u_isFastSpinning() == false then
+			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
+			dirChangeTime = 400
+		end
+	end 
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Scripts/Levels/g-force.lua b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/g-force.lua
new file mode 100644
index 0000000..0a9768c
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/g-force.lua
@@ -0,0 +1,122 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+u_execScript("nextpatterns.lua")
+u_execScript("evolutionpatterns.lua")
+
+function gforceBarrage()
+	cBarrage(getRandomSide()) 
+	t_wait(getPerfectDelayDM(THICKNESS) * 6.1)
+end
+
+function gforceBarrageAssault()
+	cBarrage(getRandomSide()) 
+	t_wait(getPerfectDelayDM(THICKNESS) * 3.1)
+end
+
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then hmcDefAccelBarrage()
+	elseif mKey == 1 then gforceBarrage()
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 1 }
+keys = shuffle(keys)
+index = 0
+
+specials = { "double", "assault", "incongruence", "dizzy" } 
+special = "none"
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(2.1)
+	l_setSpeedInc(0.16)
+	l_setRotationSpeed(0.12)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.035)
+	l_setDelayMult(1.9)
+	l_setDelayInc(0.0)
+	l_setFastSpin(0.0)
+	l_setSides(4)
+	l_setSidesMin(4)
+	l_setSidesMax(4)
+	l_setIncTime(10)
+	l_setMaxInc(10)
+
+	l_setWallSkewLeft(-15)
+
+	l_setPulseMin(77)
+	l_setPulseMax(95)
+	l_setPulseSpeed(2.95)
+	l_setPulseSpeedR(0.5)
+	l_setPulseDelayMax(13)
+
+	l_setBeatPulseMax(19)
+	l_setBeatPulseDelayMax(14.2)
+
+	l_setSwapEnabled(true)
+	l_addTracked("special", "special")
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	if special == "incongruence" then
+		l_setSides(math.random(4, 5))
+	else
+		l_setSides(4)
+	end
+
+	if special == "assault" then
+		gforceBarrageAssault()
+		return
+	end
+
+	if special == "dizzy" then
+		addPattern(0)
+		return
+	end
+
+	if special ~= "double" then
+		addPattern(keys[index])
+	else
+		addPattern(keys[index])
+		addPattern(keys[index])
+	end
+
+	index = index + 1
+	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+	specials = shuffle(specials)
+
+	if special == "none" then
+		special = specials[1]
+		m_messageAddImportant("Special: "..special, 120)
+	else
+		special = "none"
+	end
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Scripts/Levels/incongruence.lua b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/incongruence.lua
new file mode 100644
index 0000000..0b51ce8
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/incongruence.lua
@@ -0,0 +1,103 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+u_execScript("nextpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then pRCBarrage()
+	elseif mKey == 1 then pRCBarrageDouble()
+	elseif mKey == 2 then pRCBarrageSpin()
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 0, 1, 1, 2 }
+keys = shuffle(keys)
+index = 0
+lowerBound = 4
+upperBound = 6
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(2.7)
+	l_setSpeedInc(0.11)
+	l_setRotationSpeed(0.27)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.045)
+	l_setDelayMult(1.1)
+	l_setDelayInc(-0.04)
+	l_setFastSpin(71.0)
+	l_setSides(6)
+	l_setSidesMin(0)
+	l_setSidesMax(0)
+	l_setIncTime(15)
+	l_setMaxInc(4)
+
+	l_setPulseMin(64)
+	l_setPulseMax(84)
+	l_setPulseSpeed(1.05)
+	l_setPulseSpeedR(1.34)
+	l_setPulseDelayMax(7)
+
+	l_setBeatPulseMax(15)
+	l_setBeatPulseDelayMax(21.8)
+
+	l_addTracked("lowerBound", "min")
+	l_addTracked("upperBound", "max")
+	l_enableRndSideChanges(false)
+
+	enableSwapIfDMGreaterThan(1.5)
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+	m_messageAddImportant("Sides ("..lowerBound.." / "..upperBound..")", 170)
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	l_setSides(math.random(lowerBound, upperBound))
+	addPattern(keys[index])
+	index = index + 1
+	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+	lowerBound = math.random(4, 6)
+	upperBound = lowerBound + math.random(1, 3)
+	m_messageAddImportant("Sides ("..lowerBound.." / "..upperBound..")", 170)
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- continuous direction change (even if not on level increment)
+dirChangeTime = 400
+hueIMin = 0.0
+hueIMax = 22.0
+hueIStep = 0.0065
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+	dirChangeTime = dirChangeTime - mFrameTime;
+	if dirChangeTime < 0 then
+		-- do not change direction while fast spinning
+		if u_isFastSpinning() == false then
+			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
+			dirChangeTime = 400
+		end
+	end 
+
+	s_setHueInc(s_getHueInc() + hueIStep)
+	if(s_getHueInc() > hueIMax) then hueIStep = hueIStep * -1 end
+	if(s_getHueInc() < hueIMin) then hueIStep = hueIStep * -1 end
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Scripts/Levels/massacre.lua b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/massacre.lua
new file mode 100644
index 0000000..75834a1
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/massacre.lua
@@ -0,0 +1,129 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+u_execScript("nextpatterns.lua")
+u_execScript("evolutionpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then pAltBarrage(math.random(1, 2), 2) 
+	elseif mKey == 1 then pBarrageSpiral(2, 0.6, 1)
+	elseif mKey == 2 then pInverseBarrage(0)
+	elseif mKey == 3 then hmcDefBarrageSpiralFast()
+	elseif mKey == 4 then pWallExVortex(0, 1, 1)
+	elseif mKey == 5 then pDMBarrageSpiral(math.random(2, 4), 0.4, 1)
+	elseif mKey == 6 then pRandomBarrage(math.random(1, 3), 2.25)
+	elseif mKey == 7 then pInverseBarrage(0)
+	elseif mKey == 8 then pMirrorWallStrip(1, 0)
+	elseif mKey == 9 then hmcDefSpinner()
+	elseif mKey == 10 then hmcDefBarrageSpiral()
+	elseif mKey == 11 then hmcDef2CageD()
+	elseif mKey == 12 then hmcDefBarrageSpiralSpin()
+	elseif mKey == 13 then hmcDefSpinnerSpiralAcc()
+	elseif mKey == 14 then hmcDefBarrageSpiralRnd()
+	elseif mKey == 15 then hmcDefBarrageInv()
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
+keys = shuffle(keys)
+index = 0
+
+specials = { "cage", "spinner", "barrage", "spiral" }
+special = "none"
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(2.7)
+	l_setSpeedInc(0.04)
+	l_setRotationSpeed(0.25)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.015)
+	l_setDelayMult(1.35)
+	l_setDelayInc(0.0)
+	l_setFastSpin(71.0)
+	l_setSides(6)
+	l_setSidesMin(6)
+	l_setSidesMax(6)
+	l_setIncTime(10)
+	l_setMaxInc(2)
+
+	l_setPulseMin(61)
+	l_setPulseMax(80)
+	l_setPulseSpeed(2.4)
+	l_setPulseSpeedR(1.45)
+	l_setPulseDelayMax(6.8)
+
+	l_setBeatPulseMax(18)
+	l_setBeatPulseDelayMax(18.8)
+
+	l_setSwapEnabled(true)
+	l_addTracked("special", "special")
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+	setCurveMult(0.85)
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	if special == "none" then
+		addPattern(keys[index])
+		index = index + 1
+ 	
+		if index - 1 == #keys then
+			index = 1
+		end
+	elseif special == "cage" then
+		addPattern(11)
+		addPattern(9)
+	elseif special == "spinner" then
+		addPattern(14)
+		addPattern(9)
+	elseif special == "barrage" then
+		addPattern(3)
+		addPattern(14)
+		addPattern(13)
+		addPattern(15)
+	elseif special == "spiral" then
+		addPattern(12)
+		addPattern(4)
+	end
+end
+
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+	specials = shuffle(specials)
+
+	if special == "none" then
+		special = specials[1]
+		m_messageAddImportant("Special: "..special, 120)
+	else
+		special = "none"
+	end
+end
+
+-- continuous direction change (even if not on level increment)
+dirChangeTime = 120
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+	dirChangeTime = dirChangeTime - mFrameTime;
+	if dirChangeTime < 0 then
+		-- do not change direction while fast spinning
+		if u_isFastSpinning() == false then
+			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
+			dirChangeTime = 200
+		end
+	end 
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Scripts/Levels/polyhedrug.lua b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/polyhedrug.lua
new file mode 100644
index 0000000..20f537d
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/polyhedrug.lua
@@ -0,0 +1,109 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+u_execScript("nextpatterns.lua")
+
+extra = 0
+level = 1
+incrementTime = 10
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then pTrapBarrage(math.random(0, l_getSides())) 
+	elseif mKey == 1 then pTrapBarrageDouble(math.random(0, l_getSides()))
+	elseif mKey == 2 then pTrapBarrageInverse(math.random(0, l_getSides()))
+	elseif mKey == 3 then pTrapBarrageAlt(math.random(0, l_getSides()))
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 0, 1, 1, 2, 2, 3, 3 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(2.0)
+	l_setSpeedInc(0.0)
+	l_setRotationSpeed(0.27)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.045)
+	l_setDelayMult(1.1)
+	l_setDelayInc(0.0)
+	l_setFastSpin(71.0)
+	l_setSides(4)
+	l_setSidesMin(0)
+	l_setSidesMax(0)
+	l_setIncTime(10)
+	l_setMaxInc(4)
+
+	l_setPulseMin(64)
+	l_setPulseMax(84)
+	l_setPulseSpeed(1.05)
+	l_setPulseSpeedR(1.34)
+	l_setPulseDelayMax(7)
+
+	l_setBeatPulseMax(15)
+	l_setBeatPulseDelayMax(21.8)
+
+	l_addTracked("level", "level")
+	l_addTracked("lowerBound", "min")
+	l_addTracked("upperBound", "max")
+	l_enableRndSideChanges(false)
+
+	enableSwapIfDMGreaterThan(1.5)
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+	m_messageAddImportant("level: "..(extra + 1).." / time: "..incrementTime, 170)
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	addPattern(keys[index])
+	index = index + 1
+	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+	extra = extra + 1
+	level = extra + 1
+	incrementTime = incrementTime + 5
+	l_setSides(l_getSides() + 1)
+	l_setIncTime(incrementTime)
+	m_messageAddImportant("level: "..(extra + 1).." / time: "..incrementTime, 170)
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- continuous direction change (even if not on level increment)
+dirChangeTime = 400
+hueIMin = 0.0
+hueIMax = 22.0
+hueIStep = 0.0065
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+	dirChangeTime = dirChangeTime - mFrameTime;
+	if dirChangeTime < 0 then
+		-- do not change direction while fast spinning
+		if u_isFastSpinning() == false then
+			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
+			dirChangeTime = 400
+		end
+	end 
+
+	s_setHueInc(s_getHueInc() + hueIStep)
+	if(s_getHueInc() > hueIMax) then hueIStep = hueIStep * -1 end
+	if(s_getHueInc() < hueIMin) then hueIStep = hueIStep * -1 end
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Scripts/Levels/reppaws.lua b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/reppaws.lua
new file mode 100644
index 0000000..90e15e2
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/reppaws.lua
@@ -0,0 +1,86 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+u_execScript("nextpatterns.lua")
+u_execScript("evolutionpatterns.lua")
+
+gap = 6
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then cBarrageN(getRandomSide(), gap) t_wait(getPerfectDelayDM(THICKNESS) * 6)
+	elseif mKey == 1 then hmcSimpleBarrageSNeigh(getRandomSide(), 0, gap) t_wait(getPerfectDelayDM(THICKNESS) * 6)
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 0, 0, 1, 1, 1 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(3.0)
+	l_setSpeedInc(0.0)
+	l_setRotationSpeed(0.22)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.0)
+	l_setDelayMult(1.35)
+	l_setDelayInc(0.0)
+	l_setFastSpin(71.0)
+	l_setSides(32)
+	l_setSidesMin(32)
+	l_setSidesMax(32)
+	l_setIncTime(10)
+
+	l_setWallSkewLeft(15)
+
+	l_setPulseMin(61)
+	l_setPulseMax(80)
+	l_setPulseSpeed(3.6)
+	l_setPulseSpeedR(1.45)
+	l_setPulseDelayMax(6.8)
+
+	l_setBeatPulseMax(20)
+	l_setBeatPulseDelayMax(26.1)
+
+	l_setSwapEnabled(true)
+	l_addTracked("gap", "gap size")
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+	syncCurveWithRotationSpeed(0, 0)
+	m_messageAdd("remember, swap with spacebar!", 120)
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	addPattern(keys[index])
+
+	index = index + 1
+	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+	if gap > 2 then
+		gap = gap -1
+		m_messageAddImportant("Gap size: "..gap, 120)
+	end
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Scripts/Levels/slither.lua b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/slither.lua
new file mode 100644
index 0000000..8e92e76
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Scripts/Levels/slither.lua
@@ -0,0 +1,110 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+u_execScript("nextpatterns.lua")
+u_execScript("evolutionpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then pAltBarrage(math.random(1, 3), 2) 
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0 }
+keys = shuffle(keys)
+index = 0
+
+smin = 2
+smax = 2
+
+level = 1
+incrementTime = 10
+
+range = "("..(smin * 2).."/"..(smax * 2).."]"
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(1.7)
+	l_setSpeedInc(0.1)
+	l_setRotationSpeed(0.2)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.035)
+	l_setDelayMult(1.1)
+	l_setDelayInc(0.0)
+	l_setFastSpin(0.0)
+	l_setSides(3)
+	l_setSidesMin(3)
+	l_setSidesMax(3)
+	l_setIncTime(10)
+
+	l_setWallAngleLeft(-25)
+
+	l_setPulseMin(60)
+	l_setPulseMax(80)
+	l_setPulseSpeed(3.6)
+	l_setPulseSpeedR(1.45)
+	l_setPulseDelayMax(7)
+
+	l_setBeatPulseMax(15)
+	l_setBeatPulseDelayMax(21.8)
+
+	l_setSwapEnabled(true)
+	l_addTracked("level", "level")
+	l_addTracked("next at", "incrementTime")
+	l_addTracked("range", "range")
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+	m_messageAdd("remember, you can focus with lshift!", 150)
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	l_setSides(math.random(smin, smax) * 2)
+	hmcDefSpinnerSpiralAcc()
+end
+
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+	level = level + 1
+	incrementTime = incrementTime + 5
+	m_messageAddImportant("level: "..(level).." / time: "..incrementTime, 150)
+
+	if smax < 4 then
+		smax = smax + 1;
+	else
+		smin = smin + 1;
+		smax = smin;
+	end
+
+	range = "("..(smin * 2).."/"..(smax * 2).."]"
+	m_messageAddImportant("Range: "..range, 100)
+
+	l_setSides(l_getSides() + 2)
+	l_setIncTime(incrementTime)
+end
+
+-- continuous direction change (even if not on level increment)
+dirChangeTime = 120
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+	dirChangeTime = dirChangeTime - mFrameTime;
+	if dirChangeTime < 0 then
+		-- do not change direction while fast spinning
+		if u_isFastSpinning() == false then
+			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
+			dirChangeTime = 400
+		end
+	end 
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Scripts/alternativepatterns.lua b/_RELEASE/Packs-orig/hypercube/Scripts/alternativepatterns.lua
new file mode 100644
index 0000000..0266f12
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Scripts/alternativepatterns.lua
@@ -0,0 +1,119 @@
+u_execScript("common.lua")
+
+function pAltMirrorSpiral(mTimes, mExtra)
+	oldThickness = THICKNESS
+	THICKNESS = getPerfectThickness(THICKNESS)
+	delay = getPerfectDelay(THICKNESS)
+	startSide = getRandomSide()
+	loopDir = getRandomDir()	
+	for k = 1, #mTimes do
+		for i = 1, mTimes[k] do
+			rWallEx(startSide, mExtra)
+			if (k % 2) == 0 then
+				startSide = startSide + loopDir
+			else
+				startSide = startSide - loopDir
+			end
+			t_wait(delay)
+		end 
+	end
+
+	THICKNESS = oldThickness
+	
+	t_wait(getPerfectDelay(THICKNESS) * 6.5)
+end
+
+function randomArray(mNumber,mLower,mUpper)
+	a = {}
+	for k = 1, mNumber do
+		a[k] = math.random(mLower,mUpper)
+	end
+	return a
+end
+
+function pAltTunnel(mTimes,mFree)
+	oldThickness = THICKNESS
+	myThickness = getPerfectThickness(THICKNESS)
+	delay = getPerfectDelay(myThickness) * 5
+	startSide = getRandomSide()
+	loopDir = getRandomDir()
+	
+	THICKNESS = myThickness
+	
+	for i = 0, mTimes do
+		if i < mTimes then
+			w_wall(startSide, myThickness + 5 * l_getSpeedMult() * delay)
+		end
+		
+		cBarrageN(startSide + loopDir,mFree)
+		t_wait(delay)
+		
+		loopDir = loopDir * -1
+	end
+	
+	THICKNESS = oldThickness
+end
+
+function cycle(mSides)
+	eArray = {}
+	j = getRandomSide()
+	for i = 1, mSides do 
+		eArray[i] = (i + j) % mSides + 1
+	end
+	return eArray
+end
+
+function pLadder(mTimes,mArray,myThickness)
+
+	delay = getPerfectDelay(myThickness)
+
+	local eArray = {}
+	l = 1
+	s = (#mArray)/l_getSides()
+	t = math.random(0,100)
+
+	for i = 1, mTimes do
+		q = (i+t) % s + 1
+		for k = 1, l_getSides() do
+			if(mArray[(q-1)*l_getSides() + k] ~= 0) then
+				eArray[l] = 1
+			else
+				eArray[l] = 0
+			end
+			l = l + 1
+		end
+		
+		if i ~= mTimes then
+			for j = 1, 3 do
+				for k = 1,l_getSides() do
+					if(mArray[(q-1)*l_getSides() + k] == 2) then
+						eArray[l] = 1
+					else
+						eArray[l] = 0
+					end
+					l = l + 1
+				end
+			end
+		end
+	end
+
+	patternizer(eArray,myThickness)
+	t_wait(delay*2)
+	
+end
+
+function patternizer(mArray,myThickness)
+	delay = getPerfectDelay(myThickness)
+	eArray = cycle(l_getSides())
+
+	j = math.floor(#mArray / l_getSides())
+	
+	for i = 1, j do
+		for k = 1, l_getSides() do
+			if mArray[(i - 1)*l_getSides() + k] == 1 then
+				w_wall(eArray[k], myThickness)
+			end
+		end
+		t_wait(delay)
+	end
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Scripts/common.lua b/_RELEASE/Packs-orig/hypercube/Scripts/common.lua
new file mode 100644
index 0000000..975a00d
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Scripts/common.lua
@@ -0,0 +1,114 @@
+-- common variables
+THICKNESS = 40.0;
+
+function enableSwapIfDMGreaterThan(mDM)
+	if(u_getDifficultyMult() > mDM) then
+		m_messageAdd(" difficulty > " ..mDM.. "\nswap enabled!", 65)
+		l_setSwapEnabled(true)
+	end	
+end
+
+function disableIncIfDMGreaterThan(mDM)
+	if(u_getDifficultyMult() > mDM) then
+		m_messageAdd(" difficulty > " ..mDM.. "\nincrement disabled!", 65)
+		l_setIncEnabled(false)
+	end	
+end
+
+-- getHalfSides: returns half the number of sides (integer)
+function getHalfSides() return math.ceil(l_getSides() / 2) end
+
+-- getRandomSide: returns random mSide
+function getRandomSide() return math.random(0, l_getSides() - 1) end
+
+-- getRandomDir: returns either 1 or -1
+function getRandomDir()
+	if math.random(0, 100) > 50 then return 1 end
+	return -1
+end
+
+-- getPerfectDelay: returns time to wait for two walls to be next to each other
+function getPerfectDelay(mThickness) return mThickness / (5.02 * u_getSpeedMultDM()) * u_getDelayMultDM() end
+
+-- getPerfectDelayDM: returns getPerfectDelay calculated with difficulty mutliplier
+function getPerfectDelayDM(mThickness) return mThickness / (5.02 * u_getSpeedMultDM()) * u_getDelayMultDM() end
+
+-- getPerfectThickness: returns a good THICKNESS value in relation to human reflexes
+function getPerfectThickness(mThickness) return mThickness * u_getSpeedMultDM() end
+
+-- getSideDistance: returns shortest distance from a side to another
+function getSideDistance(mSide1, mSide2)
+	start = mSide1	
+	rightSteps = 0
+	while start ~= mSide2 do
+		rightSteps = rightSteps + 1
+		start = start + 1
+		if start > l_getSides() - 1 then start = 0 end
+	end
+	
+	start = mSide1	
+	leftSteps = 0
+	while start ~= mSide2 do
+		leftSteps = leftSteps + 1
+		start = start - 1
+		if start < 0 then start = l_getSides() - 1 end
+	end
+	
+	if rightSteps < leftSteps then return rightSteps end
+	return leftSteps
+end
+
+-- cWall: creates a wall with the common THICKNESS
+function cWall(mSide) w_wall(mSide, THICKNESS) end
+
+-- oWall: creates a wall opposite to the mSide passed
+function oWall(mSide) cWall(mSide + getHalfSides()) end
+
+-- rWall: union of cwall and owall (created 2 walls facing each other)
+function rWall(mSide)
+	cWall(mSide)
+	oWall(mSide)
+end
+
+-- cWallEx: creates a wall with mExtra walls attached to it 
+function cWallEx(mSide, mExtra)
+	cWall(mSide);
+	loopDir = 1;
+	
+	if mExtra < 0 then loopDir = -1 end
+	for i = 0, mExtra, loopDir do cWall(mSide + i) end
+end
+
+-- oWallEx: creates a wall with mExtra walls opposite to mSide
+function oWallEx(mSide, mExtra)
+	cWallEx(mSide + getHalfSides(), mExtra)
+end
+
+-- rWallEx: union of cwallex and owallex
+function rWallEx(mSide, mExtra)
+	cWallEx(mSide, mExtra)
+	oWallEx(mSide, mExtra)
+end
+
+-- cBarrageN: spawns a barrage of walls, with a free mSide plus mNeighbors
+function cBarrageN(mSide, mNeighbors)
+	for i = mNeighbors, l_getSides() - 2 - mNeighbors, 1 do
+		cWall(mSide + i + 1)
+	end
+end
+
+-- cBarrage: spawns a barrage of walls, with a single free mSide
+function cBarrage(mSide) cBarrageN(mSide, 0) end
+
+-- cBarrageOnlyN: spawns a barrage of wall, with only free mNeighbors
+function cBarrageOnlyN(mSide, mNeighbors)
+	cWall(mSide)
+	cBarrageN(mSide, mNeighbors)
+end
+
+-- cAltBarrage: spawns a barrage of alternate walls
+function cAltBarrage(mSide, mStep)
+	for i = 0, l_getSides() / mStep, 1 do
+		cWall(mSide + i * mStep)
+	end
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Scripts/commonpatterns.lua b/_RELEASE/Packs-orig/hypercube/Scripts/commonpatterns.lua
new file mode 100644
index 0000000..0041013
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Scripts/commonpatterns.lua
@@ -0,0 +1,196 @@
+u_execScript("common.lua")
+
+-- pAltBarrage: spawns a series of cAltBarrage
+function pAltBarrage(mTimes, mStep)
+	delay = getPerfectDelayDM(THICKNESS) * 5.6
+	
+	for i = 0, mTimes do
+		cAltBarrage(i, mStep)
+		t_wait(delay)
+	end
+	
+	t_wait(delay)
+end
+
+-- pMirrorSpiral: spawns a spiral of rWallEx
+function pMirrorSpiral(mTimes, mExtra)
+	oldThickness = THICKNESS
+	THICKNESS = getPerfectThickness(THICKNESS)
+	delay = getPerfectDelay(THICKNESS)
+	startSide = getRandomSide()
+	loopDir = getRandomDir()	
+	j = 0
+	
+	for i = 0, mTimes do
+		rWallEx(startSide + j, mExtra)
+		j = j + loopDir
+		t_wait(delay)
+	end
+	
+	THICKNESS = oldThickness
+	
+	t_wait(getPerfectDelayDM(THICKNESS) * 6.5)
+end
+
+-- pMirrorSpiralDouble: spawns a spiral of rWallEx where you need to change direction
+function pMirrorSpiralDouble(mTimes, mExtra)
+	oldThickness = THICKNESS
+	THICKNESS = getPerfectThickness(THICKNESS)
+	delay = getPerfectDelayDM(THICKNESS)
+	startSide = getRandomSide()
+	currentSide = startSide
+	loopDir = getRandomDir()	
+	j = 0
+	
+	for i = 0, mTimes do
+		rWallEx(startSide + j, mExtra)
+		j = j + loopDir
+		t_wait(delay)
+	end
+	
+	rWallEx(startSide + j, mExtra)
+	t_wait(delay * 0.9)
+	
+	rWallEx(startSide + j, mExtra)
+	t_wait(delay * 0.9)
+	
+	loopDir = loopDir * -1
+	
+	for i = 0, mTimes + 1 do
+		currentSide = currentSide + loopDir;
+		rWallEx(currentSide + j - 1, mExtra)
+		j = j + loopDir
+		t_wait(delay)
+	end
+	
+	THICKNESS = oldThickness
+	t_wait(getPerfectDelayDM(THICKNESS) * 7.5)
+end
+
+-- pBarrageSpiral: spawns a spiral of cBarrage
+function pBarrageSpiral(mTimes, mDelayMult, mStep)
+	delay = getPerfectDelayDM(THICKNESS) * 5.6 * mDelayMult
+	startSide = getRandomSide()
+	loopDir = mStep * getRandomDir()	
+	j = 0
+	
+	for i = 0, mTimes do
+		cBarrage(startSide + j)
+		j = j + loopDir
+		t_wait(delay)
+		if(l_getSides() < 6) then t_wait(delay * 0.6) end
+	end
+	
+	t_wait(getPerfectDelayDM(THICKNESS) * 6.1)
+end
+
+-- pDMBarrageSpiral: spawns a spiral of cBarrage, with static delay
+function pDMBarrageSpiral(mTimes, mDelayMult, mStep)
+	delay = (getPerfectDelayDM(THICKNESS) * 5.42) * (mDelayMult / (u_getDifficultyMult() ^ 0.4)) * (u_getSpeedMultDM() ^ 0.35)
+	startSide = getRandomSide()
+	loopDir = mStep * getRandomDir()	
+	j = 0
+	
+	for i = 0, mTimes do
+		cBarrage(startSide + j)
+		j = j + loopDir
+		t_wait(delay)
+		if(l_getSides() < 6) then t_wait(delay * 0.49) end
+	end
+	
+	t_wait(getPerfectDelayDM(THICKNESS) * (6.7 * (u_getDifficultyMult() ^ 0.7)))
+end
+
+-- pWallExVortex: spawns left-left right-right spiral patters
+function pWallExVortex(mTimes, mStep, mExtraMult)
+	delay = getPerfectDelayDM(THICKNESS) * 5.0 
+	startSide = getRandomSide()
+	loopDir = getRandomDir()
+	currentSide = startSide
+	
+	for j = 0, mTimes do
+		for i = 0, mStep do
+			currentSide = currentSide + loopDir
+			rWallEx(currentSide, loopDir * mExtraMult)
+			t_wait(delay)
+		end
+		
+		loopDir = loopDir * -1
+		
+		for i = 0, mStep + 1 do
+			currentSide = currentSide + loopDir;
+			rWallEx(currentSide, loopDir * mExtraMult)
+			t_wait(delay)
+		end
+	end
+	
+	t_wait(getPerfectDelayDM(THICKNESS) * 5.5)
+end
+
+-- pInverseBarrage: spawns two barrages who force you to turn 180 degrees
+function pInverseBarrage(mTimes)
+	delay = getPerfectDelayDM(THICKNESS) * 9.9
+	startSide = getRandomSide()
+	
+	for i = 0, mTimes do
+		cBarrage(startSide)
+		t_wait(delay)
+		if(l_getSides() < 6) then t_wait(delay * 0.8) end
+		cBarrage(startSide + getHalfSides())
+		t_wait(delay)
+	end
+	
+	t_wait(getPerfectDelayDM(THICKNESS) * 2.5)
+end
+
+-- pRandomBarrage: spawns barrages with random side, and waits humanly-possible times depending on the sides distance
+function pRandomBarrage(mTimes, mDelayMult)
+	side = getRandomSide()
+	oldSide = 0
+	
+	for i = 0, mTimes do	
+		cBarrage(side)
+		oldSide = side
+		side = getRandomSide()
+		t_wait(getPerfectDelayDM(THICKNESS) * (2 + (getSideDistance(side, oldSide)*mDelayMult)))
+	end
+	
+	t_wait(getPerfectDelayDM(THICKNESS) * 5.6)
+end
+
+-- pMirrorWallStrip: spawns rWalls close to one another on the same side
+function pMirrorWallStrip(mTimes, mExtra)
+	delay = getPerfectDelayDM(THICKNESS) * 3.65
+	startSide = getRandomSide()
+	
+	for i = 0, mTimes do
+		rWallEx(startSide, mExtra)
+		t_wait(delay)
+	end
+	
+	t_wait(getPerfectDelayDM(THICKNESS) * 5.00)
+end
+
+-- pTunnel: forces you to circle around a very thick wall
+function pTunnel(mTimes)
+	oldThickness = THICKNESS
+	myThickness = getPerfectThickness(THICKNESS)
+	delay = getPerfectDelay(myThickness) * 5
+	startSide = getRandomSide()
+	loopDir = getRandomDir()
+	
+	THICKNESS = myThickness
+	
+	for i = 0, mTimes do
+		if i < mTimes then
+			w_wall(startSide, myThickness + 5 * u_getSpeedMultDM() * delay)
+		end
+		
+		cBarrage(startSide + loopDir)
+		t_wait(delay)
+		
+		loopDir = loopDir * -1
+	end
+	
+	THICKNESS = oldThickness
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Scripts/evolutionpatterns.lua b/_RELEASE/Packs-orig/hypercube/Scripts/evolutionpatterns.lua
new file mode 100644
index 0000000..a5aa629
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Scripts/evolutionpatterns.lua
@@ -0,0 +1,301 @@
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+u_execScript("utils.lua")
+u_execScript("alternativepatterns.lua")
+u_execScript("nextpatterns.lua")
+
+hueModifier = 0.2
+sync = false
+syncRndMin = 0
+syncRndMax = 0
+
+curveMult = 1
+
+function syncCurveWithRotationSpeed(mRndMin, mRndMax)
+	sync = true
+	syncRndMin = mRndMin
+	syncRndMax = mRndMax
+end
+
+function setCurveMult(mMult)
+	curveMult = mMult
+end
+
+function wallHMCurveAcc(mSide, mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong)
+	if sync == true then
+		mCurve = l_getRotationSpeed() * 10.0
+		mCurve = mCurve + (math.random(syncRndMin, syncRndMax) / 100.0)
+	end
+
+	w_wallHModCurveData(hueModifier, mSide, THICKNESS, mCurve * (u_getDifficultyMult() ^ 0.25) * curveMult, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong)
+end
+
+function wallHMCurve(mSide, mCurve)
+	wallHMCurveAcc(mSide, mCurve, 0, 0, 0, false)
+end
+
+function hmcBarrageN(mSide, mNeighbors, mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong)
+	for i = mNeighbors, l_getSides() - 2 - mNeighbors, 1 do
+		wallHMCurveAcc(mSide + i + 1, mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong)
+	end
+end
+
+function hmcBarrageS(mSide, mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong)
+	hmcBarrageN(mSide, 0, mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong);
+end
+
+function hmcBarrage(mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong)
+	hmcBarrageS(getRandomSide(), mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong);
+end
+
+function hmcSimpleBarrage(mCurve)
+	hmcBarrageN(getRandomSide(), 0, mCurve, 0, 0, 0, false);
+end
+
+function hmcSimpleBarrageS(mSide, mCurve)
+	hmcBarrageN(mSide, 0, mCurve, 0, 0, 0, false);
+end
+
+function hmcSimpleBarrageSNeigh(mSide, mCurve, mNeighbors)
+	hmcBarrageN(mSide, mNeighbors, mCurve, 0, 0, 0, false);
+end
+
+
+function hmcSimpleTwirl(mTimes, mCurve, mCurveAdd)
+	startSide = getRandomSide()
+	currentSide = startSide
+	loopDir = getRandomDir()
+	delay = getPerfectDelayDM(THICKNESS) * 5.7
+	j = 0
+	
+	currentCurve = mCurve	
+
+	for i = 0, mTimes do
+		hmcSimpleBarrageS(startSide + j, currentCurve)
+		j = j + loopDir
+		currentCurve = currentCurve + mCurveAdd
+		t_wait(delay)
+	end
+end
+
+function hmcSimpleCage(mCurve, mDir)
+	side = getRandomSide()
+	oppositeSide = side + getHalfSides()
+
+	wallHMCurve(side, mCurve)
+	wallHMCurve(oppositeSide, mCurve * mDir)
+end
+
+function hmcSimpleCageS(mCurve, mDir, mSide)
+	oppositeSide = mSide + getHalfSides()
+
+	wallHMCurve(mSide, mCurve)
+	wallHMCurve(oppositeSide, mCurve * mDir)
+end
+
+function hmcSimpleSpinner(mCurve)
+	side = getRandomSide()
+
+	for i = 0, l_getSides() / 2, 1 do
+		wallHMCurve(side + i * 2, mCurve)
+	end
+end
+
+function hmcSimpleSpinnerS(mSide, mCurve)
+	for i = 0, l_getSides() / 2, 1 do
+		wallHMCurve(mSide + i * 2, mCurve)
+	end
+end
+
+function hmcSimpleSpinnerSAcc(mSide, mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong)
+	for i = 0, l_getSides() / 2, 1 do
+		wallHMCurveAcc(mSide + i * 2, mCurve, mCurveAcc, mCurveMin, mCurveMax, mCurvePingPong)
+	end
+end
+
+function hmcDefSpinner()
+	t_wait(getPerfectDelayDM(THICKNESS) * 3.2)
+	hmcSimpleSpinner(math.random(10, 19) / 10.0 * getRandomDir())
+	t_wait(getPerfectDelayDM(THICKNESS) * 5.9)
+end
+
+function hmcDefBarrage()
+	t_wait(getPerfectDelayDM(THICKNESS) * 3.1)
+	hmcSimpleBarrage(math.random(10, 20) / 10.0 * getRandomDir())
+	t_wait(getPerfectDelayDM(THICKNESS) * 5)
+end
+
+function hmcDef2Cage()
+	t_wait(getPerfectDelayDM(THICKNESS) * 2.1)
+	side = getRandomSide()
+	rndspd = math.random(10, 20) / 10.0
+
+	t_wait(getPerfectDelayDM(THICKNESS) * 3.1)
+	hmcSimpleCageS(rndspd, -1, side)
+	t_wait(getPerfectDelayDM(THICKNESS) * 1.1)
+	hmcSimpleCageS(rndspd, -1, side)
+	t_wait(getPerfectDelayDM(THICKNESS) * 1.1)
+	hmcSimpleCageS(rndspd, -1, side)
+	t_wait(getPerfectDelayDM(THICKNESS) * 5.3)
+end
+
+function hmcDef2CageD()
+	t_wait(getPerfectDelayDM(THICKNESS) * 2.1)
+
+	side = getRandomSide()
+	oppositeSide = getHalfSides() + side
+	rndspd = math.random(10, 17) / 10.0
+
+	t_wait(getPerfectDelayDM(THICKNESS) * 3.1)
+	hmcSimpleCageS(rndspd, -1, side)
+	t_wait(getPerfectDelayDM(THICKNESS) * 1.1)
+	hmcSimpleCageS(rndspd, -1, side)
+	t_wait(getPerfectDelayDM(THICKNESS) * 1.1)
+	hmcSimpleCageS(rndspd, -1, side)
+	t_wait(getPerfectDelayDM(THICKNESS) * 6.0)
+	hmcSimpleCageS(rndspd, -1, oppositeSide)
+	t_wait(getPerfectDelayDM(THICKNESS) * 1.1)
+	hmcSimpleCageS(rndspd, -1, oppositeSide)
+	t_wait(getPerfectDelayDM(THICKNESS) * 1.1)
+	hmcSimpleCageS(rndspd, -1, oppositeSide)
+	t_wait(getPerfectDelayDM(THICKNESS) * 9.2)
+end
+
+function hmcSimpleBarrageSpiral(mTimes, mDelayMult, mStep, mCurve, mNeighbors)
+	delay = getPerfectDelayDM(THICKNESS) * 6.2 * mDelayMult
+	startSide = getRandomSide()
+	loopDir = mStep * getRandomDir()	
+	j = 0
+	
+	for i = 0, mTimes do
+		hmcSimpleBarrageSNeigh(startSide + j, mCurve, mNeighbors)
+		j = j + loopDir
+		t_wait(delay)
+		if(l_getSides() < 6) then t_wait(delay * 0.7) end
+	end
+	
+	t_wait(getPerfectDelayDM(THICKNESS) * 6.1)
+end
+
+function hmcSimpleBarrageSpiralRnd(mTimes, mDelayMult, mCurve, mNeighbors)
+	delay = getPerfectDelayDM(THICKNESS) * 6.2 * mDelayMult
+	startSide = getRandomSide()
+	
+	for i = 0, mTimes do
+		hmcSimpleBarrageSNeigh(getRandomSide(), mCurve, mNeighbors)
+		t_wait(delay)
+		if(l_getSides() < 6) then t_wait(delay * 0.7) end
+	end
+	
+	t_wait(getPerfectDelayDM(THICKNESS) * 6.1)
+end
+
+function hmcSimpleBarrageSpiralStatic(mTimes, mDelayMult, mStep, mCurve, mNeighbors)
+	delay = getPerfectDelay(THICKNESS) * 5.6 * mDelayMult
+	startSide = getRandomSide()
+	loopDir = mStep * getRandomDir()	
+	j = 0
+	
+	for i = 0, mTimes do
+		hmcSimpleBarrageSNeigh(startSide + j, mCurve, mNeighbors)
+		j = j + loopDir
+		t_wait(delay)
+		if(l_getSides() < 6) then t_wait(delay * 0.6) end
+	end
+	
+	t_wait(getPerfectDelayDM(THICKNESS) * 6.1)
+end
+
+function hmcDefBarrageSpiral()
+	hmcSimpleBarrageSpiral(math.random(1, 3), 1, 1, math.random(5, 15) / 10.0 * getRandomDir(), 0)
+end
+
+function hmcDefBarrageSpiralRnd()
+	hmcSimpleBarrageSpiralRnd(math.random(1, 3), 1, math.random(5, 15) / 10.0 * getRandomDir(), 0)
+end
+
+function hmcDefBarrageSpiralFast()
+	hmcSimpleBarrageSpiral(math.random(1, 3), 0.8, 1, math.random(5, 15) / 10.0 * getRandomDir(), 0)
+end
+
+function hmcDefBarrageSpiralSpin()
+	hmcSimpleBarrageSpiralStatic(math.random(7, 14), 0.25, 1, math.random(5, 18) / 10.0 * getRandomDir(), 2)
+end
+
+function hmcDefBarrageInv()
+	t_wait(getPerfectDelayDM(THICKNESS) * 2.0)
+	delay = getPerfectDelay(THICKNESS) * 5.6 
+	side = getRandomSide()
+	rndspd = math.random(10, 20) / 10.0
+	oppositeSide = getRandomSide() + getHalfSides()
+
+	hmcSimpleBarrageSNeigh(side, rndspd * getRandomDir(), 0)
+	t_wait(delay)
+
+	hmcSimpleBarrageSNeigh(oppositeSide, rndspd * getRandomDir(), 0)
+	t_wait(delay)
+end
+
+function hmcDefAccelBarrage()
+	t_wait(getPerfectDelayDM(THICKNESS) * 1.5)
+	c = math.random(50, 100) / 1000.0 * getRandomDir()
+	min = math.random(5, 35) / 10.0 * -1
+	max = math.random(5, 35) / 10.0
+	hmcBarrage(0, c, min, max, true)
+	t_wait(getPerfectDelayDM(THICKNESS) * 6.1)
+end
+
+function hmcDefAccelBarrageDouble()
+	t_wait(getPerfectDelayDM(THICKNESS) * 1.5)
+	c = math.random(50, 100) / 1000.0 * getRandomDir()
+	min = math.random(5, 35) / 10.0 * -1
+	max = math.random(5, 35) / 10.0
+	hmcBarrage(0, c, min, max, true)
+	t_wait(getPerfectDelayDM(THICKNESS) * 2.1)
+	hmcBarrage(0, c, min, max, true)
+	t_wait(getPerfectDelayDM(THICKNESS) * 6.1)
+end
+
+function hmcDefSpinnerSpiral()
+	t_wait(getPerfectDelayDM(THICKNESS) * 1.5)
+	side = getRandomSide()
+	c = math.random(10, 20) / 10.0 * getRandomDir()
+
+	t_wait(getPerfectDelayDM(THICKNESS) * 3.1)
+
+	for i = 0, math.random(4, 8) do
+		hmcSimpleSpinnerS(side, c)
+		t_wait(getPerfectDelayDM(THICKNESS) * 1.15)
+	end
+
+	t_wait(getPerfectDelayDM(THICKNESS) * 5)
+end
+
+function getRndMinDM(mNum)	
+	return math.random(math.floor(mNum - (u_getDifficultyMult() ^ 3)), math.ceil(mNum))
+end
+
+function getRndMaxDM(mNum)
+	return math.random(math.floor(mNum), math.ceil(mNum + (u_getDifficultyMult() ^ 2.25)))
+end
+
+function hmcDefSpinnerSpiralAcc()
+	t_wait(getPerfectDelayDM(THICKNESS) * 2.1)
+	t_wait(getPerfectDelayDM(THICKNESS) * 2.1)
+	side = getRandomSide()
+
+	acc = math.random(getRndMinDM(50), getRndMaxDM(100)) / 1000.0 * getRandomDir()
+	min = math.random(getRndMinDM(12), getRndMaxDM(28)) / 10.0 * -1
+	max = math.random(getRndMinDM(12), getRndMaxDM(28)) / 10.0
+
+	
+
+	t_wait(getPerfectDelayDM(THICKNESS) * 3.1)
+
+	for i = 0, math.random(4, 8) do
+		hmcSimpleSpinnerSAcc(side, 0, acc, min, max, true)
+		t_wait(getPerfectDelay(THICKNESS) * 0.8)
+	end
+
+	t_wait(getPerfectDelayDM(THICKNESS) * 5.3)
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Scripts/nextpatterns.lua b/_RELEASE/Packs-orig/hypercube/Scripts/nextpatterns.lua
new file mode 100644
index 0000000..91877a0
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Scripts/nextpatterns.lua
@@ -0,0 +1,158 @@
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+u_execScript("utils.lua")
+u_execScript("alternativepatterns.lua")
+
+function wallSAdj(mSide, mAdj) w_wallAdj(mSide, THICKNESS, mAdj) end
+function wallSAcc(mSide, mAdj, mAcc, mMinSpd, mMaxSpd) w_wallAcc(mSide, THICKNESS, mAdj, mAcc * (u_getDifficultyMult()), mMinSpd, mMaxSpd) end
+
+function pTrapBarrage(mSide)
+	delay = getPerfectDelayDM(THICKNESS) * 3.7
+		
+	cBarrage(mSide)
+	t_wait(delay * 3)
+	wallSAdj(mSide, 1.9)
+
+	t_wait(delay * 2.5)
+end
+
+function pTrapBarrageDouble(mSide)
+	delay = getPerfectDelayDM(THICKNESS) * 3.7
+	side2 = mSide + getHalfSides();
+	
+	for i = 0, l_getSides() - 1 do
+		currentSide = mSide + i
+		if((currentSide ~= mSide) and (currentSide ~= side2)) then cWall(currentSide) end
+	end
+
+	t_wait(delay * 3)
+	wallSAdj(mSide, 1.9)
+	wallSAdj(side2, 1.9)
+	
+	t_wait(delay * 2.5)
+end
+
+function pTrapBarrageInverse(mSide)
+	delay = getPerfectDelayDM(THICKNESS) * 3.7
+	
+	cWall(mSide)	
+	t_wait(delay * 3)
+
+	for i = 0, l_getSides() - 1 do
+		currentSide = mSide + i
+		if(currentSide ~= mSide) then wallSAdj(currentSide, 1.9) end
+	end
+
+	t_wait(delay * 2.5)
+end
+
+function pTrapBarrageAlt(mSide)
+	delay = getPerfectDelayDM(THICKNESS) * 3.7
+
+	for i = 0, l_getSides() - 1 do
+		currentSide = mSide + i
+		if(currentSide % 2 ~= 0) then cWall(currentSide) end
+	end
+
+	t_wait(delay * 3)
+
+	for i = 0, l_getSides() - 1 do
+		currentSide = mSide + i
+		if(currentSide % 2 == 0) then wallSAdj(currentSide, 1.9) end
+	end
+
+	t_wait(delay * 2.5)
+end
+
+function pTrapSpiral(mSide)
+	delay = getPerfectDelayDM(THICKNESS) * 3.7
+	loopDir = getRandomDir()		
+
+	if(l_getSides() < 6) then delay = delay + 4 end
+
+	for i = 0, l_getSides() + getHalfSides() do
+		currentSide = (mSide + i) * loopDir
+		for j = 0, getHalfSides() do wallSAdj(currentSide + j, 1.2 + (i / 7.9)) end
+		t_wait((delay * 0.75) - (i * 0.45) + 3)
+	end
+
+	t_wait(delay * 2.5)
+end
+
+function pRCBarrage()
+	currentSides = l_getSides()
+	delay = getPerfectDelayDM(THICKNESS) * 3.7
+	startSide = math.random(0, 10)
+	for i = 0, currentSides - 2 do
+		currentSide = startSide + i
+		cWall(currentSide)
+	end
+	t_wait(delay * 2.5)
+end
+
+function pRCBarrageDouble()
+	currentSides = l_getSides()
+	delay = getPerfectDelayDM(THICKNESS) * 3.7
+	startSide = math.random(0, 10)
+	for i = 0, currentSides - 2 do
+		currentSide = startSide + i
+		holeSide = startSide + i + (currentSides / 2)
+		if(i ~= holeSide) then cWall(currentSide) end
+	end
+	t_wait(delay * 2.5)
+end
+
+function pRCBarrageSpin()
+	currentSides = l_getSides()
+	delay = getPerfectDelayDM(THICKNESS) * 3.7
+	startSide = math.random(0, 10)
+	loopDir = getRandomDir()
+	for j = 0, 2 do
+		for i = 0, currentSides - 2 do
+			currentSide = startSide + i
+			cWall(currentSide + (j * loopDir))
+		end
+		t_wait(delay + 1)
+	end
+	t_wait(delay * 2.5)
+end
+
+function pACBarrage()
+	currentSides = l_getSides()
+	delay = getPerfectDelayDM(THICKNESS) * 3.7
+	startSide = math.random(0, 10)
+	for i = 0, currentSides - 2 do
+		currentSide = startSide + i
+		wallSAcc(currentSide, 9 + math.random(0, 1), -1.1, 1, 12)
+	end
+	t_wait(delay * 2.5)
+end
+
+function pACBarrageMulti()
+	currentSides = l_getSides()
+	delay = getPerfectDelayDM(THICKNESS) * 3.7
+	startSide = math.random(0, 10)
+	for i = 0, currentSides - 2 do
+		currentSide = startSide + i
+		wallSAcc(currentSide, 10, -1.09, 0.31, 10)
+		wallSAcc(currentSide, 0, 0.05, 0, 4.0)
+		wallSAcc(currentSide, 0, 0.09, 0, 4.0)
+		wallSAcc(currentSide, 0, 0.12, 0, 4.0)
+	end
+	t_wait(delay * 8)
+end
+
+function pACBarrageMultiAltDir()
+	currentSides = l_getSides()
+	delay = getPerfectDelayDM(THICKNESS) * 4
+	mdiff = 1 + math.abs(1 - u_getDifficultyMult())
+	startSide = math.random(0, 10)
+	loopDir = getRandomDir()
+	for i = 0, currentSides + getHalfSides() do
+		currentSide = startSide + i * loopDir
+		wallSAcc(currentSide, 10, -1.095, 0.40, 10)
+		t_wait((delay / 2.21) * (mdiff * 1.29))
+		wallSAcc(currentSide + (getHalfSides() * loopDir), 0, 0.128, 0, 1.4)
+	end
+	t_wait(delay * 8)
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Scripts/utils.lua b/_RELEASE/Packs-orig/hypercube/Scripts/utils.lua
new file mode 100644
index 0000000..300f63c
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Scripts/utils.lua
@@ -0,0 +1,28 @@
+-- initialize random seed
+math.randomseed(os.time())
+math.random()
+math.random()
+math.random()
+
+-- shuffle: shuffles an array
+function shuffle(t)
+	math.randomseed(os.time())
+	local iterations = #t
+	local j
+	for i = iterations, 2, -1 do
+			j = math.random(i)
+			t[i], t[j] = t[j], t[i]
+	end
+	
+	return t
+end
+
+-- clamp: clamps a number between two values
+function clamp(input, min_val, max_val)
+	if input < min_val then
+		input = min_val
+	elseif input > max_val then
+		input = max_val
+	end
+	return input
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Styles/acceleradiant.json b/_RELEASE/Packs-orig/hypercube/Styles/acceleradiant.json
new file mode 100644
index 0000000..b8ab7fb
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Styles/acceleradiant.json
@@ -0,0 +1,33 @@
+{
+	// Style data id
+	"id": "acceleradiant",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 360,
+	"hue_ping_pong": false,
+	"hue_increment": 0.5,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 3,
+	"3D_skew": 0.17,
+	"3D_spacing": 153.5,
+	"3D_darken_multiplier": 1.5,
+	"3D_alpha_multiplier": 5.9,
+	"3D_alpha_falloff": 16.0,
+
+	// Main color
+	"main": { "main": true, "dynamic": true, "value": [255, 155, 155, 230], "pulse": [50, -75, 125, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 8.7, "value": [0, 0, 0, 0], "pulse": [45, 25, 1, 0]},
+		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 9.5, "value": [0, 0, 0, 0], "pulse": [1, 25, 45, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Styles/centrifugal.json b/_RELEASE/Packs-orig/hypercube/Styles/centrifugal.json
new file mode 100644
index 0000000..90dae63
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Styles/centrifugal.json
@@ -0,0 +1,33 @@
+{
+	// Style data id
+	"id": "centrifugal",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 255,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 3,
+	"3D_skew": 0.20,
+	"3D_spacing": 19.5,
+	"3D_darken_multiplier": 1.5,
+	"3D_alpha_multiplier": 5.9,
+	"3D_alpha_falloff": 66.0,
+	"3D_override_color": [76, 76, 66, 55],
+	
+	// Main color
+	"main": { "main": true, "dynamic": true, "value": [190, 190, 190, 225], "pulse": [99, 30, 165, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 3.0, "value": [0, 0, 0, 255], "pulse": [10, 0, 0, 0], "offset": 0.2, "hue_shift": 0.0}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Styles/disc-o.json b/_RELEASE/Packs-orig/hypercube/Styles/disc-o.json
new file mode 100644
index 0000000..498a486
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Styles/disc-o.json
@@ -0,0 +1,33 @@
+{
+	// Style data id
+	"id": "disc-o",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 360,
+	"hue_ping_pong": true,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 0.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 7,
+	"3D_skew": 0.15,
+	"3D_spacing": 1.5,
+	"3D_darken_multiplier": 1.5,
+	"3D_alpha_multiplier": 0.5,
+	"3D_alpha_falloff": 19.0,
+	
+	// Main color
+	"main": { "main": true, "dynamic": true, "value": [0, 0, 0, 0], "pulse": [25, 25, 25, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 0.0, "value": [80, 75, 75, 255], "pulse": [15, 15, 15, 35]},
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 0.0, "value": [45, 45, 45, 255], "pulse": [22, 25, 15, 25]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Styles/evotutorial.json b/_RELEASE/Packs-orig/hypercube/Styles/evotutorial.json
new file mode 100644
index 0000000..5932c91
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Styles/evotutorial.json
@@ -0,0 +1,33 @@
+{
+	// Style data id
+	"id": "evotutorial",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 140,
+	"hue_ping_pong": true,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 0.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 7,
+	"3D_skew": 0.15,
+	"3D_spacing": 1.5,
+	"3D_darken_multiplier": 1.5,
+	"3D_alpha_multiplier": 0.5,
+	"3D_alpha_falloff": 19.0,
+	
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [45, 25, 25, 255], "pulse": [25, 25, 50, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [15, 15, 15, 0], "offset": 4.7},
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [235, 235, 235, 255], "pulse": [0, 0, 0, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Styles/g-force.json b/_RELEASE/Packs-orig/hypercube/Styles/g-force.json
new file mode 100644
index 0000000..bec6f3a
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Styles/g-force.json
@@ -0,0 +1,33 @@
+{
+	// Style data id
+	"id": "g-force",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 360,
+	"hue_ping_pong": true,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 0.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 7,
+	"3D_skew": 0.15,
+	"3D_spacing": 1.5,
+	"3D_darken_multiplier": 1.5,
+	"3D_alpha_multiplier": 0.5,
+	"3D_alpha_falloff": 19.0,
+	
+	// Main color
+	"main": { "main": false, "dynamic": false, "value": [245, 245, 245, 245], "pulse": [25, 25, 25, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 2.7, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]},
+		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 3.5, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Styles/incongruence.json b/_RELEASE/Packs-orig/hypercube/Styles/incongruence.json
new file mode 100644
index 0000000..f5d7269
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Styles/incongruence.json
@@ -0,0 +1,32 @@
+{
+	// Style data id
+	"id": "incongruence",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 360,
+	"hue_ping_pong": false,
+	"hue_increment": 0.5,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 3,
+	"3D_skew": 0.20,
+	"3D_spacing": 253.5,
+	"3D_darken_multiplier": 1.5,
+	"3D_alpha_multiplier": 5.9,
+	"3D_alpha_falloff": 16.0,
+
+	// Main color
+	"main": { "main": true, "dynamic": true, "value": [255, 155, 155, 230], "pulse": [50, -75, 125, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Styles/massacre.json b/_RELEASE/Packs-orig/hypercube/Styles/massacre.json
new file mode 100644
index 0000000..acc7b25
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Styles/massacre.json
@@ -0,0 +1,34 @@
+{
+	// Style data id
+	"id": "massacre",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 360,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.8,
+	"pulse_increment": 0.027,
+
+	// 3D options
+	"3D_depth": 12,
+	"3D_skew": 0.15,
+	"3D_spacing": 2.1,
+	"3D_darken_multiplier": 1.1,
+	"3D_alpha_multiplier": 0.4,
+	"3D_alpha_falloff": 1.0,
+	"3D_override_color": [166, 166, 166, 255],
+	
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [253, 253, 200, 255], "pulse": [0, 0, 0, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [0, 73, 73, 255], "pulse": [0, 0, 0, 0]},
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [11, 11, 11, 255], "pulse": [0, 0, 0, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Styles/polyhedrug.json b/_RELEASE/Packs-orig/hypercube/Styles/polyhedrug.json
new file mode 100644
index 0000000..894a5bc
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Styles/polyhedrug.json
@@ -0,0 +1,33 @@
+{
+	// Style data id
+	"id": "polyhedrug",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 360,
+	"hue_ping_pong": false,
+	"hue_increment": 0.5,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 3,
+	"3D_skew": 0.20,
+	"3D_spacing": 453.5,
+	"3D_darken_multiplier": 1.5,
+	"3D_alpha_multiplier": 5.9,
+	"3D_alpha_falloff": 16.0,
+
+	// Main color
+	"main": { "main": true, "dynamic": true, "value": [255, 0, 0, 255], "pulse": [-80, 75, 65, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 8.7, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]},
+		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 9.5, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Styles/reppaws.json b/_RELEASE/Packs-orig/hypercube/Styles/reppaws.json
new file mode 100644
index 0000000..3c38912
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Styles/reppaws.json
@@ -0,0 +1,31 @@
+{
+	// Style data id
+	"id": "reppaws",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 255,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 2,
+	"3D_skew": 0.15,
+	"3D_spacing": 5.5,
+
+	// Main color
+	"main": { "main": true, "dynamic": true, "value": [0, 0, 0, 225], "pulse": [99, 30, 165, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [63, 60, 60, 255], "pulse": [10, 0, 0, 0], "offset": 4.2, "hue_shift": 25.0},
+		{ "dynamic": false, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [75, 75, 75, 255], "pulse": [0, 10, 0, 0], "offset": 4.2, "hue_shift": 50.0},
+		{ "dynamic": false, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [87, 95, 90, 255], "pulse": [0, 0, 10, 0], "offset": 4.2, "hue_shift": 75.0}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/Styles/slither.json b/_RELEASE/Packs-orig/hypercube/Styles/slither.json
new file mode 100644
index 0000000..5abdda6
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/Styles/slither.json
@@ -0,0 +1,33 @@
+{
+	// Style data id
+	"id": "slither",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 360,
+	"hue_ping_pong": true,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 0.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 7,
+	"3D_skew": 0.15,
+	"3D_spacing": 1.5,
+	"3D_darken_multiplier": 1.5,
+	"3D_alpha_multiplier": 0.5,
+	"3D_alpha_falloff": 19.0,
+	
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [230, 230, 230, 230], "pulse": [25, 25, 25, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 0.0, "value": [80, 125, 75, 255], "pulse": [15, 45, 15, 35]},
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 0.0, "value": [45, 90, 45, 255], "pulse": [22, 45, 15, 25]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs-orig/hypercube/pack.json b/_RELEASE/Packs-orig/hypercube/pack.json
new file mode 100644
index 0000000..715bb6f
--- /dev/null
+++ b/_RELEASE/Packs-orig/hypercube/pack.json
@@ -0,0 +1,4 @@
+{
+	"name": "hypercube",
+	"priority": -15000
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Levels/apeirogon.json b/_RELEASE/Packs/test/Levels/apeirogon.json
new file mode 100644
index 0000000..1baeb47
--- /dev/null
+++ b/_RELEASE/Packs/test/Levels/apeirogon.json
@@ -0,0 +1,12 @@
+{
+	"id": "apeirogon",
+	"name": "apeirogon",
+	"description": "hardest level of difficulty",
+	"author": "vittorio romeo",	
+	"menuPriority": 40,
+	"selectable": true,
+	"styleId": "apeirogon",
+	"musicId": "milkyWays",
+	"luaFile": "Scripts/Levels/apeirogon.lua",
+	"difficultyMults": [1.25, 1.40, 0.75, 0.5, 0.35]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Levels/babysteps.json b/_RELEASE/Packs/test/Levels/babysteps.json
new file mode 100644
index 0000000..4f6278a
--- /dev/null
+++ b/_RELEASE/Packs/test/Levels/babysteps.json
@@ -0,0 +1,11 @@
+{
+	"id": "babysteps",
+	"name": "baby steps",
+	"description": "learn to play openhexagon",
+	"author": "vittorio romeo",
+	"menuPriority": 10,
+	"selectable": true,
+	"styleId": "babysteps",
+	"musicId": "drFinkelfracken",
+	"luaFile": "Scripts/Levels/babysteps.lua"
+}
diff --git a/_RELEASE/Packs/test/Levels/commando.json b/_RELEASE/Packs/test/Levels/commando.json
new file mode 100644
index 0000000..d6a849b
--- /dev/null
+++ b/_RELEASE/Packs/test/Levels/commando.json
@@ -0,0 +1,12 @@
+{
+	"id": "commando",
+	"name": "commando",
+	"description": "exponential difficulty \nfor exponential entertainment",
+	"author": "vittorio romeo",	
+	"menuPriority": 50,
+	"selectable": true,
+	"styleId": "commando",
+	"musicId": "commandoSteve",
+	"luaFile": "Scripts/Levels/commando.lua",
+	"difficultyMults": [1.25, 1.50, 0.75, 0.5, 0.25]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Levels/euclideanpc.json b/_RELEASE/Packs/test/Levels/euclideanpc.json
new file mode 100644
index 0000000..9fc846c
--- /dev/null
+++ b/_RELEASE/Packs/test/Levels/euclideanpc.json
@@ -0,0 +1,12 @@
+{
+	"id": "euclideanpc",
+	"name": "euclidean plane crash",
+	"description": "special level of difficulty",
+	"author": "vittorio romeo",	
+	"menuPriority": 60,
+	"selectable": true,
+	"styleId": "euclideanpc",
+	"musicId": "steampunkWarlord",
+	"luaFile": "Scripts/Levels/euclideanpc.lua",
+	"difficultyMults": [1.25, 1.50, 0.75, 0.5, 0.25]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Levels/flatteringshape.json b/_RELEASE/Packs/test/Levels/flatteringshape.json
new file mode 100644
index 0000000..e5f8922
--- /dev/null
+++ b/_RELEASE/Packs/test/Levels/flatteringshape.json
@@ -0,0 +1,12 @@
+{
+	"id": "flatteringshape",
+	"name": "flattering shape",
+	"description": "normal level of difficulty",
+	"author": "vittorio romeo",	
+	"menuPriority": 20,
+	"selectable": true,
+	"styleId": "flatteringshape",
+	"musicId": "starshipShowdown",
+	"luaFile": "Scripts/Levels/flatteringshape.lua",
+	"difficultyMults": [1.5, 2, 2.5, 0.5, 3]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Levels/goldenratio.json b/_RELEASE/Packs/test/Levels/goldenratio.json
new file mode 100644
index 0000000..654c59c
--- /dev/null
+++ b/_RELEASE/Packs/test/Levels/goldenratio.json
@@ -0,0 +1,12 @@
+{
+	"id": "goldenratio",
+	"name": "golden ratio",
+	"description": "relax with the spirals",
+	"author": "vittorio romeo",	
+	"menuPriority": 90,
+	"selectable": true,
+	"styleId": "goldenratio",
+	"musicId": "captainCool",
+	"luaFile": "Scripts/Levels/goldenratio.lua",
+	"difficultyMults": [1.25, 1.50, 0.75, 0.5, 0.25]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Levels/labyrinth.json b/_RELEASE/Packs/test/Levels/labyrinth.json
new file mode 100644
index 0000000..998864b
--- /dev/null
+++ b/_RELEASE/Packs/test/Levels/labyrinth.json
@@ -0,0 +1,12 @@
+{
+	"id": "labyrinth",
+	"name": "labyrinth",
+	"description": "forever trapped",
+	"author": "vittorio romeo",	
+	"menuPriority": 80,
+	"selectable": true,
+	"styleId": "labyrinth",
+	"musicId": "commandoSteve",
+	"luaFile": "Scripts/Levels/labyrinth.lua",
+	"difficultyMults": [1.25, 1.50, 0.75, 0.5, 0.25, 1.8]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Levels/pi.json b/_RELEASE/Packs/test/Levels/pi.json
new file mode 100644
index 0000000..35ecc6b
--- /dev/null
+++ b/_RELEASE/Packs/test/Levels/pi.json
@@ -0,0 +1,12 @@
+{
+	"id": "pi",
+	"name": "3.141592653589793238462643383279502884197169399375105820974944592307816406286",
+	"description": "do you like pi?",
+	"author": "vittorio romeo",	
+	"menuPriority": 100,
+	"selectable": true,
+	"styleId": "pi",
+	"musicId": "callMeKatla",
+	"luaFile": "Scripts/Levels/pi.lua",
+	"difficultyMults": [1.25, 1.50, 0.75, 0.5, 0.25, 1.8]
+}
diff --git a/_RELEASE/Packs/test/Levels/pointless.json b/_RELEASE/Packs/test/Levels/pointless.json
new file mode 100644
index 0000000..d21313f
--- /dev/null
+++ b/_RELEASE/Packs/test/Levels/pointless.json
@@ -0,0 +1,12 @@
+{
+	"id": "pointless",
+	"name": "pointless",
+	"description": "easiest level of difficulty",
+	"author": "vittorio romeo",
+	"menuPriority": 0,
+	"selectable": true,
+	"styleId": "pointless",
+	"musicId": "jackRussel",
+	"luaFile": "Scripts/Levels/pointless.lua",
+	"difficultyMults": [1.5, 2, 2.5, 3, 0.5, 4]
+}
diff --git a/_RELEASE/Packs/test/Levels/seconddimension.json b/_RELEASE/Packs/test/Levels/seconddimension.json
new file mode 100644
index 0000000..24f84aa
--- /dev/null
+++ b/_RELEASE/Packs/test/Levels/seconddimension.json
@@ -0,0 +1,12 @@
+{
+	"id": "seconddimension",
+	"name": "second dimension",
+	"description": "hard level of difficulty",
+	"author": "vittorio romeo",	
+	"menuPriority": 30,
+	"selectable": true,
+	"styleId": "seconddimension",
+	"musicId": "mazeOfMayonnaise",
+	"luaFile": "Scripts/Levels/seconddimension.lua",
+	"difficultyMults": [1.4, 0.75, 0.6, 1.8]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Music/callMeKatla.json b/_RELEASE/Packs/test/Music/callMeKatla.json
new file mode 100644
index 0000000..2e6b128
--- /dev/null
+++ b/_RELEASE/Packs/test/Music/callMeKatla.json
@@ -0,0 +1,20 @@
+{
+	// Music data id
+	"id": "callMeKatla",
+
+	// Music file
+	"file_name": "callMeKatla.ogg",
+
+	// Music information
+	"name": "Call me Katla, baby",
+	"album": "",
+	"author": "Dunderpatrullen VS. BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 24 },
+		{ "time": 73 },
+		{ "time": 140 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Music/captainCool.json b/_RELEASE/Packs/test/Music/captainCool.json
new file mode 100644
index 0000000..bfc1627
--- /dev/null
+++ b/_RELEASE/Packs/test/Music/captainCool.json
@@ -0,0 +1,20 @@
+{
+
+	// Music data id
+	"id": "captainCool",
+	// Music file
+	"file_name": "captainCool.ogg",
+
+	// Music information
+	"name": "Captain Cool",
+	"album": "Bossfight",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 0 },
+		{ "time": 43 },
+		{ "time": 111 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Music/commandoSteve.json b/_RELEASE/Packs/test/Music/commandoSteve.json
new file mode 100644
index 0000000..93f5c77
--- /dev/null
+++ b/_RELEASE/Packs/test/Music/commandoSteve.json
@@ -0,0 +1,19 @@
+{
+	// Music data id
+	"id": "commandoSteve",
+
+	// Music file
+	"file_name": "commandoSteve.ogg",
+
+	// Music information
+	"name": "Commando Steve",
+	"album": "Caps On, Hats Off",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 61 },
+		{ "time": 88 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Music/drFinkelfracken.json b/_RELEASE/Packs/test/Music/drFinkelfracken.json
new file mode 100644
index 0000000..be0568f
--- /dev/null
+++ b/_RELEASE/Packs/test/Music/drFinkelfracken.json
@@ -0,0 +1,21 @@
+{
+	// Music data id
+	"id": "drFinkelfracken",
+
+	// Music file
+	"file_name": "drFinkelfracken.ogg",
+
+	// Music information
+	"name": "Dr. Finkelfracken's Cure",
+	"album": "Nice Catch Biggy!",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 0 },
+		{ "time": 18 },
+		{ "time": 68 },
+		{ "time": 91 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Music/jackRussel.json b/_RELEASE/Packs/test/Music/jackRussel.json
new file mode 100644
index 0000000..4f3c394
--- /dev/null
+++ b/_RELEASE/Packs/test/Music/jackRussel.json
@@ -0,0 +1,21 @@
+{
+	// Music data id
+	"id": "jackRussel",
+
+	// Music file
+	"file_name": "jackRussel.ogg",
+
+	// Music information
+	"name": "Jack Russel",
+	"album": "Caps On, Hats Off",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 32 },
+		{ "time": 47 },
+		{ "time": 98 },
+		{ "time": 125 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Music/mazeOfMayonnaise.json b/_RELEASE/Packs/test/Music/mazeOfMayonnaise.json
new file mode 100644
index 0000000..be24fe6
--- /dev/null
+++ b/_RELEASE/Packs/test/Music/mazeOfMayonnaise.json
@@ -0,0 +1,20 @@
+{
+	// Music data id
+	"id": "mazeOfMayonnaise",
+
+	// Music file
+	"file_name": "mazeOfMayonnaise.ogg",
+
+	// Music information
+	"name": "The Maze of Mayonnaise",
+	"album": "Caps On, Hats Off",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 35 },
+		{ "time": 52 },
+		{ "time": 93 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Music/milkyWays.json b/_RELEASE/Packs/test/Music/milkyWays.json
new file mode 100644
index 0000000..786c0e1
--- /dev/null
+++ b/_RELEASE/Packs/test/Music/milkyWays.json
@@ -0,0 +1,20 @@
+{
+	// Music data id
+	"id": "milkyWays",
+
+	// Music file
+	"file_name": "milkyWays.ogg",
+
+	// Music information
+	"name": "Milky Ways",
+	"album": "Caps On, Hats Off",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 16 },
+		{ "time": 37 },
+		{ "time": 81 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Music/starshipShowdown.json b/_RELEASE/Packs/test/Music/starshipShowdown.json
new file mode 100644
index 0000000..d1773a8
--- /dev/null
+++ b/_RELEASE/Packs/test/Music/starshipShowdown.json
@@ -0,0 +1,19 @@
+{
+	// Music data id
+	"id": "starshipShowdown",
+
+	// Music file
+	"file_name": "starshipShowdown.ogg",
+
+	// Music information
+	"name": "Starship Showdown",
+	"album": "Caps On, Hats Off",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 26 },
+		{ "time": 66 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Music/steampunkWarlord.json b/_RELEASE/Packs/test/Music/steampunkWarlord.json
new file mode 100644
index 0000000..df69542
--- /dev/null
+++ b/_RELEASE/Packs/test/Music/steampunkWarlord.json
@@ -0,0 +1,20 @@
+{
+	// Music data id
+	"id": "steampunkWarlord",
+
+	// Music file
+	"file_name": "steampunkWarlord.ogg",
+
+	// Music information
+	"name": "Steampunk Warlord",
+	"album": "Caps On, Hats Off",
+	"author": "BOSSFIGHT",
+	
+	// Segments
+	"segments":
+	[
+		{ "time": 74 },
+		{ "time": 98 },		
+		{ "time": 174 }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Scripts/Levels/apeirogon.lua b/_RELEASE/Packs/test/Scripts/Levels/apeirogon.lua
new file mode 100644
index 0000000..95bcd8e
--- /dev/null
+++ b/_RELEASE/Packs/test/Scripts/Levels/apeirogon.lua
@@ -0,0 +1,92 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then pAltBarrage(math.random(2, 3), 2) 
+	elseif mKey == 1 then pBarrageSpiral(3, 0.6, 1)
+	elseif mKey == 2 then pInverseBarrage(0)
+	elseif mKey == 3 then pTunnel(math.random(1, 3))
+	elseif mKey == 4 then pMirrorWallStrip(1, 0)
+	elseif mKey == 5 then pWallExVortex(0, math.random(1, 2), 1)
+	elseif mKey == 6 then pDMBarrageSpiral(math.random(4, 7), 0.4, 1)
+	elseif mKey == 7 then pRandomBarrage(math.random(2, 5), 2.25)
+	elseif mKey == 8 then pMirrorSpiralDouble(math.random(4, 6), 0)
+	elseif mKey == 9 then pMirrorSpiral(math.random(2, 4), 0)
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 7, 8, 9, 9 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(3.05)
+	l_setSpeedInc(0.7)
+	l_setRotationSpeed(0.3)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.04)
+	l_setDelayMult(1.07)
+	l_setDelayInc(0.0)
+	l_setFastSpin(71.0)
+	l_setSides(6)
+	l_setSidesMin(5)
+	l_setSidesMax(7)
+	l_setIncTime(15)
+	l_setMaxInc(2)
+
+	l_setPulseMin(64)
+	l_setPulseMax(84)
+	l_setPulseSpeed(2.0)
+	l_setPulseSpeedR(1.5)
+	l_setPulseDelayMax(9)
+
+	l_setBeatPulseMax(15)
+	l_setBeatPulseDelayMax(21.8)
+
+	enableSwapIfDMGreaterThan(1)
+	disableIncIfDMGreaterThan(1)
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	addPattern(keys[index])
+	index = index + 1
+	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- continuous direction change (even if not on level increment)
+dirChangeTime = 100
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+	dirChangeTime = dirChangeTime - mFrameTime;
+	if dirChangeTime < 0 then
+		-- do not change direction while fast spinning
+		if u_isFastSpinning() == false then
+			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
+			dirChangeTime = 300
+		end
+	end 
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Scripts/Levels/babysteps.lua b/_RELEASE/Packs/test/Scripts/Levels/babysteps.lua
new file mode 100644
index 0000000..2ecaf3f
--- /dev/null
+++ b/_RELEASE/Packs/test/Scripts/Levels/babysteps.lua
@@ -0,0 +1,78 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+	if mKey == 0 then pBarrageSpiral(math.random(1, 2), 1, 1) 
+	elseif mKey == 1 then pInverseBarrage(0)
+	elseif mKey == 2 then pAltBarrage(math.random(1, 3), 2)
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 1, 2 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(1.85)
+	l_setSpeedInc(0.05)
+	l_setRotationSpeed(0.04)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.04)
+	l_setDelayMult(1.0)
+	l_setDelayInc(0.0)
+	l_setFastSpin(0.0)
+	l_setSides(6)
+	l_setSidesMin(6)
+	l_setSidesMax(6)
+	l_setIncTime(15)
+	l_setTutorialMode(true)
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+	m_messageAddImportant("welcome to open hexagon 2", 130)
+	m_messageAddImportant("use left/right to rotate", 130)
+	m_messageAddImportant("avoid the walls!", 130)
+	e_eventStopTimeS(6) e_eventWaitS(6)
+	
+	e_eventStopTimeS(3) e_eventWaitUntilS(12)
+	m_messageAddImportant("great job!", 130)
+	m_messageAddImportant("after a while, things get harder", 130)
+	m_messageAddImportant("get to 45 seconds to win!", 130)
+
+	e_eventWaitUntilS(42)
+	m_messageAddImportant("well done!", 130)
+	m_messageAddImportant("now play some real levels!", 138)
+
+	e_eventWaitUntilS(45)
+	u_eventKill()
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	addPattern(keys[index])
+	index = index + 1
+	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end	
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Scripts/Levels/commando.lua b/_RELEASE/Packs/test/Scripts/Levels/commando.lua
new file mode 100644
index 0000000..33db56a
--- /dev/null
+++ b/_RELEASE/Packs/test/Scripts/Levels/commando.lua
@@ -0,0 +1,71 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+            
+extra = 0
+level = 1
+incrementTime = 5
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()	
+	m_messageAddImportant("level: "..(extra + 1).." / time: "..incrementTime, 170)
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	rWallEx(getRandomSide(), extra)
+	t_wait(getPerfectDelayDM(THICKNESS) * 6)
+end
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(2.25)
+	l_setSpeedInc(0.0)
+	l_setRotationSpeed(0.0)
+	l_setRotationSpeedMax(0.0)
+	l_setRotationSpeedInc(0.0)
+	l_setDelayMult(1.0)
+	l_setDelayInc(0.0)
+	l_setFastSpin(0.0)
+	l_setSides(4)
+	l_setSidesMin(0)
+	l_setSidesMax(0)
+	l_setIncTime(5)
+
+	l_setPulseMin(75)
+	l_setPulseMax(91)
+	l_setPulseSpeed(2)
+	l_setPulseSpeedR(1)
+	l_setPulseDelayMax(0.7)
+
+	l_setBeatPulseMax(17)
+	l_setBeatPulseDelayMax(23.8)
+	
+	l_addTracked("level", "level")
+	l_enableRndSideChanges(false)
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()	
+	u_playSound("beep.ogg")
+	u_playSound("VeeEndurance_test.ogg")
+	
+	extra = extra + 1
+	level = extra + 1
+	incrementTime = incrementTime + 2
+	
+	l_setSides(l_getSides() + 2)
+	l_setIncTime(incrementTime)
+		
+	m_messageAddImportant("level: "..(extra + 1).." / time: "..incrementTime, 170)
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Scripts/Levels/euclideanpc.lua b/_RELEASE/Packs/test/Scripts/Levels/euclideanpc.lua
new file mode 100644
index 0000000..8584081
--- /dev/null
+++ b/_RELEASE/Packs/test/Scripts/Levels/euclideanpc.lua
@@ -0,0 +1,87 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey ==  0 then pAltBarrage(math.random(2, 4), 2) 
+	elseif mKey ==  1 then pMirrorSpiral(math.random(3, 6), 0)
+	elseif mKey ==  2 then pBarrageSpiral(math.random(0, 3), 1, 1)
+	elseif mKey ==  3 then pBarrageSpiral(math.random(0, 2), 1.2, 2)
+	elseif mKey ==  4 then pBarrageSpiral(2, 0.7, 1)
+	elseif mKey ==  5 then pInverseBarrage(0)
+	elseif mKey ==  6 then pTunnel(math.random(1, 3))
+	elseif mKey ==  7 then pMirrorWallStrip(1, 0)
+	elseif mKey ==  8 then pWallExVortex(0, 1, 1)
+	elseif mKey ==  9 then pDMBarrageSpiral(math.random(4, 7), 0.4, 1)
+	elseif mKey == 10 then pRandomBarrage(math.random(2, 4), 2.25)
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7, 8, 9, 10, 10, 10 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(2.7)
+	l_setSpeedInc(0.0)
+	l_setRotationSpeed(0.25)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.04)
+	l_setDelayMult(1.0)
+	l_setDelayInc(0.0)
+	l_setFastSpin(85.0)
+	l_setSides(8)
+	l_setSidesMin(8)
+	l_setSidesMax(8)
+	l_setIncTime(15)
+	l_setMaxInc(6)
+
+	l_setPulseMin(60)
+	l_setPulseMax(87)
+	l_setPulseSpeed(1.2)
+	l_setPulseSpeedR(1)
+	l_setPulseDelayMax(12.9)
+
+	l_setBeatPulseMax(17)
+	l_setBeatPulseDelayMax(24.8)
+
+	enableSwapIfDMGreaterThan(1)
+	disableIncIfDMGreaterThan(1)
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+	e_eventWaitS(15)
+	m_messageAdd("whoa!", 120)
+	e_eventWaitS(45)
+	m_messageAddImportant("may the mayhem begin!", 130)
+	s_setPulseInc(0.15)
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	addPattern(keys[index])
+	index = index + 1
+	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end	
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Scripts/Levels/flatteringshape.lua b/_RELEASE/Packs/test/Scripts/Levels/flatteringshape.lua
new file mode 100644
index 0000000..3be03d6
--- /dev/null
+++ b/_RELEASE/Packs/test/Scripts/Levels/flatteringshape.lua
@@ -0,0 +1,79 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then pAltBarrage(math.random(2, 4), 2) 
+	elseif mKey == 1 then pMirrorSpiral(math.random(3, 6), 0)
+	elseif mKey == 2 then pBarrageSpiral(math.random(0, 3), 1, 1)
+	elseif mKey == 3 then pBarrageSpiral(math.random(0, 2), 1.2, 2)
+	elseif mKey == 4 then pBarrageSpiral(2, 0.7, 1)
+	elseif mKey == 5 then pInverseBarrage(0)
+	elseif mKey == 6 then pTunnel(math.random(1, 3))
+	elseif mKey == 7 then pMirrorWallStrip(1, 0)
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 0, 1, 1, 2, 2, 3, 4, 5, 5, 6, 7, 7 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(1.74)
+	l_setSpeedInc(0.18)
+	l_setRotationSpeed(0.13)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.04)
+	l_setDelayMult(1.0)
+	l_setDelayInc(-0.03)
+	l_setFastSpin(0.0)
+	l_setSides(6)
+	l_setSidesMin(5)
+	l_setSidesMax(6)
+	l_setIncTime(15)
+	l_setMaxInc(8)
+
+	l_setPulseMin(75)
+	l_setPulseMax(91)
+	l_setPulseSpeed(1.5)
+	l_setPulseSpeedR(0.6)
+	l_setPulseDelayMax(9)
+
+	l_setBeatPulseMax(17)
+	l_setBeatPulseDelayMax(23.8)
+
+	enableSwapIfDMGreaterThan(2)
+	disableIncIfDMGreaterThan(2.5)
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	addPattern(keys[index])
+	index = index + 1
+ 	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Scripts/Levels/goldenratio.lua b/_RELEASE/Packs/test/Scripts/Levels/goldenratio.lua
new file mode 100644
index 0000000..eeb0872
--- /dev/null
+++ b/_RELEASE/Packs/test/Scripts/Levels/goldenratio.lua
@@ -0,0 +1,73 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+	if mKey == 0 then pBarrageSpiral(math.random(5, 9), 0.41, 1)
+	elseif mKey == 1 then pMirrorSpiralDouble(math.random(8, 10), 0)
+	elseif mKey == 2 then pMirrorSpiral(math.random(2, 5), 0)
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 0, 1, 1, 2 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(1.7)
+	l_setSpeedInc(0.1)
+	l_setRotationSpeed(0.0)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.1)
+	l_setDelayMult(1.0)
+	l_setDelayInc(0.0)
+	l_setFastSpin(50.0)
+	l_setSides(6)
+	l_setSidesMin(5)
+	l_setSidesMax(7)
+	l_setIncTime(10)
+	l_setMaxInc(6)
+
+	l_setPulseMin(60)
+	l_setPulseMax(87)
+	l_setPulseSpeed(1.2)
+	l_setPulseSpeedR(1)
+	l_setPulseDelayMax(12.9)
+
+	l_setBeatPulseMax(17)
+	l_setBeatPulseDelayMax(26.2)
+
+	l_setWallSkewRight(-20)
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()
+	addPattern(keys[index])
+	index = index + 1
+
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Scripts/Levels/labyrinth.lua b/_RELEASE/Packs/test/Scripts/Levels/labyrinth.lua
new file mode 100644
index 0000000..cda8f24
--- /dev/null
+++ b/_RELEASE/Packs/test/Scripts/Levels/labyrinth.lua
@@ -0,0 +1,74 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+level = 0
+levelTracked = 1
+incrementTime = 3
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()	
+	m_messageAddImportant("level: "..(level + 1).." / time: "..incrementTime, 170)
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()
+	cBarrage(getRandomSide())
+	t_wait(getPerfectDelayDM(THICKNESS) * 6.55)
+end
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(2.25)
+	l_setSpeedInc(0.0)
+	l_setRotationSpeed(0.0)
+	l_setRotationSpeedMax(0.0)
+	l_setRotationSpeedInc(0.0)
+	l_setDelayMult(1.0)
+	l_setDelayInc(0.0)
+	l_setFastSpin(0.0)
+	l_setSides(3)
+	l_setSidesMin(0)
+	l_setSidesMax(0)
+	l_setIncTime(5)
+
+	l_setPulseMin(58)
+	l_setPulseMax(90)
+	l_setPulseSpeed(2.2)
+	l_setPulseSpeedR(0.65)
+	l_setPulseDelayMax(1)
+
+	l_setBeatPulseMax(17)
+	l_setBeatPulseDelayMax(23.8)
+
+	l_setRadiusMin(40)
+	l_addTracked("levelTracked", "level")
+	l_enableRndSideChanges(false)
+
+	enableSwapIfDMGreaterThan(1.5)
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()	
+	u_playSound("beep.ogg")
+	u_playSound("VeeEndurance_test.ogg")
+	
+	level = level + 1
+	levelTracked = level + 1
+	incrementTime = incrementTime + 2
+	
+	l_setSides(l_getSides() + 1)
+	l_setIncTime(incrementTime)
+		
+	m_messageAddImportant("level: "..(level + 1).." / time: "..incrementTime, 170)
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Scripts/Levels/pi.lua b/_RELEASE/Packs/test/Scripts/Levels/pi.lua
new file mode 100644
index 0000000..d2dc98b
--- /dev/null
+++ b/_RELEASE/Packs/test/Scripts/Levels/pi.lua
@@ -0,0 +1,88 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then cWallEx(math.random(0, l_getSides()), math.random(1, 2)) t_wait(getPerfectDelay(THICKNESS) * 2.5)
+	elseif mKey == 1 then pMirrorSpiralDouble(math.random(1, 2), 4)
+	elseif mKey == 2 then rWallEx(math.random(0, l_getSides()), math.random(1, 2)) t_wait(getPerfectDelay(THICKNESS) * 2.8)
+	elseif mKey == 3 then pMirrorWallStrip(1, 2)
+	elseif mKey == 4 then rWallEx(math.random(0, l_getSides()), 1) t_wait(getPerfectDelay(THICKNESS) * 2.3)
+	elseif mKey == 5 then cWallEx(math.random(0, l_getSides()), 7) t_wait(getPerfectDelay(THICKNESS) * 2.7)
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5 }
+keys = shuffle(keys)
+index = 0
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	addPattern(keys[index])
+	index = index + 1
+	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(3.4)
+	l_setSpeedInc(0.10)
+	l_setRotationSpeed(0.25)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.04)
+	l_setDelayMult(1.0)
+	l_setDelayInc(-0.01)
+	l_setFastSpin(80.0)
+	l_setSides(24)
+	l_setSidesMin(20)
+	l_setSidesMax(28)
+	l_setIncTime(15)
+	l_setMaxInc(4)
+
+	l_setPulseMin(68)
+	l_setPulseMax(80)
+	l_setPulseSpeed(3.6)
+	l_setPulseSpeedR(1.4)
+	l_setPulseDelayMax(7)
+
+	l_setBeatPulseMax(15)
+	l_setBeatPulseDelayMax(21.8)
+
+	enableSwapIfDMGreaterThan(1)
+	disableIncIfDMGreaterThan(1.5)
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- continuous direction change (even if not on level increment)
+dirChangeTime = 150
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+	dirChangeTime = dirChangeTime - mFrameTime;
+	if dirChangeTime < 0 then
+		-- do not change direction while fast spinning
+		if u_isFastSpinning() == false then
+			l_setRotationSpeed(l_getRotationSpeed() * -1.0)
+			dirChangeTime = 100
+		end
+	end 
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Scripts/Levels/pointless.lua b/_RELEASE/Packs/test/Scripts/Levels/pointless.lua
new file mode 100644
index 0000000..e46224f
--- /dev/null
+++ b/_RELEASE/Packs/test/Scripts/Levels/pointless.lua
@@ -0,0 +1,79 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey == 0 then pAltBarrage(math.random(5, 10), 3) 
+	elseif mKey == 1 then pRandomBarrage(math.random(5,10), 4)
+	elseif mKey == 2 then pBarrageSpiral(math.random(5, 10), 1, 1)
+	elseif mKey == 3 then pInverseBarrage(math.random(3,5))
+	elseif mKey == 4 then pTunnel(math.random(2, 6))
+	elseif mKey == 5 then pMirrorWallStrip(math.random(3, 10), 1)
+	elseif mKey == 6 then pWallExVortex(math.random(3,5), 1, 0.1)
+	elseif mKey == 7 then pWallRandom(math.random(20,50), 2)
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0,1,2,3,4,5,6,7 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(1.75)
+	l_setSpeedInc(0)
+	l_setRotationSpeed(0.10)
+	l_setRotationSpeedMax(0.2)
+	l_setRotationSpeedInc(0)
+	l_setDelayMult(1)
+	l_setDelayInc(0)
+	l_setFastSpin(0.0)
+	l_setSides(6)
+	l_setSidesMin(4)
+	l_setSidesMax(9)
+	l_setIncTime(5)
+	l_setMaxInc(100)
+
+	l_setPulseMin(75)
+	l_setPulseMax(91)
+	l_setPulseSpeed(1.2)
+	l_setPulseSpeedR(1)
+	l_setPulseDelayMax(23.9)
+
+	l_setBeatPulseMax(1)
+	l_setBeatPulseDelayMax(1)
+
+	--enableSwapIfDMGreaterThan(2.5)
+	--disableIncIfDMGreaterThan(3)
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	addPattern(keys[index])
+	index = index + 1
+	
+	if index - 1 == #keys then
+		index = 0
+	end
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end
diff --git a/_RELEASE/Packs/test/Scripts/Levels/seconddimension.lua b/_RELEASE/Packs/test/Scripts/Levels/seconddimension.lua
new file mode 100644
index 0000000..e6ecf5e
--- /dev/null
+++ b/_RELEASE/Packs/test/Scripts/Levels/seconddimension.lua
@@ -0,0 +1,87 @@
+-- include useful files
+u_execScript("utils.lua")
+u_execScript("common.lua")
+u_execScript("commonpatterns.lua")
+
+-- this function adds a pattern to the timeline based on a key
+function addPattern(mKey)
+		if mKey ==  0 then pAltBarrage(math.random(2, 4), 2) 
+	elseif mKey ==  1 then pMirrorSpiral(math.random(3, 6), 0)
+	elseif mKey ==  2 then pBarrageSpiral(math.random(0, 3), 1, 1)
+	elseif mKey ==  3 then pBarrageSpiral(math.random(0, 2), 1.2, 2)
+	elseif mKey ==  4 then pBarrageSpiral(2, 0.7, 1)
+	elseif mKey ==  5 then pInverseBarrage(0)
+	elseif mKey ==  6 then pTunnel(math.random(1, 3))
+	elseif mKey ==  7 then pMirrorWallStrip(1, 0)
+	elseif mKey ==  8 then pWallExVortex(0, 1, 1)
+	elseif mKey ==  9 then pDMBarrageSpiral(math.random(4, 7), 0.4, 1)
+	elseif mKey == 10 then pRandomBarrage(math.random(2, 4), 2.25)
+	end
+end
+
+-- shuffle the keys, and then call them to add all the patterns
+-- shuffling is better than randomizing - it guarantees all the patterns will be called
+keys = { 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7, 8, 9, 10, 10, 10 }
+keys = shuffle(keys)
+index = 0
+
+-- onInit is an hardcoded function that is called when the level is first loaded
+function onInit()
+	l_setSpeedMult(2.65)
+	l_setSpeedInc(0.1)
+	l_setRotationSpeed(0.2)
+	l_setRotationSpeedMax(0.4)
+	l_setRotationSpeedInc(0.05)
+	l_setDelayMult(1.1)
+	l_setDelayInc(-0.01)
+	l_setFastSpin(70.0)
+	l_setSides(6)
+	l_setSidesMin(5)
+	l_setSidesMax(7)
+	l_setIncTime(15)
+	l_setMaxInc(4)
+
+	l_setPulseMin(70)
+	l_setPulseMax(90)
+	l_setPulseSpeed(1.0)
+	l_setPulseSpeedR(0.6)
+	l_setPulseDelayMax(0)
+
+	l_setBeatPulseMax(17)
+	l_setBeatPulseDelayMax(23.8)
+
+	enableSwapIfDMGreaterThan(1.4)
+	disableIncIfDMGreaterThan(1.4)
+end
+
+-- onLoad is an hardcoded function that is called when the level is started/restarted
+function onLoad()
+	e_eventWaitS(16)
+	m_messageAdd("whoa!", 120)
+	e_eventWaitS(45)
+	m_messageAddImportant("may the mayhem begin!", 130)
+	s_setPulseInc(0.15)
+end
+
+-- onStep is an hardcoded function that is called when the level timeline is empty
+-- onStep should contain your pattern spawning logic
+function onStep()	
+	addPattern(keys[index])
+	index = index + 1
+	
+	if index - 1 == #keys then
+		index = 1
+	end
+end
+
+-- onIncrement is an hardcoded function that is called when the level difficulty is incremented
+function onIncrement()
+end
+
+-- onUnload is an hardcoded function that is called when the level is closed/restarted
+function onUnload()
+end
+
+-- onUpdate is an hardcoded function that is called every frame
+function onUpdate(mFrameTime)
+end	
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Scripts/alternativepatterns.lua b/_RELEASE/Packs/test/Scripts/alternativepatterns.lua
new file mode 100644
index 0000000..4cb9108
--- /dev/null
+++ b/_RELEASE/Packs/test/Scripts/alternativepatterns.lua
@@ -0,0 +1,119 @@
+u_execScript("common.lua")
+
+function pAltMirrorSpiral(mTimes, mExtra)
+	oldThickness = THICKNESS
+	THICKNESS = getPerfectThickness(THICKNESS)
+	delay = getPerfectDelay(THICKNESS)
+	startSide = getRandomSide()
+	loopDir = getRandomDir()	
+	for k = 1, #mTimes do
+		for i = 1, mTimes[k] do
+			rWallEx(startSide, mExtra)
+			if (k % 2) == 0 then
+				startSide = startSide + loopDir
+			else
+				startSide = startSide - loopDir
+			end
+			t_wait(delay)
+		end 
+	end
+
+	THICKNESS = oldThickness
+	
+	t_wait(getPerfectDelay(THICKNESS) * 6.5)
+end
+
+function randomArray(mNumber,mLower,mUpper)
+	a = {}
+	for k = 1, mNumber do
+		a[k] = math.random(mLower,mUpper)
+	end
+	return a
+end
+
+function pAltTunnel(mTimes,mFree)
+	oldThickness = THICKNESS
+	myThickness = getPerfectThickness(THICKNESS)
+	delay = getPerfectDelay(myThickness) * 5
+	startSide = getRandomSide()
+	loopDir = getRandomDir()
+	
+	THICKNESS = myThickness
+	
+	for i = 0, mTimes do
+		if i < mTimes then
+			w_wall(startSide, myThickness + 5 * l_getSpeedMult() * delay)
+		end
+		
+		cBarrageN(startSide + loopDir,mFree)
+		t_wait(delay)
+		
+		loopDir = loopDir * -1
+	end
+	
+	THICKNESS = oldThickness
+end
+
+function cycle(mSides)
+	eArray = {}
+	j = getRandomSide()
+	for i = 1, mSides do 
+		eArray[i] = (i + j) % mSides + 1
+	end
+	return eArray
+end
+
+function pLadder(mTimes,mArray,myThickness)
+
+	delay = getPerfectDelay(myThickness)
+
+	local eArray = {}
+	l = 1
+	s = #mArray/l_getSides()
+	t = math.random(0,100)
+
+	for i = 1, mTimes do
+		q = (i+t) % s + 1
+		for k = 1, l_getSides() do
+			if(mArray[(q-1)*l_getSides() + k] ~= 0) then
+				eArray[l] = 1
+			else
+				eArray[l] = 0
+			end
+			l = l + 1
+		end
+		
+		if i ~= mTimes then
+			for j = 1, 3 do
+				for k = 1,l_getSides() do
+					if(mArray[(q-1)*l_getSides() + k] == 2) then
+						eArray[l] = 1
+					else
+						eArray[l] = 0
+					end
+					l = l + 1
+				end
+			end
+		end
+	end
+
+	patternizer(eArray,myThickness)
+	t_wait(delay*2)
+	
+end
+
+function patternizer(mArray,myThickness)
+	delay = getPerfectDelay(myThickness)
+	eArray = cycle(l_getSides())
+
+	j = math.floor((#mArray) / l_getSides())
+	
+	for i = 1, j do
+		for k = 1, l_getSides() do
+			if mArray[(i - 1)*l_getSides() + k] == 1 then
+				w_wall(eArray[k], myThickness)
+			end
+		end
+		t_wait(delay)
+	end
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Scripts/common.lua b/_RELEASE/Packs/test/Scripts/common.lua
new file mode 100644
index 0000000..975a00d
--- /dev/null
+++ b/_RELEASE/Packs/test/Scripts/common.lua
@@ -0,0 +1,114 @@
+-- common variables
+THICKNESS = 40.0;
+
+function enableSwapIfDMGreaterThan(mDM)
+	if(u_getDifficultyMult() > mDM) then
+		m_messageAdd(" difficulty > " ..mDM.. "\nswap enabled!", 65)
+		l_setSwapEnabled(true)
+	end	
+end
+
+function disableIncIfDMGreaterThan(mDM)
+	if(u_getDifficultyMult() > mDM) then
+		m_messageAdd(" difficulty > " ..mDM.. "\nincrement disabled!", 65)
+		l_setIncEnabled(false)
+	end	
+end
+
+-- getHalfSides: returns half the number of sides (integer)
+function getHalfSides() return math.ceil(l_getSides() / 2) end
+
+-- getRandomSide: returns random mSide
+function getRandomSide() return math.random(0, l_getSides() - 1) end
+
+-- getRandomDir: returns either 1 or -1
+function getRandomDir()
+	if math.random(0, 100) > 50 then return 1 end
+	return -1
+end
+
+-- getPerfectDelay: returns time to wait for two walls to be next to each other
+function getPerfectDelay(mThickness) return mThickness / (5.02 * u_getSpeedMultDM()) * u_getDelayMultDM() end
+
+-- getPerfectDelayDM: returns getPerfectDelay calculated with difficulty mutliplier
+function getPerfectDelayDM(mThickness) return mThickness / (5.02 * u_getSpeedMultDM()) * u_getDelayMultDM() end
+
+-- getPerfectThickness: returns a good THICKNESS value in relation to human reflexes
+function getPerfectThickness(mThickness) return mThickness * u_getSpeedMultDM() end
+
+-- getSideDistance: returns shortest distance from a side to another
+function getSideDistance(mSide1, mSide2)
+	start = mSide1	
+	rightSteps = 0
+	while start ~= mSide2 do
+		rightSteps = rightSteps + 1
+		start = start + 1
+		if start > l_getSides() - 1 then start = 0 end
+	end
+	
+	start = mSide1	
+	leftSteps = 0
+	while start ~= mSide2 do
+		leftSteps = leftSteps + 1
+		start = start - 1
+		if start < 0 then start = l_getSides() - 1 end
+	end
+	
+	if rightSteps < leftSteps then return rightSteps end
+	return leftSteps
+end
+
+-- cWall: creates a wall with the common THICKNESS
+function cWall(mSide) w_wall(mSide, THICKNESS) end
+
+-- oWall: creates a wall opposite to the mSide passed
+function oWall(mSide) cWall(mSide + getHalfSides()) end
+
+-- rWall: union of cwall and owall (created 2 walls facing each other)
+function rWall(mSide)
+	cWall(mSide)
+	oWall(mSide)
+end
+
+-- cWallEx: creates a wall with mExtra walls attached to it 
+function cWallEx(mSide, mExtra)
+	cWall(mSide);
+	loopDir = 1;
+	
+	if mExtra < 0 then loopDir = -1 end
+	for i = 0, mExtra, loopDir do cWall(mSide + i) end
+end
+
+-- oWallEx: creates a wall with mExtra walls opposite to mSide
+function oWallEx(mSide, mExtra)
+	cWallEx(mSide + getHalfSides(), mExtra)
+end
+
+-- rWallEx: union of cwallex and owallex
+function rWallEx(mSide, mExtra)
+	cWallEx(mSide, mExtra)
+	oWallEx(mSide, mExtra)
+end
+
+-- cBarrageN: spawns a barrage of walls, with a free mSide plus mNeighbors
+function cBarrageN(mSide, mNeighbors)
+	for i = mNeighbors, l_getSides() - 2 - mNeighbors, 1 do
+		cWall(mSide + i + 1)
+	end
+end
+
+-- cBarrage: spawns a barrage of walls, with a single free mSide
+function cBarrage(mSide) cBarrageN(mSide, 0) end
+
+-- cBarrageOnlyN: spawns a barrage of wall, with only free mNeighbors
+function cBarrageOnlyN(mSide, mNeighbors)
+	cWall(mSide)
+	cBarrageN(mSide, mNeighbors)
+end
+
+-- cAltBarrage: spawns a barrage of alternate walls
+function cAltBarrage(mSide, mStep)
+	for i = 0, l_getSides() / mStep, 1 do
+		cWall(mSide + i * mStep)
+	end
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Scripts/commonpatterns.lua b/_RELEASE/Packs/test/Scripts/commonpatterns.lua
new file mode 100644
index 0000000..3678253
--- /dev/null
+++ b/_RELEASE/Packs/test/Scripts/commonpatterns.lua
@@ -0,0 +1,213 @@
+u_execScript("common.lua")
+
+-- pAltBarrage: spawns a series of cAltBarrage
+function pAltBarrage(mTimes, mStep)
+	delay = getPerfectDelayDM(THICKNESS) * 5.6
+	
+	for i = 0, mTimes do
+		cAltBarrage(i, mStep)
+		t_wait(delay)
+	end
+	
+	--t_wait(delay)
+end
+
+-- pMirrorSpiral: spawns a spiral of rWallEx
+function pMirrorSpiral(mTimes, mExtra)
+	oldThickness = THICKNESS
+	THICKNESS = getPerfectThickness(THICKNESS)
+	delay = getPerfectDelay(THICKNESS)
+	startSide = getRandomSide()
+	loopDir = getRandomDir()	
+	j = 0
+	
+	for i = 0, mTimes do
+		rWallEx(startSide + j, mExtra)
+		j = j + loopDir
+		t_wait(delay)
+	end
+	
+	THICKNESS = oldThickness
+	
+	--t_wait(getPerfectDelayDM(THICKNESS) * 6.5)
+end
+
+-- pMirrorSpiralDouble: spawns a spiral of rWallEx where you need to change direction
+function pMirrorSpiralDouble(mTimes, mExtra)
+	oldThickness = THICKNESS
+	THICKNESS = getPerfectThickness(THICKNESS)
+	delay = getPerfectDelayDM(THICKNESS) + 10
+	startSide = getRandomSide()
+	currentSide = startSide
+	loopDir = getRandomDir()	
+	j = 0
+	
+	for i = 0, mTimes do
+		rWallEx(startSide + j, mExtra)
+		j = j + loopDir
+		t_wait(delay)
+	end
+	
+	rWallEx(startSide + j, mExtra)
+	t_wait(delay * 0.9)
+	
+	rWallEx(startSide + j, mExtra)
+	t_wait(delay * 0.9)
+	
+	loopDir = loopDir * -1
+	
+	for i = 0, mTimes + 1 do
+		currentSide = currentSide + loopDir;
+		rWallEx(currentSide + j - 1, mExtra)
+		j = j + loopDir
+		t_wait(delay)
+	end
+	
+	THICKNESS = oldThickness
+	--t_wait(getPerfectDelayDM(THICKNESS) * 7.5)
+end
+
+-- pBarrageSpiral: spawns a spiral of cBarrage
+function pBarrageSpiral(mTimes, mDelayMult, mStep)
+	delay = getPerfectDelayDM(THICKNESS) * 5.6 * mDelayMult
+	startSide = getRandomSide()
+	loopDir = mStep * getRandomDir()	
+	j = 0
+	
+	for i = 0, mTimes do
+		cBarrage(startSide + j)
+		j = j + loopDir
+		t_wait(delay)
+		if(l_getSides() < 6) then t_wait(delay * 0.6) end
+	end
+	
+	--t_wait(getPerfectDelayDM(THICKNESS) * 6.1)
+end
+
+-- pDMBarrageSpiral: spawns a spiral of cBarrage, with static delay
+function pDMBarrageSpiral(mTimes, mDelayMult, mStep)
+	delay = (getPerfectDelayDM(THICKNESS) * 5.42) * (mDelayMult / (u_getDifficultyMult() ^ 0.4)) * (u_getSpeedMultDM() ^ 0.35)
+	startSide = getRandomSide()
+	loopDir = mStep * getRandomDir()	
+	j = 0
+	
+	for i = 0, mTimes do
+		cBarrage(startSide + j)
+		j = j + loopDir
+		t_wait(delay)
+		if(l_getSides() < 6) then t_wait(delay * 0.49) end
+	end
+	
+	--t_wait(getPerfectDelayDM(THICKNESS) * (6.7 * (u_getDifficultyMult() ^ 0.7)))
+end
+
+-- pWallExVortex: spawns left-left right-right spiral patters
+function pWallExVortex(mTimes, mStep, mExtraMult)
+	delay = getPerfectDelayDM(THICKNESS) * 5.0 
+	startSide = getRandomSide()
+	loopDir = getRandomDir()
+	currentSide = startSide
+	
+	for j = 0, mTimes do
+		for i = 0, mStep do
+			currentSide = currentSide + loopDir
+			rWallEx(currentSide, loopDir * mExtraMult)
+			t_wait(delay)
+		end
+		
+		loopDir = loopDir * -1
+		
+		for i = 0, mStep + 1 do
+			currentSide = currentSide + loopDir;
+			rWallEx(currentSide, loopDir * mExtraMult)
+			t_wait(delay)
+		end
+	end
+	
+	--t_wait(getPerfectDelayDM(THICKNESS) * 5.5)
+end
+
+-- pWallRandom: spawns random single walls
+function pWallRandom(mTimes, mDelay)
+	for i = 0, mTimes do	
+		cWall(getRandomSide(), THICKNESS)
+		side = getRandomSide()
+		t_wait(getPerfectDelayDM(THICKNESS) * mDelay)
+	end
+end
+
+-- pInverseBarrage: spawns two barrages who force you to turn 180 degrees
+function pInverseBarrage(mTimes)
+	delay = getPerfectDelayDM(THICKNESS) * 9.9
+	startSide = getRandomSide()
+	
+	for i = 0, mTimes do
+		cBarrage(startSide)
+		t_wait(delay)
+		if(l_getSides() < 6) then t_wait(delay * 0.8) end
+		cBarrage(startSide + getHalfSides())
+		t_wait(delay)
+	end
+	
+	--t_wait(getPerfectDelayDM(THICKNESS) * 2.5)
+end
+
+-- pRandomBarrage: spawns barrages with random side, and waits humanly-possible times depending on the sides distance
+function pRandomBarrage(mTimes, mDelayMult)
+	side = getRandomSide()
+	oldSide = 0
+	
+	for i = 0, mTimes do	
+		cBarrage(side)
+		oldSide = side
+		side = getRandomSide()
+		t_wait(getPerfectDelayDM(THICKNESS) * (2 + (getSideDistance(side, oldSide)*mDelayMult)))
+	end
+	
+	--t_wait(getPerfectDelayDM(THICKNESS) * 5.6)
+end
+
+-- pMirrorWallStrip: spawns rWalls close to one another on the same side
+function pMirrorWallStrip(mTimes, mExtra)
+	delay = getPerfectDelayDM(THICKNESS) * 3.65
+	startSide = getRandomSide()
+	
+	if (l_getSides() > 5)
+	then
+		for i = 0, mTimes do
+			rWallEx(startSide, mExtra)
+			t_wait(delay)
+		end
+	else
+		for i = 0, mTimes do
+			cWallEx(startSide, mExtra)
+			t_wait(delay)
+		end
+	end
+	
+	--t_wait(getPerfectDelayDM(THICKNESS) * 5.00)
+end
+
+-- pTunnel: forces you to circle around a very thick wall
+function pTunnel(mTimes)
+	oldThickness = THICKNESS
+	myThickness = getPerfectThickness(THICKNESS)
+	delay = getPerfectDelay(myThickness) * 8
+	startSide = getRandomSide()
+	loopDir = getRandomDir()
+	
+	THICKNESS = myThickness
+	
+	for i = 0, mTimes do
+		if i < mTimes then
+			w_wall(startSide, myThickness + 5 * u_getSpeedMultDM() * delay)
+		end
+		
+		cBarrage(startSide + loopDir)
+		t_wait(delay)
+		
+		loopDir = loopDir * -1
+	end
+	
+	THICKNESS = oldThickness
+end
diff --git a/_RELEASE/Packs/test/Scripts/utils.lua b/_RELEASE/Packs/test/Scripts/utils.lua
new file mode 100644
index 0000000..300f63c
--- /dev/null
+++ b/_RELEASE/Packs/test/Scripts/utils.lua
@@ -0,0 +1,28 @@
+-- initialize random seed
+math.randomseed(os.time())
+math.random()
+math.random()
+math.random()
+
+-- shuffle: shuffles an array
+function shuffle(t)
+	math.randomseed(os.time())
+	local iterations = #t
+	local j
+	for i = iterations, 2, -1 do
+			j = math.random(i)
+			t[i], t[j] = t[j], t[i]
+	end
+	
+	return t
+end
+
+-- clamp: clamps a number between two values
+function clamp(input, min_val, max_val)
+	if input < min_val then
+		input = min_val
+	elseif input > max_val then
+		input = max_val
+	end
+	return input
+end
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Styles/apeirogon.json b/_RELEASE/Packs/test/Styles/apeirogon.json
new file mode 100644
index 0000000..3436509
--- /dev/null
+++ b/_RELEASE/Packs/test/Styles/apeirogon.json
@@ -0,0 +1,30 @@
+{
+	// Style data id
+	"id": "apeirogon",
+
+	// Hue options
+	"hue_min": 149,
+	"hue_max": 360,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.8,
+	"pulse_increment": 0.027,
+
+	// 3D options
+	"3D_depth": 8,
+	"3D_skew": 0.15,
+	"3D_spacing": 1.5,
+	
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [253, 253, 253, 255], "pulse": [0, 0, 0, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [90, 90, 90, 255], "pulse": [75, 15, 15, 0]},
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [60, 60, 60, 255], "pulse": [0, 0, 0, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Styles/babysteps.json b/_RELEASE/Packs/test/Styles/babysteps.json
new file mode 100644
index 0000000..d296881
--- /dev/null
+++ b/_RELEASE/Packs/test/Styles/babysteps.json
@@ -0,0 +1,34 @@
+{
+	// Style data id
+	"id": "babysteps",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 360,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 4,
+	"3D_skew": 0.15,
+	"3D_spacing": 2.5,
+	"3D_darken_multiplier": 1.1,
+	"3D_alpha_multiplier": 0.4,
+	"3D_alpha_falloff": 15.0,
+	"3D_override_color": [85, 95, 155, 255],
+	
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [0, 0, 0, 255], "pulse": [0, 0, 0, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [240, 240, 240, 255], "pulse": [0, 0, 0, 0]},
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [200, 200, 200, 255], "pulse": [0, 0, 25, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Styles/commando.json b/_RELEASE/Packs/test/Styles/commando.json
new file mode 100644
index 0000000..187ff16
--- /dev/null
+++ b/_RELEASE/Packs/test/Styles/commando.json
@@ -0,0 +1,36 @@
+{
+	// Style data id
+	"id": "commando",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 255,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": -1.5,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+	
+	// 3D options
+	"3D_depth": 7,
+	"3D_skew": 0.20,
+	"3D_spacing": 1.3,
+	"3D_darken_multiplier": 1.6,
+	"3D_alpha_multiplier": 1,
+	"3D_alpha_falloff": 0.1,
+	"3D_override_color": [125, 185, 125, 255],
+
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [28, 20, 13, 225], "pulse": [0, 0, 0, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [242, 233, 225, 255], "pulse": [0, 0, 0, 0] },
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [203, 232, 107, 255], "pulse": [-70, 0, 0, 0] },
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [255, 255, 255, 255], "pulse": [0, 0, 0, 0] },
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [203, 232, 107, 255], "pulse": [-70, 0, 0, 0] }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Styles/dangertest.json b/_RELEASE/Packs/test/Styles/dangertest.json
new file mode 100644
index 0000000..b9a92c9
--- /dev/null
+++ b/_RELEASE/Packs/test/Styles/dangertest.json
@@ -0,0 +1,34 @@
+{
+	// Style data id
+	"id": "dangertest",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 360,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+
+	// 3D options
+	"3D_depth": 5,
+	"3D_skew": 0.15,
+	"3D_spacing": 1.5,
+	"3D_darken_multiplier": 1.5,
+	"3D_alpha_multiplier": 0.5,
+	"3D_alpha_falloff": 15.0,
+	"3D_override_color": [45, 45, 45, 255],
+
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+	
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [253, 253, 253, 255], "pulse": [0, 0, 0, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [73, 73, 0, 255], "pulse": [0, 0, 0, 0]},
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [11, 11, 11, 255], "pulse": [0, 0, 0, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Styles/euclideanpc.json b/_RELEASE/Packs/test/Styles/euclideanpc.json
new file mode 100644
index 0000000..6c1447f
--- /dev/null
+++ b/_RELEASE/Packs/test/Styles/euclideanpc.json
@@ -0,0 +1,34 @@
+{
+	// Style data id
+	"id": "euclideanpc",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 360,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 12,
+	"3D_skew": 0.15,
+	"3D_spacing": 2.1,
+	"3D_darken_multiplier": 1.1,
+	"3D_alpha_multiplier": 0.4,
+	"3D_alpha_falloff": 1.0,
+	"3D_override_color": [166, 166, 166, 255],
+	
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [253, 253, 253, 255], "pulse": [0, 0, 0, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [73, 73, 0, 255], "pulse": [0, 0, 0, 0]},
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [11, 11, 11, 255], "pulse": [0, 0, 0, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Styles/flatteringshape.json b/_RELEASE/Packs/test/Styles/flatteringshape.json
new file mode 100644
index 0000000..cf8b59a
--- /dev/null
+++ b/_RELEASE/Packs/test/Styles/flatteringshape.json
@@ -0,0 +1,30 @@
+{
+	// Style data id
+	"id": "flatteringshape",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 160,
+	"hue_ping_pong": true,
+	"hue_increment": 0.7,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 2.0,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 7,
+	"3D_skew": 0.15,
+	"3D_spacing": 1.2,
+	
+	// Main color
+	"main": { "main": true, "dynamic": true, "value": [255, 0, 0, 255], "pulse": [0, 50, 0, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 2.7, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]},
+		{ "dynamic": false, "dynamic_offset": true, "dynamic_darkness": 2.5, "value": [45, 60, 45, 255], "pulse": [25, 25, 25, 0], "offset": 5.0}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Styles/goldenratio.json b/_RELEASE/Packs/test/Styles/goldenratio.json
new file mode 100644
index 0000000..6e9a34b
--- /dev/null
+++ b/_RELEASE/Packs/test/Styles/goldenratio.json
@@ -0,0 +1,34 @@
+{
+	// Style data id
+	"id": "goldenratio",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 255,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 8,
+	"3D_skew": 0.15,
+	"3D_spacing": 1.5,
+	
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [0, 0, 0, 225], "pulse": [25, 50, 75, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 25.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 50.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 75.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 100.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 125.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 150.0}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Styles/labyrinth.json b/_RELEASE/Packs/test/Styles/labyrinth.json
new file mode 100644
index 0000000..b4d6c9c
--- /dev/null
+++ b/_RELEASE/Packs/test/Styles/labyrinth.json
@@ -0,0 +1,33 @@
+{
+	// Style data id
+	"id": "labyrinth",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 255,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": -1.9,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 4,
+	"3D_skew": 0.20,
+	"3D_spacing": 2.6,
+
+	
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [255, 255, 255, 225], "pulse": [0, 0, 0, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [12, 24, 30, 255], 	"pulse": [0, 0, 0, 0] },
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [73, 31, 92, 255], 	"pulse": [0, 0, -30, 0] },
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [25, 25, 25, 255], 	"pulse": [0, 0, 0, 0] },
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [73, 31, 92, 255], 	"pulse": [0, 0, -30, 0] }
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Styles/pi.json b/_RELEASE/Packs/test/Styles/pi.json
new file mode 100644
index 0000000..f9b6484
--- /dev/null
+++ b/_RELEASE/Packs/test/Styles/pi.json
@@ -0,0 +1,34 @@
+{
+	// Style data id
+	"id": "pi",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 255,
+	"hue_ping_pong": false,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 4,
+	"3D_skew": 0.15,
+	"3D_spacing": 4.5,
+	
+	// Main color
+	"main": { "main": true, "dynamic": false, "value": [0, 0, 0, 225], "pulse": [99, 30, 165, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 74, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 25.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 50.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 115, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 75.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 98, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 100.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [250, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 125.0},
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [163, 190, 190, 255], "pulse": [0, 0, 0, 0], "offset": 4.2, "hue_shift": 150.0}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Styles/pointless.json b/_RELEASE/Packs/test/Styles/pointless.json
new file mode 100644
index 0000000..2c535b7
--- /dev/null
+++ b/_RELEASE/Packs/test/Styles/pointless.json
@@ -0,0 +1,30 @@
+{
+	// Style data id
+	"id": "pointless",
+
+	// Hue options
+	"hue_min": 0,
+	"hue_max": 360,
+	"hue_ping_pong": false,
+	"hue_increment": 0.7,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 8,
+	"3D_skew": 0.15,
+	"3D_spacing": 1.5,
+	
+	// Main color
+	"main": { "main": true, "dynamic": true, "value": [255, 0, 0, 255], "pulse": [-80, 75, 65, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 2.7, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]},
+		{ "dynamic": true, "dynamic_offset": false, "dynamic_darkness": 3.5, "value": [0, 0, 0, 0], "pulse": [0, 0, 0, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/Styles/seconddimension.json b/_RELEASE/Packs/test/Styles/seconddimension.json
new file mode 100644
index 0000000..6a689d0
--- /dev/null
+++ b/_RELEASE/Packs/test/Styles/seconddimension.json
@@ -0,0 +1,34 @@
+{
+	// Style data id
+	"id": "seconddimension",
+
+	// Hue options
+	"hue_min": 200,
+	"hue_max": 340,
+	"hue_ping_pong": true,
+	"hue_increment": 1.0,
+	
+	// Pulse options
+	"pulse_min": 0.0,
+	"pulse_max": 1.5,
+	"pulse_increment": 0.025,
+
+	// 3D options
+	"3D_depth": 7,
+	"3D_skew": 0.15,
+	"3D_spacing": 1.5,
+	"3D_darken_multiplier": 1.5,
+	"3D_alpha_multiplier": 0.5,
+	"3D_alpha_falloff": 19.0,
+	"3D_override_color": [45, 45, 45, 255],
+	
+	// Main color
+	"main": { "main": true, "dynamic": true, "value": [0, 0, 0, 255], "pulse": [0, 0, 0, 0] },
+
+	// Background colors
+	"colors":
+	[
+		{ "dynamic": true, "dynamic_offset": true, "dynamic_darkness": 1.0, "value": [190, 190, 190, 255], "pulse": [15, 15, 15, 0], "offset": 4.7},
+		{ "dynamic": false, "dynamic_offset": false, "dynamic_darkness": 1.0, "value": [235, 235, 235, 255], "pulse": [0, 0, 0, 0]}
+	]
+}
\ No newline at end of file
diff --git a/_RELEASE/Packs/test/pack.json b/_RELEASE/Packs/test/pack.json
new file mode 100644
index 0000000..cd1eb6a
--- /dev/null
+++ b/_RELEASE/Packs/test/pack.json
@@ -0,0 +1,4 @@
+{
+	"name": "test",
+	"priority": 0
+} 
diff --git a/extlibs/SSVCMake b/extlibs/SSVCMake
new file mode 160000
index 0000000..6df8c85
--- /dev/null
+++ b/extlibs/SSVCMake
@@ -0,0 +1 @@
+Subproject commit 6df8c85518cbde1d6c0177cd78b367589ace89b6
-- 
2.11.0

